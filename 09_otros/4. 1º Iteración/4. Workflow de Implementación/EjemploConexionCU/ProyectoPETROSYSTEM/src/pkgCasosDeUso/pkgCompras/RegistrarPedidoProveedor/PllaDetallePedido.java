/*
 * PllaDetallePedido.java
 *
 * Created on 8 de junio de 2008, 17:06
 */

package pkgCasosDeUso.pkgCompras.RegistrarPedidoProveedor;
import javax.swing.DefaultListModel;
import pkgRecursosDeSoporte.ValText;

import pkgClasesDeNegocio.Compras.DetallePedidoAProveedor;
import pkgClasesDeNegocio.Compras.Producto;
import pkgRecursosDeSoporte.Mensaje;
import pkgRecursosDeSoporte.Pantalla;
import pkgRecursosDeSoporte.pkgLista.Iterador;
import pkgRecursosDeSoporte.pkgLista.Lista;

/**
 *
 * @author  Armando
 */
public class PllaDetallePedido extends javax.swing.JDialog {
    
      private GestorRegistrarPedidoProveedor gestor;
     

      private double montoTotal=0;
      private int cantidadProductos=0;
    
      private DefaultListModel lstModelProductos=new DefaultListModel();
    
    /** Creates new form PllaDetallePedido */
    public PllaDetallePedido() {
        initComponents();
        
       
    }

    private void cargarDetalles() {
        Iterador itDetalles=this.gestor.getDetallesPedido().crearIterador();
        
        int fila=0;
        while(itDetalles.siguiente()){
         DetallePedidoAProveedor dlle=(DetallePedidoAProveedor) itDetalles.getElementoActual();
         
         double precioActual=dlle.getPrecioActual();
         double cantidad=dlle.getCantidad();
         
         double res=precioActual*cantidad;
         
         this.montoTotal=montoTotal+res;
         
        
         this.tblCantidadesProductos.setValueAt(dlle.getProducto().getNombre(),fila,0);
         this.tblCantidadesProductos.setValueAt(dlle.getProducto().getUnidad(),fila,1);
         this.tblCantidadesProductos.setValueAt(new Double(dlle.getPrecioActual()),fila,2);
         this.tblCantidadesProductos.setValueAt(new Double(dlle.getProducto().getStockActual()),fila,3);
         this.tblCantidadesProductos.setValueAt(new Double(dlle.getCantidad()),fila,4);
        
   
         fila++;
        }
        
        this.lblValorMontoTotal.setText(ValText.getStringDouble(montoTotal));
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPSeleccionProductos = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();
        btnAgregarProducto = new javax.swing.JButton();
        jSPProductos = new javax.swing.JScrollPane();
        lstProductos = new javax.swing.JList();
        jSPCantidadesProductos = new javax.swing.JScrollPane();
        tblCantidadesProductos = new javax.swing.JTable();
        btnQuitarProducto = new javax.swing.JButton();
        lblMontoTotal = new javax.swing.JLabel();
        lblValorMontoTotal = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Detalle de Pedido");
        setResizable(false);

        jPSeleccionProductos.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecci√≥n Productos"));

        jLabel1.setText("Producto:");

        txtProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtProductoKeyReleased(evt);
            }
        });

        btnAgregarProducto.setText("Agregar");
        btnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoActionPerformed(evt);
            }
        });

        lstProductos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lstProductosKeyPressed(evt);
            }
        });
        jSPProductos.setViewportView(lstProductos);

        tblCantidadesProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Producto", "Unidad", "Precio ($)", "Stock Actual", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCantidadesProductos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblCantidadesProductosKeyReleased(evt);
            }
        });
        jSPCantidadesProductos.setViewportView(tblCantidadesProductos);

        btnQuitarProducto.setText("Quitar");
        btnQuitarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarProductoActionPerformed(evt);
            }
        });

        lblMontoTotal.setText("MONTO TOTAL ($) :");

        lblValorMontoTotal.setText("0");
        lblValorMontoTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPSeleccionProductosLayout = new javax.swing.GroupLayout(jPSeleccionProductos);
        jPSeleccionProductos.setLayout(jPSeleccionProductosLayout);
        jPSeleccionProductosLayout.setHorizontalGroup(
            jPSeleccionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSeleccionProductosLayout.createSequentialGroup()
                .addGroup(jPSeleccionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPSeleccionProductosLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                        .addComponent(btnAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSPProductos, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addComponent(jSPCantidadesProductos, 0, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPSeleccionProductosLayout.createSequentialGroup()
                        .addComponent(lblMontoTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblValorMontoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(177, 177, 177)
                        .addComponent(btnQuitarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPSeleccionProductosLayout.setVerticalGroup(
            jPSeleccionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSeleccionProductosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPSeleccionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnAgregarProducto)
                    .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jSPProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jSPCantidadesProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPSeleccionProductosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuitarProducto)
                    .addComponent(lblMontoTotal)
                    .addComponent(lblValorMontoTotal))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAceptar.setText("Aceptar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPSeleccionProductos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPSeleccionProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnAceptar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
       this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void txtProductoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProductoKeyReleased
    try{     
     
     if(evt.getKeyCode()==10){
      this.tomarProductoIngresado();
     }   
     else{
      String palabra=ValText.getPrimerCrtMayuscula(this.txtProducto.getText().trim());   
      this.ubicarPalabra(palabra);
     }   
        
     
     
   }
   catch(Exception ex){
    this.lstProductos.setSelectedValue(this.lstModelProductos.get(0),true);
   }
    }//GEN-LAST:event_txtProductoKeyReleased

    private void btnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoActionPerformed
      this.tomarProductoIngresado();
    }//GEN-LAST:event_btnAgregarProductoActionPerformed

    private void tomarProductoIngresado(){
    
      //Deebo agergar lo que est√° seleccionado en la lista, a la tabla.
        //Antes debo buscar los datos del producto, para cargarlos en la tabla
        
     try{     
      
     //String palabra=ValText.getPrimerCrtMayuscula(this.txtRazonSocial.getText().trim());   
     //boolean res=this.ubicarPalabra(palabra);
     
       String producto=(String)this.lstProductos.getSelectedValue(); 
     
      
       
       
       if(producto!=null){
           
        if(this.verificarExistenciaProducto(producto)==false){
         this.tomarSeleccionProducto(producto);
        }   
           
        
       } 
       else{
        this.mostrarMensajePantalla("Debe seleccioanr antes el proveedor",Mensaje.TIPO_AVISO);
       }
       
    }
    catch(Exception ex){
     this.lstProductos.setSelectedValue(this.lstModelProductos.get(0),true);
    }
      
    
    
    }
    
    private boolean verificarExistenciaProducto(String nomProducto){
      
        boolean res=false;
        
        for(int i=0;i<this.tblCantidadesProductos.getRowCount();i++){
        
            String valor=(String) this.tblCantidadesProductos.getValueAt(i,0);
            
            if(valor!=null && valor.compareTo(nomProducto)==0){
             return true;
            }
            
        }
        
        return res;
        
        
        
    }
    
    private void tblCantidadesProductosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblCantidadesProductosKeyReleased
        
      try{  
        if(evt.getKeyCode()==10){    
         
            this.tblCantidadesProductos.setShowGrid(true);
            
            
            
            int filaSeleccionada=this.tblCantidadesProductos.getSelectedRow();
            
            if(filaSeleccionada>=0){
               double resValor=0;
               
               for(int i=0;i<this.tblCantidadesProductos.getRowCount();i++){
               
                
                if(this.tblCantidadesProductos.getValueAt(i,0)!=null){
                
                  Double precioCosto=(Double) this.tblCantidadesProductos.getModel().getValueAt(i,2);   
                  
                
                 if(precioCosto!=null){
                  double valorPrecioCosto=precioCosto.doubleValue();
               
                  Double cantidad=(Double) this.tblCantidadesProductos.getValueAt(i,4);
               
                  double valorCantidad=0;
                  
                  if(cantidad!=null){
                   
                   if(cantidad.doubleValue()>0){
                    valorCantidad=cantidad.doubleValue();
                    resValor=resValor+(valorPrecioCosto*valorCantidad);
                   }
                   else{
                    this.tblCantidadesProductos.setValueAt(new Double(0),i,4);
                   }
                     
                  }
                 }
                    
                }
                else{ this.tblCantidadesProductos.setValueAt(null,i,4);}
                   
                   
                  
                   
               } 
               
               
               
               this.montoTotal=resValor;
               

               
               String valorMontoTotal=ValText.getStringDouble(montoTotal);
               
               this.lblValorMontoTotal.setText(valorMontoTotal); 
            }
            
         
        }
        
        if(evt.getKeyCode()==127){
         this.quitarProducto();
        
        }
        
        
      }
      catch(Exception e){
      
          this.mostrarMensajePantalla("Valor no v√°lido ingresado en cantidad de producto",Mensaje.TIPO_AVISO);
          
      
      }
      
      
        
    }//GEN-LAST:event_tblCantidadesProductosKeyReleased

    private void btnQuitarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarProductoActionPerformed
     
        this.quitarProducto();
        
    }//GEN-LAST:event_btnQuitarProductoActionPerformed

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        
        
     try{  
         
        this.gestor.nuevosDetalles();
        int bNom=0;
         
        for(int i=0;i<this.tblCantidadesProductos.getRowCount();i++){
        
            String nomProducto=(String) this.tblCantidadesProductos.getValueAt(i,0);
            if(nomProducto==null || (nomProducto==null && i==0)){break;}
            
            bNom=1;
            Double cantidad=(Double) this.tblCantidadesProductos.getValueAt(i,4);
            
            if(cantidad!=null && cantidad.doubleValue()>0){
              double valorCantidad=cantidad.doubleValue();
              
              this.gestor.agregarDetallePedido(nomProducto,valorCantidad);
      
            }
            else{
             this.mostrarMensajePantalla("No se ha especificado la cantidad para el producto: "+nomProducto,Mensaje.TIPO_AVISO);
             this.gestor.nuevosDetalles();
             break; 
            }
            
            
     
        }
        if(bNom==0){
         this.mostrarMensajePantalla("No se han agregado productos para el pedido",Mensaje.TIPO_AVISO);
         this.dispose(); 
         return;
        }
        
        if(this.gestor.existenDetalles()){
          this.mostrarMensajePantalla("Los productos han sidos cargados con √©xito",Mensaje.TIPO_AVISO);
          this.gestor.setMontoTotalPedido(ValText.getDouble(this.lblValorMontoTotal.getText()));
          this.dispose();
        }
       
     }
     catch(Exception e){
      this.mostrarMensajePantalla("Datos no v√°lidos para los detalles. Verifique que las cantidades hayan sido ingresadas correctamente.",Mensaje.TIPO_AVISO);
     }
        
        
        
        
        
        
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void lstProductosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lstProductosKeyPressed
       if(evt.getKeyCode()==10){
         this.txtProducto.setText((String)this.lstProductos.getSelectedValue());
         this.tomarProductoIngresado();
     }
    }//GEN-LAST:event_lstProductosKeyPressed
     
  
   private void quitarProducto(){
    
     int filaSeleccionada=this.tblCantidadesProductos.getSelectedRow();
     
     if(filaSeleccionada>=0){
     
       Double cantidad=(Double) this.tblCantidadesProductos.getValueAt(filaSeleccionada,4);
       Double precioCosto=(Double) this.tblCantidadesProductos.getValueAt(filaSeleccionada,2);
       
       cantidadProductos--;
       
       if(cantidad!=null && precioCosto!=null){
       
           double valorCantidad=cantidad.doubleValue();
           double valorPrecioCosto=precioCosto.doubleValue();
           
           if(this.montoTotal>0){
               
             double res=valorCantidad*valorPrecioCosto;  
       
             this.montoTotal=this.montoTotal-res;
             
             this.lblValorMontoTotal.setText(ValText.getStringDouble(montoTotal));
           }
         
         
           
       }
         
       
      
 
       this.tblCantidadesProductos.setValueAt(null, filaSeleccionada,0);
       this.tblCantidadesProductos.setValueAt(null, filaSeleccionada,1);
       this.tblCantidadesProductos.setValueAt(null, filaSeleccionada,2);
       this.tblCantidadesProductos.setValueAt(null, filaSeleccionada,3);
       this.tblCantidadesProductos.setValueAt(null, filaSeleccionada,4);
       
       this.actualizarTabla();
       
     }
     else{
      this.mostrarMensajePantalla("Debe antes seleccionar un producto a quitar",Mensaje.TIPO_AVISO);
     
     }
        
       
    
   }
    
   private void actualizarTabla(){
       Lista lstNuevosProductos=new Lista();
       Lista lstCantidades=new Lista();
        
       for(int i=0;i<this.tblCantidadesProductos.getRowCount();i++){
        String nomProducto=(String)this.tblCantidadesProductos.getValueAt(i,0);
        
        if(nomProducto!=null){
           
           String unidad=(String) this.tblCantidadesProductos.getValueAt(i, 1);
           Double precioCosto=(Double) this.tblCantidadesProductos.getValueAt(i,2);
           Double stockActual=(Double) this.tblCantidadesProductos.getValueAt(i,3);
           
           
            
           Producto p=new Producto();
           p.setNombre(nomProducto);
           p.setPrecioCosto(precioCosto);
           p.setUnidad(unidad);
           p.setStockActual(stockActual.doubleValue());
           
           lstNuevosProductos.insertarUltimo(p);
           
           Double valorCantidad=(Double) this.tblCantidadesProductos.getValueAt(i,4);
           
           if(valorCantidad!=null)
            lstCantidades.insertarUltimo(valorCantidad);
           else{
            lstCantidades.insertarUltimo(new Double(0));
           }
           
           this.tblCantidadesProductos.setValueAt(null, i, 0);
           this.tblCantidadesProductos.setValueAt(null, i, 1);
           this.tblCantidadesProductos.setValueAt(null, i, 2);
           this.tblCantidadesProductos.setValueAt(null, i, 3);
           this.tblCantidadesProductos.setValueAt(null, i, 4);
        }
           
           
       }
       
       if(lstNuevosProductos.estaVacia()==false){
           Iterador itNuevosProductos=lstNuevosProductos.crearIterador();
           Iterador itCantidades=lstCantidades.crearIterador();
           int fila=0;
           while(itNuevosProductos.siguiente()){
               
            Producto p=(Producto) itNuevosProductos.getElementoActual();
               
            this.tblCantidadesProductos.setValueAt(p.getNombre(), fila, 0);
            
            this.tblCantidadesProductos.setValueAt(p.getUnidad(), fila, 1);
            
            Double valorPrecioCosto=new Double(p.getPrecioCosto());
            this.tblCantidadesProductos.setValueAt(valorPrecioCosto, fila, 2);
            
            Double stockActual=new Double(p.getStockActual());
            this.tblCantidadesProductos.setValueAt(stockActual, fila, 3);
            

            itCantidades.siguiente();
            Double cantidad=(Double) itCantidades.getElementoActual();
            
            this.tblCantidadesProductos.setValueAt(cantidad, fila, 4);
            
            
            
            fila++;
           
           }
           
           
       }
       
       this.tblCantidadesProductos.setShowGrid(true);
       
   }
   
   
   
   public void mostrarMensajePantalla(String mensaje,int tipoMensaje){
     Mensaje.mensaje_Estandar(mensaje,"Mensaje", tipoMensaje);
    }
    
   private void tomarSeleccionProducto(String nomProducto){
   
     Producto productoEncontrado=this.gestor.getProducto(nomProducto);
     
     if(cantidadProductos==30){
      this.mostrarMensajePantalla("No se pueden agregar m√°s productos. La m√°xima cantidad por pedido es de 30 productos",Mensaje.TIPO_AVISO);
      return;
     }
     
     
     if(productoEncontrado!=null){
      
         int fila=this.getFilaVacia();
         
         this.tblCantidadesProductos.setValueAt(productoEncontrado.getNombre(),fila,0);
         this.tblCantidadesProductos.setValueAt(productoEncontrado.getUnidad(),fila,1);
         
         
         String vPrecioCosto=ValText.getStringDouble(productoEncontrado.getPrecioCosto());
         Double valorPrecioCosto=new Double(ValText.getDouble(vPrecioCosto));
         
         this.tblCantidadesProductos.setValueAt(valorPrecioCosto,fila,2);
         
         Double stockActual=new Double(productoEncontrado.getStockActual());
         
         this.tblCantidadesProductos.setValueAt(stockActual,fila,3);
         
         this.cantidadProductos++;
     
     }
  
     
     this.tblCantidadesProductos.setShowGrid(true);
       
       
   }
   
   private int getFilaVacia(){
    int filaLibre=0;
    
     for(int i=0;i<this.tblCantidadesProductos.getRowCount();i++){
       Object o=this.tblCantidadesProductos.getValueAt(i,0);
       
       if(o==null){
        return i;
       }
     
     }
    
    
    
     return filaLibre;
   }
    
    
  private boolean ubicarPalabra(String palabra){
    
       char palabraV[]=palabra.toUpperCase().toCharArray();
        
        int cantPalabras=this.lstModelProductos.getSize();
        int tamPalabraV=palabraV.length;
        
        
        for(int i=0;i<cantPalabras;i++){
        
         String valorList=(String)this.lstModelProductos.get(i);
         String valorListaMay=valorList.toUpperCase();
         
         char valorListV[]=valorListaMay.toCharArray();
         
         int j=0;
         if(valorListV.length>=tamPalabraV){
             for(j=0;j<tamPalabraV && palabraV[j]==valorListV[j];j++);
         }
         
        if(j==tamPalabraV){
          this.lstProductos.setSelectedValue(valorList,true);   
          
          return true;   
        }
         
        }
        
        return false;
    } 
     
    public void abrirVentana(Lista productos,GestorRegistrarPedidoProveedor gestor){
     this.lstProductos.setModel(this.lstModelProductos);
     this.gestor=gestor;
     
     //Pantalla.insertarIcono(this,"D:/Facultad/5AÔøΩoK1/ProyectoFinal/Iteracion1/4. 1ÔøΩ IteraciÔøΩn/Interfaces/PrjModuloCompras/Imagenes/logoestacion.gif");
     Pantalla.centrarEnPantallaJDialog(this);
     
     Iterador itProductos=productos.crearIterador();
     
     while(itProductos.siguiente()){
      
         Producto producto=(Producto) itProductos.getElementoActual();
         this.lstModelProductos.addElement(producto.getNombre());
         
     
     }
     
     if(this.gestor.existenDetalles()){
      this.cargarDetalles();
     }
     
     this.setModal(true);
     this.setVisible(true);
    } 
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnQuitarProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPSeleccionProductos;
    private javax.swing.JScrollPane jSPCantidadesProductos;
    private javax.swing.JScrollPane jSPProductos;
    private javax.swing.JLabel lblMontoTotal;
    private javax.swing.JLabel lblValorMontoTotal;
    private javax.swing.JList lstProductos;
    private javax.swing.JTable tblCantidadesProductos;
    private javax.swing.JTextField txtProducto;
    // End of variables declaration//GEN-END:variables
    
}
