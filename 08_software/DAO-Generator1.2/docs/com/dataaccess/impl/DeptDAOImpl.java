/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator Developed by akcess(www.akcess.in)
* Date of code generation: Fri Nov 04 00:21:41 PST 2005
*
* DAO-Generator Version 1.1
*
*/

package com.dataaccess.impl;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.Vector;
import java.util.Collection;
import java.util.ArrayList;
import java.sql.*;
import com.dataaccess.exception.*;
import com.dataaccess.vo.*;
import com.dataaccess.dao.*;


/**
* 
* Implementation of DeptDAO interface 
* 
*/


public class DeptDAOImpl implements DeptDAO
{


/**
* Method deletes a record from table DEPT
* @param DeptPK deptpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DeptPK deptpk , Connection con)throws DeptException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DEPT where DEPTNO = ?");
			ps.setLong(1, deptpk.getDeptno());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DeptException(sqle);}
		catch(Exception e) {throw new DeptException(e);}
	}



/**
* This method updates a record in table DEPT
* @param DeptPK
* @param Dept
* @param  Connection con
* @return   int
*/

	public int update(DeptPK deptpk, Dept dept, Connection con)throws DeptException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DEPT set NAME = ? , LOC = ?  where DEPTNO = ?");
				ps.setString(1,dept.getName());
				ps.setString(2,dept.getLoc());
				ps.setLong(3,deptpk.getDeptno());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DeptException(sqle);}
		catch(Exception e){throw new DeptException(e);}
	}

/**
* This method inserts data in table DEPT
*
* @param Dept dept
* @param   Connection con
* @return  int 
*/

	public int insert(Dept dept ,Connection con)throws DeptException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DEPT( DEPTNO, NAME, LOC) values (?, ?, ?)");
				ps.setLong(1,dept.getDeptno());
				ps.setString(2,dept.getName());
				ps.setString(3,dept.getLoc());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DeptException(sqle);}
		catch(Exception e){throw new DeptException(e);}
	}

/**
* 
* Returns a row from the DEPT table for the primary key passed as parameter.
* 
*/

	public Dept findByPrimaryKey(long deptno, Connection con) throws DeptException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "select * from DEPT where DEPTNO = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, deptno);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DeptException(sqle);
	  	}
	    catch(Exception e){throw new DeptException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the DEPT table for the primary key object passed as parameter.
* 
* @param  DeptPK deptpk
* @param Connection con
* @return  Dept
*/

	public Dept findByPrimaryKey(DeptPK deptpk, Connection con) throws DeptException{
		return findByPrimaryKey(deptpk.getDeptno(), con);
	}

/**
*
* Returns all rows from DEPT table where DEPTNO= deptno
*
* @param   long  deptno
* @param   Connection con
* @return  Dept[]
*/

	public Dept[] findByDeptno(long deptno, Connection con) throws DeptException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select DEPTNO, NAME, LOC from DEPT where DEPTNO = ? order by DEPTNO";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, deptno );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DeptException(sqle);
			}
			catch(Exception e){
					throw new DeptException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from DEPT table where NAME= name
*
* @param   String  name
* @param   Connection con
* @return  Dept[]
*/

	public Dept[] findByName(String name, Connection con) throws DeptException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select DEPTNO, NAME, LOC from DEPT where NAME = ? order by NAME";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, name );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DeptException(sqle);
			}
			catch(Exception e){
					throw new DeptException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from DEPT table where LOC= loc
*
* @param   String  loc
* @param   Connection con
* @return  Dept[]
*/

	public Dept[] findByLoc(String loc, Connection con) throws DeptException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select DEPTNO, NAME, LOC from DEPT where LOC = ? order by LOC";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, loc );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DeptException(sqle);
			}
			catch(Exception e){
					throw new DeptException(e);
			}
			finally{}
	}

/**
* Returns all rows from DEPT table 
*
* @param Connection con
* @return  Dept[]
*
*/

	public Dept[] findAll( Connection con) throws DeptException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select DEPTNO, NAME, LOC from DEPT";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DeptException(sqle);
			}
			catch(Exception e){
					throw new DeptException(e);
			}
			finally{}
	}

/**
* Returns rows from DEPT table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Dept[]
*
*/

	public Dept[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DeptException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DeptException(sqle);
			}
			catch(Exception e){
					throw new DeptException(e);
			}
			finally{}
	}

/**
* Returns rows from DEPT table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Dept[]
*
*/

	public Dept[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DeptException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select DEPTNO, NAME, LOC from DEPT";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DeptException(sqle);
			}
			catch(Exception e){
					throw new DeptException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Dept
*
*/

	protected Dept fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Dept dto = new Dept();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Dept dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Dept dto, ResultSet rs) throws SQLException
	{
		 dto.setDeptno(rs.getLong( "DEPTNO"));
		 dto.setName(rs.getString( "NAME"));
		 dto.setLoc(rs.getString( "LOC"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Dept[]
*/

	protected Dept[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Dept dto = new Dept();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Dept ret[] = new Dept[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
