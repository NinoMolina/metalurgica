/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator Developed by akcess(www.akcess.in)
* Date of code generation: Fri Nov 04 00:21:41 PST 2005
*
* DAO-Generator Version 1.1
*
*/

package com.dataaccess.impl;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.util.Vector;
import java.util.Collection;
import java.util.ArrayList;
import java.sql.*;
import com.dataaccess.exception.*;
import com.dataaccess.vo.*;
import com.dataaccess.dao.*;


/**
* 
* Implementation of EmpDAO interface 
* 
*/


public class EmpDAOImpl implements EmpDAO
{


/**
* Method deletes a record from table EMP
* @param EmpPK emppk
* @param  Connection  con
* @return  int
*
*/


	public int delete(EmpPK emppk , Connection con)throws EmpException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  EMP where EMPLOYEEID = ?");
			ps.setLong(1, emppk.getEmployeeid());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new EmpException(sqle);}
		catch(Exception e) {throw new EmpException(e);}
	}



/**
* This method updates a record in table EMP
* @param EmpPK
* @param Emp
* @param  Connection con
* @return   int
*/

	public int update(EmpPK emppk, Emp emp, Connection con)throws EmpException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update EMP set NAME = ? , BIRTHDATE = ? , DEPTNO = ?  where EMPLOYEEID = ?");
				ps.setString(1,emp.getName());
				ps.setTimestamp(2,emp.getBirthdate());
				ps.setLong(3,emp.getDeptno());
				ps.setLong(4,emppk.getEmployeeid());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EmpException(sqle);}
		catch(Exception e){throw new EmpException(e);}
	}

/**
* This method inserts data in table EMP
*
* @param Emp emp
* @param   Connection con
* @return  int 
*/

	public int insert(Emp emp ,Connection con)throws EmpException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into EMP( EMPLOYEEID, NAME, BIRTHDATE, DEPTNO) values (?, ?, ?, ?)");
				ps.setLong(1,emp.getEmployeeid());
				ps.setString(2,emp.getName());
				ps.setTimestamp(3,emp.getBirthdate());
				ps.setLong(4,emp.getDeptno());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EmpException(sqle);}
		catch(Exception e){throw new EmpException(e);}
	}

/**
* 
* Returns a row from the EMP table for the primary key passed as parameter.
* 
*/

	public Emp findByPrimaryKey(long employeeid, Connection con) throws EmpException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "select * from EMP where EMPLOYEEID = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, employeeid);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new EmpException(sqle);
	  	}
	    catch(Exception e){throw new EmpException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the EMP table for the primary key object passed as parameter.
* 
* @param  EmpPK emppk
* @param Connection con
* @return  Emp
*/

	public Emp findByPrimaryKey(EmpPK emppk, Connection con) throws EmpException{
		return findByPrimaryKey(emppk.getEmployeeid(), con);
	}

/**
*
* Returns all rows from EMP table where EMPLOYEEID= employeeid
*
* @param   long  employeeid
* @param   Connection con
* @return  Emp[]
*/

	public Emp[] findByEmployeeid(long employeeid, Connection con) throws EmpException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select EMPLOYEEID, NAME, BIRTHDATE, DEPTNO from EMP where EMPLOYEEID = ? order by EMPLOYEEID";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, employeeid );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpException(sqle);
			}
			catch(Exception e){
					throw new EmpException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from EMP table where NAME= name
*
* @param   String  name
* @param   Connection con
* @return  Emp[]
*/

	public Emp[] findByName(String name, Connection con) throws EmpException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select EMPLOYEEID, NAME, BIRTHDATE, DEPTNO from EMP where NAME = ? order by NAME";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, name );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpException(sqle);
			}
			catch(Exception e){
					throw new EmpException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from EMP table where BIRTHDATE= birthdate
*
* @param   Timestamp  birthdate
* @param   Connection con
* @return  Emp[]
*/

	public Emp[] findByBirthdate(Timestamp birthdate, Connection con) throws EmpException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select EMPLOYEEID, NAME, BIRTHDATE, DEPTNO from EMP where BIRTHDATE = ? order by BIRTHDATE";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTimestamp( 1, birthdate );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpException(sqle);
			}
			catch(Exception e){
					throw new EmpException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from EMP table where DEPTNO= deptno
*
* @param   long  deptno
* @param   Connection con
* @return  Emp[]
*/

	public Emp[] findByDeptno(long deptno, Connection con) throws EmpException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select EMPLOYEEID, NAME, BIRTHDATE, DEPTNO from EMP where DEPTNO = ? order by DEPTNO";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, deptno );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpException(sqle);
			}
			catch(Exception e){
					throw new EmpException(e);
			}
			finally{}
	}

/**
* Returns all rows from EMP table 
*
* @param Connection con
* @return  Emp[]
*
*/

	public Emp[] findAll( Connection con) throws EmpException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select EMPLOYEEID, NAME, BIRTHDATE, DEPTNO from EMP";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpException(sqle);
			}
			catch(Exception e){
					throw new EmpException(e);
			}
			finally{}
	}

/**
* Returns rows from EMP table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Emp[]
*
*/

	public Emp[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws EmpException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpException(sqle);
			}
			catch(Exception e){
					throw new EmpException(e);
			}
			finally{}
	}

/**
* Returns rows from EMP table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Emp[]
*
*/

	public Emp[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws EmpException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select EMPLOYEEID, NAME, BIRTHDATE, DEPTNO from EMP";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpException(sqle);
			}
			catch(Exception e){
					throw new EmpException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Emp
*
*/

	protected Emp fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Emp dto = new Emp();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Emp dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Emp dto, ResultSet rs) throws SQLException
	{
		 dto.setEmployeeid(rs.getLong( "EMPLOYEEID"));
		 dto.setName(rs.getString( "NAME"));
		 dto.setBirthdate(rs.getTimestamp( "BIRTHDATE"));
		 dto.setDeptno(rs.getLong( "DEPTNO"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Emp[]
*/

	protected Emp[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Emp dto = new Emp();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Emp ret[] = new Emp[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
