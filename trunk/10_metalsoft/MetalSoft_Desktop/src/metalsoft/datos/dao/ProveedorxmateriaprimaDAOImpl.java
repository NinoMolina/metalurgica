/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:04 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of ProveedorxmateriaprimaDAO interface 
* 
*/


public class ProveedorxmateriaprimaDAOImpl implements ProveedorxmateriaprimaDAO
{


/**
* Method deletes a record from table PROVEEDORXMATERIAPRIMA
* @param ProveedorxmateriaprimaPK proveedorxmateriaprimapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(ProveedorxmateriaprimaPKDB proveedorxmateriaprimapk , Connection con)throws ProveedorxmateriaprimaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PROVEEDORXMATERIAPRIMA where idproveedor = ? AND idmateriaprima = ?");
			ps.setLong(1, proveedorxmateriaprimapk.getIdproveedor());
			ps.setLong(2, proveedorxmateriaprimapk.getIdmateriaprima());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new ProveedorxmateriaprimaException(sqle);}
		catch(Exception e) {throw new ProveedorxmateriaprimaException(e);}
	}



/**
* This method updates a record in table PROVEEDORXMATERIAPRIMA
* @param ProveedorxmateriaprimaPK
* @param Proveedorxmateriaprima
* @param  Connection con
* @return   int
*/

	public int update(ProveedorxmateriaprimaPKDB proveedorxmateriaprimapk, ProveedorxmateriaprimaDB proveedorxmateriaprima, Connection con)throws ProveedorxmateriaprimaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PROVEEDORXMATERIAPRIMA set PRECIO = ?  where idproveedor = ? AND idmateriaprima = ?");
				ps.setDouble(1,proveedorxmateriaprima.getPrecio());
				ps.setLong(2,proveedorxmateriaprimapk.getIdproveedor());
				ps.setLong(3,proveedorxmateriaprimapk.getIdmateriaprima());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ProveedorxmateriaprimaException(sqle);}
		catch(Exception e){throw new ProveedorxmateriaprimaException(e);}
	}

/**
* This method inserts data in table PROVEEDORXMATERIAPRIMA
*
* @param Proveedorxmateriaprima proveedorxmateriaprima
* @param   Connection con
* @return  ProveedorxmateriaprimaPK
*/

	public int insert(ProveedorxmateriaprimaDB proveedorxmateriaprima ,Connection con)throws ProveedorxmateriaprimaException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PROVEEDORXMATERIAPRIMA( IDPROVEEDOR, IDMATERIAPRIMA, PRECIO) values (?, ?, ?)");
				ps.setLong(1,proveedorxmateriaprima.getIdproveedor());
				ps.setLong(2,proveedorxmateriaprima.getIdmateriaprima());
				ps.setDouble(3,proveedorxmateriaprima.getPrecio());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ProveedorxmateriaprimaException(sqle);}
		catch(Exception e){throw new ProveedorxmateriaprimaException(e);}
	}

/**
* 
* Returns a row from the Proveedorxmateriaprima table for the primary key passed as parameter.
* 
*/

	public ProveedorxmateriaprimaDB findByPrimaryKey(long idproveedor, long idmateriaprima, Connection con) throws ProveedorxmateriaprimaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idproveedor, idmateriaprima, precio from proveedorxmateriaprima where idproveedor = ? AND idmateriaprima = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idproveedor);
	  		stmt.setLong(2, idmateriaprima);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new ProveedorxmateriaprimaException(sqle);
	  	}
	    catch(Exception e){throw new ProveedorxmateriaprimaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the Proveedorxmateriaprima table for the primary key object passed as parameter.
* 
* @param  ProveedorxmateriaprimaPK proveedorxmateriaprimapk
* @param Connection con
* @return  Proveedorxmateriaprima
*/

	public ProveedorxmateriaprimaDB findByPrimaryKey(ProveedorxmateriaprimaPKDB proveedorxmateriaprimapk, Connection con) throws ProveedorxmateriaprimaException{
		return findByPrimaryKey(proveedorxmateriaprimapk.getIdproveedor(), proveedorxmateriaprimapk.getIdmateriaprima(), con);
	}

/**
*
* Returns all rows from proveedorxmateriaprima table where IDPROVEEDOR= idproveedor
*
* @param   long  idproveedor
* @param   Connection con
* @return  Proveedorxmateriaprima[]
*/

	public ProveedorxmateriaprimaDB[] findByIdproveedor(long idproveedor, Connection con) throws ProveedorxmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproveedor, idmateriaprima, precio from proveedorxmateriaprima where idproveedor = ? order by idproveedor";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idproveedor );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProveedorxmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new ProveedorxmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from proveedorxmateriaprima table where IDMATERIAPRIMA= idmateriaprima
*
* @param   long  idmateriaprima
* @param   Connection con
* @return  Proveedorxmateriaprima[]
*/

	public ProveedorxmateriaprimaDB[] findByIdmateriaprima(long idmateriaprima, Connection con) throws ProveedorxmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproveedor, idmateriaprima, precio from proveedorxmateriaprima where idmateriaprima = ? order by idmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProveedorxmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new ProveedorxmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from proveedorxmateriaprima table where PRECIO= precio
*
* @param   double  precio
* @param   Connection con
* @return  Proveedorxmateriaprima[]
*/

	public ProveedorxmateriaprimaDB[] findByPrecio(double precio, Connection con) throws ProveedorxmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproveedor, idmateriaprima, precio from proveedorxmateriaprima where precio = ? order by precio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDouble( 1, precio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProveedorxmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new ProveedorxmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns all rows from Proveedorxmateriaprima table 
*
* @param Connection con
* @return  Proveedorxmateriaprima[]
*
*/

	public ProveedorxmateriaprimaDB[] findAll( Connection con) throws ProveedorxmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproveedor, idmateriaprima, precio from proveedorxmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProveedorxmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new ProveedorxmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from Proveedorxmateriaprima table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Proveedorxmateriaprima[]
*
*/

	public ProveedorxmateriaprimaDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws ProveedorxmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProveedorxmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new ProveedorxmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from Proveedorxmateriaprima table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Proveedorxmateriaprima[]
*
*/

	public ProveedorxmateriaprimaDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws ProveedorxmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idproveedor, idmateriaprima, precio from proveedorxmateriaprima";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProveedorxmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new ProveedorxmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Proveedorxmateriaprima
*
*/

	protected ProveedorxmateriaprimaDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					ProveedorxmateriaprimaDB dto = new ProveedorxmateriaprimaDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Proveedorxmateriaprima dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(ProveedorxmateriaprimaDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdproveedor(rs.getLong("idproveedor"));
		 dto.setIdmateriaprima(rs.getLong("idmateriaprima"));
		 dto.setPrecio(rs.getDouble("precio"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Proveedorxmateriaprima[]
*/

	protected ProveedorxmateriaprimaDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ProveedorxmateriaprimaDB dto = new ProveedorxmateriaprimaDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		ProveedorxmateriaprimaDB ret[] = new ProveedorxmateriaprimaDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
