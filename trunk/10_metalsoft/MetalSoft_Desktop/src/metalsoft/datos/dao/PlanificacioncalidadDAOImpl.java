/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PlanificacioncalidadDAO interface 
* 
*/


public class PlanificacioncalidadDAOImpl implements PlanificacioncalidadDAO
{


/**
* Method deletes a record from table PLANIFICACIONCALIDAD
* @param PlanificacioncalidadPK planificacioncalidadpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PlanificacioncalidadPKDB planificacioncalidadpk , Connection con)throws PlanificacioncalidadException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PLANIFICACIONCALIDAD where idplanificacion = ?");
			ps.setLong(1, planificacioncalidadpk.getIdplanificacion());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PlanificacioncalidadException(sqle);}
		catch(Exception e) {throw new PlanificacioncalidadException(e);}
	}



/**
* This method updates a record in table PLANIFICACIONCALIDAD
* @param PlanificacioncalidadPK
* @param Planificacioncalidad
* @param  Connection con
* @return   int
*/

	public int update(PlanificacioncalidadPKDB planificacioncalidadpk, PlanificacioncalidadDB planificacioncalidad, Connection con)throws PlanificacioncalidadException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PLANIFICACIONCALIDAD set NROPLANIFICACION = ? , FECHACREACION = ? , OBSERVACIONES = ? , FECHAINICIOPREVISTA = ? , FECHAFINPREVISTA = ? , PEDIDO = ?  where idplanificacion = ?");
				ps.setLong(1,planificacioncalidad.getNroplanificacion());
				ps.setDate(2,planificacioncalidad.getFechacreacion());
				ps.setString(3,planificacioncalidad.getObservaciones());
				ps.setDate(4,planificacioncalidad.getFechainicioprevista());
				ps.setDate(5,planificacioncalidad.getFechafinprevista());
				ps.setLong(6,planificacioncalidad.getPedido());
				ps.setLong(7,planificacioncalidadpk.getIdplanificacion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PlanificacioncalidadException(sqle);}
		catch(Exception e){throw new PlanificacioncalidadException(e);}
	}

/**
* This method inserts data in table PLANIFICACIONCALIDAD
*
* @param Planificacioncalidad planificacioncalidad
* @param   Connection con
* @return  PlanificacioncalidadPK
*/

	public int insert(PlanificacioncalidadDB planificacioncalidad ,Connection con)throws PlanificacioncalidadException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PLANIFICACIONCALIDAD( NROPLANIFICACION, FECHACREACION, OBSERVACIONES, FECHAINICIOPREVISTA, FECHAFINPREVISTA, PEDIDO) values (?, ?, ?, ?, ?, ?)");
				ps.setLong(1,planificacioncalidad.getNroplanificacion());
				ps.setDate(2,planificacioncalidad.getFechacreacion());
				ps.setString(3,planificacioncalidad.getObservaciones());
				ps.setDate(4,planificacioncalidad.getFechainicioprevista());
				ps.setDate(5,planificacioncalidad.getFechafinprevista());
				ps.setLong(6,planificacioncalidad.getPedido());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PlanificacioncalidadException(sqle);}
		catch(Exception e){throw new PlanificacioncalidadException(e);}
	}

/**
* 
* Returns a row from the planificacioncalidad table for the primary key passed as parameter.
* 
*/

	public PlanificacioncalidadDB findByPrimaryKey(long idplanificacion, Connection con) throws PlanificacioncalidadException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where idplanificacion = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idplanificacion);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PlanificacioncalidadException(sqle);
	  	}
	    catch(Exception e){throw new PlanificacioncalidadException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the planificacioncalidad table for the primary key object passed as parameter.
* 
* @param  PlanificacioncalidadPK planificacioncalidadpk
* @param Connection con
* @return  Planificacioncalidad
*/

	public PlanificacioncalidadDB findByPrimaryKey(PlanificacioncalidadPKDB planificacioncalidadpk, Connection con) throws PlanificacioncalidadException{
		return findByPrimaryKey(planificacioncalidadpk.getIdplanificacion(), con);
	}

/**
*
* Returns all rows from planificacioncalidad table where IDPLANIFICACION= idplanificacion
*
* @param   long  idplanificacion
* @param   Connection con
* @return  Planificacioncalidad[]
*/

	public PlanificacioncalidadDB[] findByIdplanificacion(long idplanificacion, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where idplanificacion = ? order by idplanificacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanificacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from planificacioncalidad table where NROPLANIFICACION= nroplanificacion
*
* @param   long  nroplanificacion
* @param   Connection con
* @return  Planificacioncalidad[]
*/

	public PlanificacioncalidadDB[] findByNroplanificacion(long nroplanificacion, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where nroplanificacion = ? order by nroplanificacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroplanificacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from planificacioncalidad table where FECHACREACION= fechacreacion
*
* @param   Date  fechacreacion
* @param   Connection con
* @return  Planificacioncalidad[]
*/

	public PlanificacioncalidadDB[] findByFechacreacion(Date fechacreacion, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where fechacreacion = ? order by fechacreacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechacreacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from planificacioncalidad table where OBSERVACIONES= observaciones
*
* @param   String  observaciones
* @param   Connection con
* @return  Planificacioncalidad[]
*/

	public PlanificacioncalidadDB[] findByObservaciones(String observaciones, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where observaciones = ? order by observaciones";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, observaciones );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from planificacioncalidad table where FECHAINICIOPREVISTA= fechainicioprevista
*
* @param   Date  fechainicioprevista
* @param   Connection con
* @return  Planificacioncalidad[]
*/

	public PlanificacioncalidadDB[] findByFechainicioprevista(Date fechainicioprevista, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where fechainicioprevista = ? order by fechainicioprevista";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicioprevista );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from planificacioncalidad table where FECHAFINPREVISTA= fechafinprevista
*
* @param   Date  fechafinprevista
* @param   Connection con
* @return  Planificacioncalidad[]
*/

	public PlanificacioncalidadDB[] findByFechafinprevista(Date fechafinprevista, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where fechafinprevista = ? order by fechafinprevista";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafinprevista );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from planificacioncalidad table where PEDIDO= pedido
*
* @param   long  pedido
* @param   Connection con
* @return  Planificacioncalidad[]
*/

	public PlanificacioncalidadDB[] findByPedido(long pedido, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad where pedido = ? order by pedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, pedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
* Returns all rows from planificacioncalidad table 
*
* @param Connection con
* @return  Planificacioncalidad[]
*
*/

	public PlanificacioncalidadDB[] findAll( Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from planificacioncalidad table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Planificacioncalidad[]
*
*/

	public PlanificacioncalidadDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from planificacioncalidad table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Planificacioncalidad[]
*
*/

	public PlanificacioncalidadDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PlanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idplanificacion, nroplanificacion, fechacreacion, observaciones, fechainicioprevista, fechafinprevista, pedido from planificacioncalidad";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Planificacioncalidad
*
*/

	protected PlanificacioncalidadDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					PlanificacioncalidadDB dto = new PlanificacioncalidadDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Planificacioncalidad dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(PlanificacioncalidadDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdplanificacion(rs.getLong("idplanificacion"));
		 dto.setNroplanificacion(rs.getLong("nroplanificacion"));
		 dto.setFechacreacion(rs.getDate("fechacreacion"));
		 dto.setObservaciones(rs.getString("observaciones"));
		 dto.setFechainicioprevista(rs.getDate("fechainicioprevista"));
		 dto.setFechafinprevista(rs.getDate("fechafinprevista"));
		 dto.setPedido(rs.getLong("pedido"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Planificacioncalidad[]
*/

	protected PlanificacioncalidadDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PlanificacioncalidadDB dto = new PlanificacioncalidadDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		PlanificacioncalidadDB ret[] = new PlanificacioncalidadDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
