/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Sep 06 16:24:06 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallepiezacalidadpresupuestoDAO interface 
* 
*/


public class DetallepiezacalidadpresupuestoDAOImpl implements DetallepiezacalidadpresupuestoDAO
{


/**
* Method deletes a record from table DETALLEPIEZACALIDADPRESUPUESTO
* @param DetallepiezacalidadpresupuestoPK detallepiezacalidadpresupuestopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallepiezacalidadpresupuestoPKDB detallepiezacalidadpresupuestopk , Connection con)throws DetallepiezacalidadpresupuestoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEPIEZACALIDADPRESUPUESTO where iddetalle = ?");
			ps.setLong(1, detallepiezacalidadpresupuestopk.getIddetalle());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallepiezacalidadpresupuestoException(sqle);}
		catch(Exception e) {throw new DetallepiezacalidadpresupuestoException(e);}
	}



/**
* This method updates a record in table DETALLEPIEZACALIDADPRESUPUESTO
* @param DetallepiezacalidadpresupuestoPK
* @param Detallepiezacalidadpresupuesto
* @param  Connection con
* @return   int
*/

	public int update(DetallepiezacalidadpresupuestoPKDB detallepiezacalidadpresupuestopk, DetallepiezacalidadpresupuestoDB detallepiezacalidadpresupuesto, Connection con)throws DetallepiezacalidadpresupuestoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEPIEZACALIDADPRESUPUESTO set CANTPROCESOCALIDAD = ? , DURACIONXPIEZA = ? , IDPROCESOCALIDAD = ? , IDDETALLEPRODUCTOPRESUPUESTO = ?  where iddetalle = ?");
				ps.setInt(1,detallepiezacalidadpresupuesto.getCantprocesocalidad());
				ps.setTime(2,detallepiezacalidadpresupuesto.getDuracionxpieza());
				ps.setLong(3,detallepiezacalidadpresupuesto.getIdprocesocalidad());
				ps.setLong(4,detallepiezacalidadpresupuesto.getIddetalleproductopresupuesto());
				ps.setLong(5,detallepiezacalidadpresupuestopk.getIddetalle());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallepiezacalidadpresupuestoException(sqle);}
		catch(Exception e){throw new DetallepiezacalidadpresupuestoException(e);}
	}

/**
* This method inserts data in table DETALLEPIEZACALIDADPRESUPUESTO
*
* @param Detallepiezacalidadpresupuesto detallepiezacalidadpresupuesto
* @param   Connection con
* @return  DetallepiezacalidadpresupuestoPK
*/

	public int insert(DetallepiezacalidadpresupuestoDB detallepiezacalidadpresupuesto ,Connection con)throws DetallepiezacalidadpresupuestoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEPIEZACALIDADPRESUPUESTO( CANTPROCESOCALIDAD, DURACIONXPIEZA, IDPROCESOCALIDAD, IDDETALLEPRODUCTOPRESUPUESTO) values (?, ?, ?, ?)");
				ps.setInt(1,detallepiezacalidadpresupuesto.getCantprocesocalidad());
				ps.setTime(2,detallepiezacalidadpresupuesto.getDuracionxpieza());
				ps.setLong(3,detallepiezacalidadpresupuesto.getIdprocesocalidad());
				ps.setLong(4,detallepiezacalidadpresupuesto.getIddetalleproductopresupuesto());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallepiezacalidadpresupuestoException(sqle);}
		catch(Exception e){throw new DetallepiezacalidadpresupuestoException(e);}
	}

/**
* 
* Returns a row from the detallepiezacalidadpresupuesto table for the primary key passed as parameter.
* 
*/

	public DetallepiezacalidadpresupuestoDB findByPrimaryKey(long iddetalle, Connection con) throws DetallepiezacalidadpresupuestoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto where iddetalle = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallepiezacalidadpresupuestoException(sqle);
	  	}
	    catch(Exception e){throw new DetallepiezacalidadpresupuestoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallepiezacalidadpresupuesto table for the primary key object passed as parameter.
* 
* @param  DetallepiezacalidadpresupuestoPK detallepiezacalidadpresupuestopk
* @param Connection con
* @return  Detallepiezacalidadpresupuesto
*/

	public DetallepiezacalidadpresupuestoDB findByPrimaryKey(DetallepiezacalidadpresupuestoPKDB detallepiezacalidadpresupuestopk, Connection con) throws DetallepiezacalidadpresupuestoException{
		return findByPrimaryKey(detallepiezacalidadpresupuestopk.getIddetalle(), con);
	}

/**
*
* Returns all rows from detallepiezacalidadpresupuesto table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallepiezacalidadpresupuesto[]
*/

	public DetallepiezacalidadpresupuestoDB[] findByIddetalle(long iddetalle, Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepiezacalidadpresupuesto table where CANTPROCESOCALIDAD= cantprocesocalidad
*
* @param   int  cantprocesocalidad
* @param   Connection con
* @return  Detallepiezacalidadpresupuesto[]
*/

	public DetallepiezacalidadpresupuestoDB[] findByCantprocesocalidad(int cantprocesocalidad, Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto where cantprocesocalidad = ? order by cantprocesocalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantprocesocalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepiezacalidadpresupuesto table where DURACIONXPIEZA= duracionxpieza
*
* @param   Time  duracionxpieza
* @param   Connection con
* @return  Detallepiezacalidadpresupuesto[]
*/

	public DetallepiezacalidadpresupuestoDB[] findByDuracionxpieza(Time duracionxpieza, Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto where duracionxpieza = ? order by duracionxpieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracionxpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepiezacalidadpresupuesto table where IDPROCESOCALIDAD= idprocesocalidad
*
* @param   long  idprocesocalidad
* @param   Connection con
* @return  Detallepiezacalidadpresupuesto[]
*/

	public DetallepiezacalidadpresupuestoDB[] findByIdprocesocalidad(long idprocesocalidad, Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto where idprocesocalidad = ? order by idprocesocalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idprocesocalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepiezacalidadpresupuesto table where IDDETALLEPRODUCTOPRESUPUESTO= iddetalleproductopresupuesto
*
* @param   long  iddetalleproductopresupuesto
* @param   Connection con
* @return  Detallepiezacalidadpresupuesto[]
*/

	public DetallepiezacalidadpresupuestoDB[] findByIddetalleproductopresupuesto(long iddetalleproductopresupuesto, Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto where iddetalleproductopresupuesto = ? order by iddetalleproductopresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalleproductopresupuesto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallepiezacalidadpresupuesto table 
*
* @param Connection con
* @return  Detallepiezacalidadpresupuesto[]
*
*/

	public DetallepiezacalidadpresupuestoDB[] findAll( Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallepiezacalidadpresupuesto table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallepiezacalidadpresupuesto[]
*
*/

	public DetallepiezacalidadpresupuestoDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallepiezacalidadpresupuesto table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallepiezacalidadpresupuesto[]
*
*/

	public DetallepiezacalidadpresupuestoDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallepiezacalidadpresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, cantprocesocalidad, duracionxpieza, idprocesocalidad, iddetalleproductopresupuesto from detallepiezacalidadpresupuesto";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezacalidadpresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezacalidadpresupuestoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallepiezacalidadpresupuesto
*
*/

	protected DetallepiezacalidadpresupuestoDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					DetallepiezacalidadpresupuestoDB dto = new DetallepiezacalidadpresupuestoDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallepiezacalidadpresupuesto dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(DetallepiezacalidadpresupuestoDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setCantprocesocalidad(rs.getInt("cantprocesocalidad"));
		 dto.setDuracionxpieza(rs.getTime("duracionxpieza"));
		 dto.setIdprocesocalidad(rs.getLong("idprocesocalidad"));
		 dto.setIddetalleproductopresupuesto(rs.getLong("iddetalleproductopresupuesto"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallepiezacalidadpresupuesto[]
*/

	protected DetallepiezacalidadpresupuestoDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DetallepiezacalidadpresupuestoDB dto = new DetallepiezacalidadpresupuestoDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		DetallepiezacalidadpresupuestoDB ret[] = new DetallepiezacalidadpresupuestoDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
