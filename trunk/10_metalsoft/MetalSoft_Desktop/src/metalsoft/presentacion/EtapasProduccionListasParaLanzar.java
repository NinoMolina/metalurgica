/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EtapasProduccionListasParaLanzar.java
 *
 * Created on 10/10/2011, 19:41:36
 */
package metalsoft.presentacion;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import metalsoft.datos.jpa.entity.Detalleplanificacionproduccion;
import metalsoft.negocio.gestores.GestorLanzarProximaEtapa;
import metalsoft.negocio.gestores.NumerosAMostrar;
import metalsoft.util.Fecha;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.HighlighterFactory.UIColorHighlighter;

/**
 *
 * @author Nino
 */
public class EtapasProduccionListasParaLanzar extends javax.swing.JDialog {

    /** Creates new form EtapasProduccionListasParaLanzar */
    private List<Detalleplanificacionproduccion> filasEtapas;
    private static Principal vtnPrincipal;
    private JButton btnSalir;
    private GestorLanzarProximaEtapa gestor;

    public EtapasProduccionListasParaLanzar() {
        super(Principal.getVtnPrincipal());
        gestor = new GestorLanzarProximaEtapa();
        initComponents();
        addListeners();
        setearTablas();
    }

    public static void setVtnPrincipal(Principal vtnPrincipal) {
        EtapasProduccionListasParaLanzar.vtnPrincipal = vtnPrincipal;
    }

    private void addListeners() {
        addListenerBtnSalir();
    }

    private void setearTablas() {
        tblEtapasDeProduccion.setModel(new EtapaProduccionALanzarTableModel());
        tblEtapasDeProduccion.setColumnControlVisible(true);
        /* On supprime les traits des lignes et des colonnes */
        tblEtapasDeProduccion.setShowHorizontalLines(false);
        tblEtapasDeProduccion.setShowVerticalLines(false);
        tblEtapasDeProduccion.setHorizontalScrollEnabled(true);
        /* On dit de surligner une ligne sur deux */
        tblEtapasDeProduccion.setHighlighters(
                new UIColorHighlighter(HighlightPredicate.ODD));
    }

    private void addListenerBtnSalir() {
        btnSalir = btnSalirr1.getBtnSalir();
        btnSalir.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnSalirActionPerformed(e);
            }
        });
    }

    private void btnSalirActionPerformed(ActionEvent e) {
        this.dispose();
    }

    public void setEtapasALanzar(Map<Long, Detalleplanificacionproduccion> mapEtapasALanzar) {
        Collection<Detalleplanificacionproduccion> collection = mapEtapasALanzar.values();
        Iterator<Detalleplanificacionproduccion> it = collection.iterator();
        Detalleplanificacionproduccion detalleplanificacionproduccion = null;
        filasEtapas = new ArrayList<Detalleplanificacionproduccion>();
        while (it.hasNext()) {
            detalleplanificacionproduccion = it.next();
            filasEtapas.add(detalleplanificacionproduccion);
        }
        tblEtapasDeProduccion.updateUI();
        tblEtapasDeProduccion.packAll();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEtapasDeProduccion = new org.jdesktop.swingx.JXTable();
        btnSalirr1 = new metalsoft.beans.BtnSalirr();
        btnLanzarEtapaDeProduccion = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel(){

            @Override
            public void paint(Graphics g) {
                try {
                    g.drawImage(ImageIO.read(getClass().getResource("/img/fondopantallas2.png")), 0, 0, getWidth(), getHeight(), this);
                } catch (Exception e) {
                }
                super.paint(g);
            }
        }
        ;

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Etapas de Producción Listas para Ejecutar");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Etapas de Producción Listas para Ejecutar"));

        jScrollPane1.setViewportView(tblEtapasDeProduccion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnLanzarEtapaDeProduccion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save1.png"))); // NOI18N
        btnLanzarEtapaDeProduccion.setText("Ejecutar Etapa de Producción");
        btnLanzarEtapaDeProduccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLanzarEtapaDeProduccionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 985, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLanzarEtapaDeProduccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 705, Short.MAX_VALUE)
                        .addComponent(btnSalirr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLanzarEtapaDeProduccion)
                    .addComponent(btnSalirr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnLanzarEtapaDeProduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLanzarEtapaDeProduccionActionPerformed

    if (tblEtapasDeProduccion.getSelectedRow() < 0) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una etapa de producción a lanzar");
        return;
    }

    Detalleplanificacionproduccion detalleplanificacionproduccion = filasEtapas.get(tblEtapasDeProduccion.convertRowIndexToModel(tblEtapasDeProduccion.getSelectedRow()));
    try {
        gestor.lanzarEjecucionEtapa(detalleplanificacionproduccion.getIddetalleejecucionplanificacion());
        filasEtapas.remove(tblEtapasDeProduccion.convertRowIndexToModel(tblEtapasDeProduccion.getSelectedRow()));
        tblEtapasDeProduccion.updateUI();
        tblEtapasDeProduccion.packAll();
        /*
         * quitar de las etapas a lanzar del boton de la ventana principal
         */

        vtnPrincipal.eliminarEtapaALanzar(detalleplanificacionproduccion.getId());
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "No se pudo lanzar la etapa de producción!");
        ex.printStackTrace();
    }

}//GEN-LAST:event_btnLanzarEtapaDeProduccionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EtapasProduccionListasParaLanzar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EtapasProduccionListasParaLanzar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EtapasProduccionListasParaLanzar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EtapasProduccionListasParaLanzar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EtapasProduccionListasParaLanzar().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLanzarEtapaDeProduccion;
    private metalsoft.beans.BtnSalirr btnSalirr1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable tblEtapasDeProduccion;
    // End of variables declaration//GEN-END:variables

    class EtapaProduccionALanzarTableModel extends AbstractTableModel {
//pedido- cliente-producto-pieza- etapa

        String[] columnNames = {"Nro",
            "Pedido",
            "Cliente",
            "Producto",
            "Pieza",
            "Etapa",
            "Inicio Planif.",
            "Fin Planif.",
            "Empleado",
            "Máquina"};

        public Object getValueAt(int rowIndex, int columnIndex) {

            try {
                Detalleplanificacionproduccion detalleplanificacionproduccion = filasEtapas.get(rowIndex);

                switch (columnIndex) {
                    case 0:
                        return NumerosAMostrar.getNumeroString(NumerosAMostrar.NRO_EJECUCION_ETAPA, detalleplanificacionproduccion.getIddetalleejecucionplanificacion().getEjecucionetapa().getNroejecucion());
                    case 1:
                        return NumerosAMostrar.getNumeroString(NumerosAMostrar.NRO_PEDIDO, detalleplanificacionproduccion.getIdplanificacionproduccion().getPedido().getNropedido());
                    case 2:
                        return detalleplanificacionproduccion.getIdplanificacionproduccion().getPedido().getCliente().getRazonsocial();
                    case 3:
                        return detalleplanificacionproduccion.getIdproducto().getNombre();
                    case 4:
                        return detalleplanificacionproduccion.getIddetalleejecucionplanificacion().getPieza().getNombre();
                    case 5:
                        return detalleplanificacionproduccion.getIddetalleejecucionplanificacion().getIdetapaproduccion().getNombre();
                    case 6:
                        Date fechaInicioPlanif = detalleplanificacionproduccion.getFechainicio();
                        Date horaInicioPlanif = detalleplanificacionproduccion.getHorainicio();
                        fechaInicioPlanif.setHours(horaInicioPlanif.getHours());
                        fechaInicioPlanif.setMinutes(horaInicioPlanif.getMinutes());
                        fechaInicioPlanif.setSeconds(horaInicioPlanif.getSeconds());

                        return Fecha.parseToStringFechaHora(fechaInicioPlanif);
                    case 7:
                        Date fechaFinPlanif = detalleplanificacionproduccion.getFechafin();
                        Date horaFinPlanif = detalleplanificacionproduccion.getHorafin();
                        fechaFinPlanif.setHours(horaFinPlanif.getHours());
                        fechaFinPlanif.setMinutes(horaFinPlanif.getMinutes());
                        fechaFinPlanif.setSeconds(horaFinPlanif.getSeconds());

                        return Fecha.parseToStringFechaHora(fechaFinPlanif);
                    case 8:
                        return detalleplanificacionproduccion.getIddetalleejecucionplanificacion().getEjecucionetapa().getEmpleado().getNombre() + " " + detalleplanificacionproduccion.getIddetalleejecucionplanificacion().getEjecucionetapa().getEmpleado().getApellido();
                    case 9:
                        if (detalleplanificacionproduccion.getIddetalleejecucionplanificacion().getEjecucionetapa().getMaquina() == null) {
                            return "";
                        } else {
                            return detalleplanificacionproduccion.getIddetalleejecucionplanificacion().getEjecucionetapa().getMaquina().getNombre();
                        }
                    default:
                        return null;
                }
            } catch (Exception ex) {
                return null;
            }
        }

        /**
         * Retorna la cantidad de columnas que tiene la tabla
         * @return Numero de filas que contendra la tabla
         */
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (filasEtapas != null) {
                return filasEtapas.size();
            }
            return 0;
        }

        /**
         * Devuelve el nombre de las columnas para mostrar en el encabezado
         * @param column Numero de la columna cuyo nombre se quiere
         * @return Nombre de la columna
         */
        @Override
        public String getColumnName(int column) {
            return columnNames[column];

        }
    }
}
