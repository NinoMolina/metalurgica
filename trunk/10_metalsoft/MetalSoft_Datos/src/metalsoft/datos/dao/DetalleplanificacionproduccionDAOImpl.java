/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Oct 17 01:56:14 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetalleplanificacionproduccionDAO interface 
* 
*/


public class DetalleplanificacionproduccionDAOImpl implements DetalleplanificacionproduccionDAO
{


/**
* Method deletes a record from table DETALLEPLANIFICACIONPRODUCCION
* @param DetalleplanificacionproduccionPK detalleplanificacionproduccionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetalleplanificacionproduccionPK detalleplanificacionproduccionpk , Connection con)throws DetalleplanificacionproduccionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEPLANIFICACIONPRODUCCION where id = ? AND idplanificacionproduccion = ?");
			ps.setLong(1, detalleplanificacionproduccionpk.getId());
			ps.setLong(2, detalleplanificacionproduccionpk.getIdplanificacionproduccion());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetalleplanificacionproduccionException(sqle);}
		catch(Exception e) {throw new DetalleplanificacionproduccionException(e);}
	}



/**
* This method updates a record in table DETALLEPLANIFICACIONPRODUCCION
* @param DetalleplanificacionproduccionPK
* @param Detalleplanificacionproduccion
* @param  Connection con
* @return   int
*/

	public int update(DetalleplanificacionproduccionPK detalleplanificacionproduccionpk, Detalleplanificacionproduccion detalleplanificacionproduccion, Connection con)throws DetalleplanificacionproduccionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEPLANIFICACIONPRODUCCION set IDDETALLEEJECUCIONPLANIFICACION = ? , IDETAPAPRODUCCION = ? , IDPIEZA = ? , IDEMPLEADO = ? , FECHAINICIO = ? , HORAINICIO = ? , FECHAFIN = ? , HORAFIN = ? , IDMAQUINA = ?  where id = ? AND idplanificacionproduccion = ?");
				ps.setLong(1,detalleplanificacionproduccion.getIddetalleejecucionplanificacion());
				ps.setLong(2,detalleplanificacionproduccion.getIdetapaproduccion());
				ps.setLong(3,detalleplanificacionproduccion.getIdpieza());
				ps.setLong(4,detalleplanificacionproduccion.getIdempleado());
				ps.setDate(5,detalleplanificacionproduccion.getFechainicio());
				ps.setTime(6,detalleplanificacionproduccion.getHorainicio());
				ps.setDate(7,detalleplanificacionproduccion.getFechafin());
				ps.setTime(8,detalleplanificacionproduccion.getHorafin());
				ps.setLong(9,detalleplanificacionproduccion.getIdmaquina());
				ps.setLong(10,detalleplanificacionproduccionpk.getId());
				ps.setLong(11,detalleplanificacionproduccionpk.getIdplanificacionproduccion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleplanificacionproduccionException(sqle);}
		catch(Exception e){throw new DetalleplanificacionproduccionException(e);}
	}

/**
* This method inserts data in table DETALLEPLANIFICACIONPRODUCCION
*
* @param Detalleplanificacionproduccion detalleplanificacionproduccion
* @param   Connection con
* @return  DetalleplanificacionproduccionPK
*/

	public int insert(Detalleplanificacionproduccion detalleplanificacionproduccion ,Connection con)throws DetalleplanificacionproduccionException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEPLANIFICACIONPRODUCCION( IDPLANIFICACIONPRODUCCION, IDDETALLEEJECUCIONPLANIFICACION, IDETAPAPRODUCCION, IDPIEZA, IDEMPLEADO, FECHAINICIO, HORAINICIO, FECHAFIN, HORAFIN, IDMAQUINA) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,detalleplanificacionproduccion.getIdplanificacionproduccion());
				ps.setLong(2,detalleplanificacionproduccion.getIddetalleejecucionplanificacion());
				ps.setLong(3,detalleplanificacionproduccion.getIdetapaproduccion());
				ps.setLong(4,detalleplanificacionproduccion.getIdpieza());
				ps.setLong(5,detalleplanificacionproduccion.getIdempleado());
				ps.setDate(6,detalleplanificacionproduccion.getFechainicio());
				ps.setTime(7,detalleplanificacionproduccion.getHorainicio());
				ps.setDate(8,detalleplanificacionproduccion.getFechafin());
				ps.setTime(9,detalleplanificacionproduccion.getHorafin());
				ps.setLong(10,detalleplanificacionproduccion.getIdmaquina());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleplanificacionproduccionException(sqle);}
		catch(Exception e){throw new DetalleplanificacionproduccionException(e);}
	}

/**
* 
* Returns a row from the detalleplanificacionproduccion table for the primary key passed as parameter.
* 
*/

	public Detalleplanificacionproduccion findByPrimaryKey(long id, long idplanificacionproduccion, Connection con) throws DetalleplanificacionproduccionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where id = ? AND idplanificacionproduccion = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, id);
	  		stmt.setLong(2, idplanificacionproduccion);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetalleplanificacionproduccionException(sqle);
	  	}
	    catch(Exception e){throw new DetalleplanificacionproduccionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detalleplanificacionproduccion table for the primary key object passed as parameter.
* 
* @param  DetalleplanificacionproduccionPK detalleplanificacionproduccionpk
* @param Connection con
* @return  Detalleplanificacionproduccion
*/

	public Detalleplanificacionproduccion findByPrimaryKey(DetalleplanificacionproduccionPK detalleplanificacionproduccionpk, Connection con) throws DetalleplanificacionproduccionException{
		return findByPrimaryKey(detalleplanificacionproduccionpk.getId(), detalleplanificacionproduccionpk.getIdplanificacionproduccion(), con);
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where ID= id
*
* @param   long  id
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findById(long id, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where id = ? order by id";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, id );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where IDPLANIFICACIONPRODUCCION= idplanificacionproduccion
*
* @param   long  idplanificacionproduccion
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByIdplanificacionproduccion(long idplanificacionproduccion, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where idplanificacionproduccion = ? order by idplanificacionproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanificacionproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where IDDETALLEEJECUCIONPLANIFICACION= iddetalleejecucionplanificacion
*
* @param   long  iddetalleejecucionplanificacion
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByIddetalleejecucionplanificacion(long iddetalleejecucionplanificacion, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where iddetalleejecucionplanificacion = ? order by iddetalleejecucionplanificacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalleejecucionplanificacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where IDETAPAPRODUCCION= idetapaproduccion
*
* @param   long  idetapaproduccion
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByIdetapaproduccion(long idetapaproduccion, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where idetapaproduccion = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where IDPIEZA= idpieza
*
* @param   long  idpieza
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByIdpieza(long idpieza, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where idpieza = ? order by idpieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where IDEMPLEADO= idempleado
*
* @param   long  idempleado
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByIdempleado(long idempleado, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where idempleado = ? order by idempleado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idempleado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where FECHAINICIO= fechainicio
*
* @param   Date  fechainicio
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByFechainicio(Date fechainicio, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where fechainicio = ? order by fechainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where HORAINICIO= horainicio
*
* @param   Time  horainicio
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByHorainicio(Time horainicio, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where horainicio = ? order by horainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where FECHAFIN= fechafin
*
* @param   Date  fechafin
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByFechafin(Date fechafin, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where fechafin = ? order by fechafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where HORAFIN= horafin
*
* @param   Time  horafin
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByHorafin(Time horafin, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where horafin = ? order by horafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanificacionproduccion table where IDMAQUINA= idmaquina
*
* @param   long  idmaquina
* @param   Connection con
* @return  Detalleplanificacionproduccion[]
*/

	public Detalleplanificacionproduccion[] findByIdmaquina(long idmaquina, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion where idmaquina = ? order by idmaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
* Returns all rows from detalleplanificacionproduccion table 
*
* @param Connection con
* @return  Detalleplanificacionproduccion[]
*
*/

	public Detalleplanificacionproduccion[] findAll( Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleplanificacionproduccion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleplanificacionproduccion[]
*
*/

	public Detalleplanificacionproduccion[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleplanificacionproduccion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleplanificacionproduccion[]
*
*/

	public Detalleplanificacionproduccion[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetalleplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select id, idplanificacionproduccion, iddetalleejecucionplanificacion, idetapaproduccion, idpieza, idempleado, fechainicio, horainicio, fechafin, horafin, idmaquina from detalleplanificacionproduccion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detalleplanificacionproduccion
*
*/

	protected Detalleplanificacionproduccion fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detalleplanificacionproduccion dto = new Detalleplanificacionproduccion();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detalleplanificacionproduccion dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detalleplanificacionproduccion dto, ResultSet rs) throws SQLException
	{
		 dto.setId(rs.getLong("id"));
		 dto.setIdplanificacionproduccion(rs.getLong("idplanificacionproduccion"));
		 dto.setIddetalleejecucionplanificacion(rs.getLong("iddetalleejecucionplanificacion"));
		 dto.setIdetapaproduccion(rs.getLong("idetapaproduccion"));
		 dto.setIdpieza(rs.getLong("idpieza"));
		 dto.setIdempleado(rs.getLong("idempleado"));
		 dto.setFechainicio(rs.getDate("fechainicio"));
		 dto.setHorainicio(rs.getTime("horainicio"));
		 dto.setFechafin(rs.getDate("fechafin"));
		 dto.setHorafin(rs.getTime("horafin"));
		 dto.setIdmaquina(rs.getLong("idmaquina"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detalleplanificacionproduccion[]
*/

	protected Detalleplanificacionproduccion[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detalleplanificacionproduccion dto = new Detalleplanificacionproduccion();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detalleplanificacionproduccion ret[] = new Detalleplanificacionproduccion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
