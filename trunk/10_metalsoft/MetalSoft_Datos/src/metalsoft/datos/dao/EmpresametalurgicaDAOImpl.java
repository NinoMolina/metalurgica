/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:02 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of EmpresametalurgicaDAO interface 
* 
*/


public class EmpresametalurgicaDAOImpl implements EmpresametalurgicaDAO
{


/**
* Method deletes a record from table EMPRESAMETALURGICA
* @param EmpresametalurgicaPK empresametalurgicapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(EmpresametalurgicaPK empresametalurgicapk , Connection con)throws EmpresametalurgicaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  EMPRESAMETALURGICA where idempresametalurgica = ?");
			ps.setLong(1, empresametalurgicapk.getIdempresametalurgica());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new EmpresametalurgicaException(sqle);}
		catch(Exception e) {throw new EmpresametalurgicaException(e);}
	}



/**
* This method updates a record in table EMPRESAMETALURGICA
* @param EmpresametalurgicaPK
* @param Empresametalurgica
* @param  Connection con
* @return   int
*/

	public int update(EmpresametalurgicaPK empresametalurgicapk, Empresametalurgica empresametalurgica, Connection con)throws EmpresametalurgicaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update EMPRESAMETALURGICA set NROEMPRESAMETALURGICA = ? , RAZONSOCIAL = ? , RESPONSABLE = ? , TELEFONO = ? , CELULAR = ? , MAIL = ? , DOMICILIO = ? , FECHAALTA = ? , FECHABAJA = ? , CUIL = ? , CONDICIONIVA = ? , CUIT = ?  where idempresametalurgica = ?");
				ps.setLong(1,empresametalurgica.getNroempresametalurgica());
				ps.setString(2,empresametalurgica.getRazonsocial());
				ps.setLong(3,empresametalurgica.getResponsable());
				ps.setString(4,empresametalurgica.getTelefono());
				ps.setString(5,empresametalurgica.getCelular());
				ps.setString(6,empresametalurgica.getMail());
				ps.setLong(7,empresametalurgica.getDomicilio());
				ps.setDate(8,empresametalurgica.getFechaalta());
				ps.setDate(9,empresametalurgica.getFechabaja());
				ps.setString(10,empresametalurgica.getCuil());
				ps.setLong(11,empresametalurgica.getCondicioniva());
				ps.setString(12,empresametalurgica.getCuit());
				ps.setLong(13,empresametalurgicapk.getIdempresametalurgica());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EmpresametalurgicaException(sqle);}
		catch(Exception e){throw new EmpresametalurgicaException(e);}
	}

/**
* This method inserts data in table EMPRESAMETALURGICA
*
* @param Empresametalurgica empresametalurgica
* @param   Connection con
* @return  EmpresametalurgicaPK
*/

	public int insert(Empresametalurgica empresametalurgica ,Connection con)throws EmpresametalurgicaException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into EMPRESAMETALURGICA( NROEMPRESAMETALURGICA, RAZONSOCIAL, RESPONSABLE, TELEFONO, CELULAR, MAIL, DOMICILIO, FECHAALTA, FECHABAJA, CUIL, CONDICIONIVA, CUIT) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,empresametalurgica.getNroempresametalurgica());
				ps.setString(2,empresametalurgica.getRazonsocial());
				ps.setLong(3,empresametalurgica.getResponsable());
				ps.setString(4,empresametalurgica.getTelefono());
				ps.setString(5,empresametalurgica.getCelular());
				ps.setString(6,empresametalurgica.getMail());
				ps.setLong(7,empresametalurgica.getDomicilio());
				ps.setDate(8,empresametalurgica.getFechaalta());
				ps.setDate(9,empresametalurgica.getFechabaja());
				ps.setString(10,empresametalurgica.getCuil());
				ps.setLong(11,empresametalurgica.getCondicioniva());
				ps.setString(12,empresametalurgica.getCuit());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EmpresametalurgicaException(sqle);}
		catch(Exception e){throw new EmpresametalurgicaException(e);}
	}

/**
* 
* Returns a row from the empresametalurgica table for the primary key passed as parameter.
* 
*/

	public Empresametalurgica findByPrimaryKey(long idempresametalurgica, Connection con) throws EmpresametalurgicaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where idempresametalurgica = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idempresametalurgica);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new EmpresametalurgicaException(sqle);
	  	}
	    catch(Exception e){throw new EmpresametalurgicaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the empresametalurgica table for the primary key object passed as parameter.
* 
* @param  EmpresametalurgicaPK empresametalurgicapk
* @param Connection con
* @return  Empresametalurgica
*/

	public Empresametalurgica findByPrimaryKey(EmpresametalurgicaPK empresametalurgicapk, Connection con) throws EmpresametalurgicaException{
		return findByPrimaryKey(empresametalurgicapk.getIdempresametalurgica(), con);
	}

/**
*
* Returns all rows from empresametalurgica table where IDEMPRESAMETALURGICA= idempresametalurgica
*
* @param   long  idempresametalurgica
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByIdempresametalurgica(long idempresametalurgica, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where idempresametalurgica = ? order by idempresametalurgica";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idempresametalurgica );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where NROEMPRESAMETALURGICA= nroempresametalurgica
*
* @param   long  nroempresametalurgica
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByNroempresametalurgica(long nroempresametalurgica, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where nroempresametalurgica = ? order by nroempresametalurgica";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroempresametalurgica );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where RAZONSOCIAL= razonsocial
*
* @param   String  razonsocial
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByRazonsocial(String razonsocial, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where razonsocial = ? order by razonsocial";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, razonsocial );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where RESPONSABLE= responsable
*
* @param   long  responsable
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByResponsable(long responsable, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where responsable = ? order by responsable";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, responsable );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where TELEFONO= telefono
*
* @param   String  telefono
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByTelefono(String telefono, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where telefono = ? order by telefono";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, telefono );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where CELULAR= celular
*
* @param   String  celular
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByCelular(String celular, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where celular = ? order by celular";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, celular );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where MAIL= mail
*
* @param   String  mail
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByMail(String mail, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where mail = ? order by mail";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, mail );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where DOMICILIO= domicilio
*
* @param   long  domicilio
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByDomicilio(long domicilio, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where domicilio = ? order by domicilio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, domicilio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where FECHAALTA= fechaalta
*
* @param   Date  fechaalta
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByFechaalta(Date fechaalta, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where fechaalta = ? order by fechaalta";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaalta );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where FECHABAJA= fechabaja
*
* @param   Date  fechabaja
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByFechabaja(Date fechabaja, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where fechabaja = ? order by fechabaja";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechabaja );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where CUIL= cuil
*
* @param   String  cuil
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByCuil(String cuil, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where cuil = ? order by cuil";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, cuil );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where CONDICIONIVA= condicioniva
*
* @param   long  condicioniva
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByCondicioniva(long condicioniva, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where condicioniva = ? order by condicioniva";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, condicioniva );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empresametalurgica table where CUIT= cuit
*
* @param   String  cuit
* @param   Connection con
* @return  Empresametalurgica[]
*/

	public Empresametalurgica[] findByCuit(String cuit, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica where cuit = ? order by cuit";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, cuit );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns all rows from empresametalurgica table 
*
* @param Connection con
* @return  Empresametalurgica[]
*
*/

	public Empresametalurgica[] findAll( Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns rows from empresametalurgica table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Empresametalurgica[]
*
*/

	public Empresametalurgica[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns rows from empresametalurgica table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Empresametalurgica[]
*
*/

	public Empresametalurgica[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws EmpresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idempresametalurgica, nroempresametalurgica, razonsocial, responsable, telefono, celular, mail, domicilio, fechaalta, fechabaja, cuil, condicioniva, cuit from empresametalurgica";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new EmpresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Empresametalurgica
*
*/

	protected Empresametalurgica fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Empresametalurgica dto = new Empresametalurgica();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Empresametalurgica dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Empresametalurgica dto, ResultSet rs) throws SQLException
	{
		 dto.setIdempresametalurgica(rs.getLong("idempresametalurgica"));
		 dto.setNroempresametalurgica(rs.getLong("nroempresametalurgica"));
		 dto.setRazonsocial(rs.getString("razonsocial"));
		 dto.setResponsable(rs.getLong("responsable"));
		 dto.setTelefono(rs.getString("telefono"));
		 dto.setCelular(rs.getString("celular"));
		 dto.setMail(rs.getString("mail"));
		 dto.setDomicilio(rs.getLong("domicilio"));
		 dto.setFechaalta(rs.getDate("fechaalta"));
		 dto.setFechabaja(rs.getDate("fechabaja"));
		 dto.setCuil(rs.getString("cuil"));
		 dto.setCondicioniva(rs.getLong("condicioniva"));
		 dto.setCuit(rs.getString("cuit"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Empresametalurgica[]
*/

	protected Empresametalurgica[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Empresametalurgica dto = new Empresametalurgica();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Empresametalurgica ret[] = new Empresametalurgica[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
