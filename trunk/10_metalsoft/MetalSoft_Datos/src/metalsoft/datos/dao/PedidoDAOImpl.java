/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:39:26 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PedidoDAO interface 
* 
*/


public class PedidoDAOImpl implements PedidoDAO
{


/**
* Method deletes a record from table PEDIDO
* @param PedidoPK pedidopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PedidoPK pedidopk , Connection con)throws PedidoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PEDIDO where idpedido = ?");
			ps.setLong(1, pedidopk.getIdpedido());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PedidoException(sqle);}
		catch(Exception e) {throw new PedidoException(e);}
	}



/**
* This method updates a record in table PEDIDO
* @param PedidoPK
* @param Pedido
* @param  Connection con
* @return   int
*/

	public int update(PedidoPK pedidopk, Pedido pedido, Connection con)throws PedidoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PEDIDO set NROPEDIDO = ? , FECHACONFIRMACIONPEDIDO = ? , FECHAENTREGAESTIPULADA = ? , FECHAPEDIDOCOTIZACION = ? , FECHACANCELACION = ? , FECHAENTREGAREAL = ? , PRIODIDAD = ? , ESTADO = ? , FACTURA = ? , PRESUPUESTO = ? , FECHAREQUERIDACOTIZACION = ? , PLANO = ? , MOTIVOCANCELACION = ? , ESPEDIDOWEB = ? , NROPEDIDOCOTIZACIONCLIENTE = ? , FECHAREGPEDCOTIZ = ? , CLIENTE = ?  where idpedido = ?");
				ps.setLong(1,pedido.getNropedido());
				ps.setDate(2,pedido.getFechaconfirmacionpedido());
				ps.setDate(3,pedido.getFechaentregaestipulada());
				ps.setDate(4,pedido.getFechapedidocotizacion());
				ps.setDate(5,pedido.getFechacancelacion());
				ps.setDate(6,pedido.getFechaentregareal());
				ps.setString(7,pedido.getPriodidad());
				ps.setLong(8,pedido.getEstado());
				ps.setLong(9,pedido.getFactura());
				ps.setLong(10,pedido.getPresupuesto());
				ps.setDate(11,pedido.getFecharequeridacotizacion());
				ps.setLong(12,pedido.getPlano());
				ps.setString(13,pedido.getMotivocancelacion());
				ps.setBoolean(14,pedido.getEspedidoweb());
				ps.setInt(15,pedido.getNropedidocotizacioncliente());
				ps.setDate(16,pedido.getFecharegpedcotiz());
				ps.setLong(17,pedido.getCliente());
				ps.setLong(18,pedidopk.getIdpedido());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PedidoException(sqle);}
		catch(Exception e){throw new PedidoException(e);}
	}

/**
* This method inserts data in table PEDIDO
*
* @param Pedido pedido
* @param   Connection con
* @return  PedidoPK
*/

	public int insert(Pedido pedido ,Connection con)throws PedidoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PEDIDO( NROPEDIDO, FECHACONFIRMACIONPEDIDO, FECHAENTREGAESTIPULADA, FECHAPEDIDOCOTIZACION, FECHACANCELACION, FECHAENTREGAREAL, PRIODIDAD, ESTADO, FACTURA, PRESUPUESTO, FECHAREQUERIDACOTIZACION, PLANO, MOTIVOCANCELACION, ESPEDIDOWEB, NROPEDIDOCOTIZACIONCLIENTE, FECHAREGPEDCOTIZ, IDPEDIDO, CLIENTE) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,pedido.getNropedido());
				ps.setDate(2,pedido.getFechaconfirmacionpedido());
				ps.setDate(3,pedido.getFechaentregaestipulada());
				ps.setDate(4,pedido.getFechapedidocotizacion());
				ps.setDate(5,pedido.getFechacancelacion());
				ps.setDate(6,pedido.getFechaentregareal());
				ps.setString(7,pedido.getPriodidad());
				ps.setLong(8,pedido.getEstado());
				ps.setLong(9,pedido.getFactura());
				ps.setLong(10,pedido.getPresupuesto());
				ps.setDate(11,pedido.getFecharequeridacotizacion());
				ps.setLong(12,pedido.getPlano());
				ps.setString(13,pedido.getMotivocancelacion());
				ps.setBoolean(14,pedido.getEspedidoweb());
				ps.setInt(15,pedido.getNropedidocotizacioncliente());
				ps.setDate(16,pedido.getFecharegpedcotiz());
				ps.setLong(17,pedido.getIdpedido());
				ps.setLong(18,pedido.getCliente());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PedidoException(sqle);}
		catch(Exception e){throw new PedidoException(e);}
	}

/**
* 
* Returns a row from the pedido table for the primary key passed as parameter.
* 
*/

	public Pedido findByPrimaryKey(long idpedido, Connection con) throws PedidoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where idpedido = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idpedido);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PedidoException(sqle);
	  	}
	    catch(Exception e){throw new PedidoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the pedido table for the primary key object passed as parameter.
* 
* @param  PedidoPK pedidopk
* @param Connection con
* @return  Pedido
*/

	public Pedido findByPrimaryKey(PedidoPK pedidopk, Connection con) throws PedidoException{
		return findByPrimaryKey(pedidopk.getIdpedido(), con);
	}

/**
*
* Returns all rows from pedido table where NROPEDIDO= nropedido
*
* @param   long  nropedido
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByNropedido(long nropedido, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where nropedido = ? order by nropedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nropedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHACONFIRMACIONPEDIDO= fechaconfirmacionpedido
*
* @param   Date  fechaconfirmacionpedido
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFechaconfirmacionpedido(Date fechaconfirmacionpedido, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where fechaconfirmacionpedido = ? order by fechaconfirmacionpedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaconfirmacionpedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAENTREGAESTIPULADA= fechaentregaestipulada
*
* @param   Date  fechaentregaestipulada
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFechaentregaestipulada(Date fechaentregaestipulada, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where fechaentregaestipulada = ? order by fechaentregaestipulada";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaentregaestipulada );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAPEDIDOCOTIZACION= fechapedidocotizacion
*
* @param   Date  fechapedidocotizacion
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFechapedidocotizacion(Date fechapedidocotizacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where fechapedidocotizacion = ? order by fechapedidocotizacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechapedidocotizacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHACANCELACION= fechacancelacion
*
* @param   Date  fechacancelacion
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFechacancelacion(Date fechacancelacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where fechacancelacion = ? order by fechacancelacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechacancelacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAENTREGAREAL= fechaentregareal
*
* @param   Date  fechaentregareal
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFechaentregareal(Date fechaentregareal, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where fechaentregareal = ? order by fechaentregareal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaentregareal );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PRIODIDAD= priodidad
*
* @param   String  priodidad
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByPriodidad(String priodidad, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where priodidad = ? order by priodidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, priodidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where ESTADO= estado
*
* @param   long  estado
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByEstado(long estado, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where estado = ? order by estado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, estado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FACTURA= factura
*
* @param   long  factura
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFactura(long factura, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where factura = ? order by factura";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, factura );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PRESUPUESTO= presupuesto
*
* @param   long  presupuesto
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByPresupuesto(long presupuesto, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where presupuesto = ? order by presupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, presupuesto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAREQUERIDACOTIZACION= fecharequeridacotizacion
*
* @param   Date  fecharequeridacotizacion
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFecharequeridacotizacion(Date fecharequeridacotizacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where fecharequeridacotizacion = ? order by fecharequeridacotizacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fecharequeridacotizacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PLANO= plano
*
* @param   long  plano
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByPlano(long plano, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where plano = ? order by plano";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, plano );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where MOTIVOCANCELACION= motivocancelacion
*
* @param   String  motivocancelacion
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByMotivocancelacion(String motivocancelacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where motivocancelacion = ? order by motivocancelacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivocancelacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where ESPEDIDOWEB= espedidoweb
*
* @param   boolean  espedidoweb
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByEspedidoweb(boolean espedidoweb, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where espedidoweb = ? order by espedidoweb";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setBoolean( 1, espedidoweb );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where NROPEDIDOCOTIZACIONCLIENTE= nropedidocotizacioncliente
*
* @param   int  nropedidocotizacioncliente
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByNropedidocotizacioncliente(int nropedidocotizacioncliente, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where nropedidocotizacioncliente = ? order by nropedidocotizacioncliente";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, nropedidocotizacioncliente );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAREGPEDCOTIZ= fecharegpedcotiz
*
* @param   Date  fecharegpedcotiz
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByFecharegpedcotiz(Date fecharegpedcotiz, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where fecharegpedcotiz = ? order by fecharegpedcotiz";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fecharegpedcotiz );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where IDPEDIDO= idpedido
*
* @param   long  idpedido
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByIdpedido(long idpedido, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where idpedido = ? order by idpedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where CLIENTE= cliente
*
* @param   long  cliente
* @param   Connection con
* @return  Pedido[]
*/

	public Pedido[] findByCliente(long cliente, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido where cliente = ? order by cliente";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, cliente );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
* Returns all rows from pedido table 
*
* @param Connection con
* @return  Pedido[]
*
*/

	public Pedido[] findAll( Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
* Returns rows from pedido table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Pedido[]
*
*/

	public Pedido[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
* Returns rows from pedido table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Pedido[]
*
*/

	public Pedido[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, priodidad, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente from pedido";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Pedido
*
*/

	protected Pedido fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Pedido dto = new Pedido();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Pedido dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Pedido dto, ResultSet rs) throws SQLException
	{
		 dto.setNropedido(rs.getLong("nropedido"));
		 dto.setFechaconfirmacionpedido(rs.getDate("fechaconfirmacionpedido"));
		 dto.setFechaentregaestipulada(rs.getDate("fechaentregaestipulada"));
		 dto.setFechapedidocotizacion(rs.getDate("fechapedidocotizacion"));
		 dto.setFechacancelacion(rs.getDate("fechacancelacion"));
		 dto.setFechaentregareal(rs.getDate("fechaentregareal"));
		 dto.setPriodidad(rs.getString("priodidad"));
		 dto.setEstado(rs.getLong("estado"));
		 dto.setFactura(rs.getLong("factura"));
		 dto.setPresupuesto(rs.getLong("presupuesto"));
		 dto.setFecharequeridacotizacion(rs.getDate("fecharequeridacotizacion"));
		 dto.setPlano(rs.getLong("plano"));
		 dto.setMotivocancelacion(rs.getString("motivocancelacion"));
		 dto.setEspedidoweb(rs.getBoolean("espedidoweb"));
		 dto.setNropedidocotizacioncliente(rs.getInt("nropedidocotizacioncliente"));
		 dto.setFecharegpedcotiz(rs.getDate("fecharegpedcotiz"));
		 dto.setIdpedido(rs.getLong("idpedido"));
		 dto.setCliente(rs.getLong("cliente"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Pedido[]
*/

	protected Pedido[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Pedido dto = new Pedido();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Pedido ret[] = new Pedido[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
