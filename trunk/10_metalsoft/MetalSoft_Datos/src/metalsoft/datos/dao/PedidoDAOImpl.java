/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Aug 23 21:29:20 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PedidoDAO interface 
* 
*/


public class PedidoDAOImpl implements PedidoDAO
{


/**
* Method deletes a record from table PEDIDO
* @param PedidoPK pedidopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PedidoPK pedidopk , Connection con)throws PedidoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PEDIDO where idpedido = ?");
			ps.setLong(1, pedidopk.getIdpedido());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PedidoException(sqle);}
		catch(Exception e) {throw new PedidoException(e);}
	}



/**
* This method updates a record in table PEDIDO
* @param PedidoPK
* @param Pedido
* @param  Connection con
* @return   int
*/

	public int update(PedidoPK pedidopk, PedidoDB pedido, Connection con)throws PedidoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PEDIDO set NROPEDIDO = ? , FECHACONFIRMACIONPEDIDO = ? , FECHAENTREGAESTIPULADA = ? , FECHAPEDIDOCOTIZACION = ? , FECHACANCELACION = ? , FECHAENTREGAREAL = ? , ESTADO = ? , FACTURA = ? , PRESUPUESTO = ? , FECHAREQUERIDACOTIZACION = ? , PLANO = ? , MOTIVOCANCELACION = ? , ESPEDIDOWEB = ? , NROPEDIDOCOTIZACIONCLIENTE = ? , FECHAREGPEDCOTIZ = ? , CLIENTE = ? , PLANPROCEDIMIENTOS = ? , PLANREQUERIMIENTOSMATERIAPRIMA = ? , PLANPROCESOSCALIDAD = ? , PRIORIDAD = ?  where idpedido = ?");
				ps.setLong(1,pedido.getNropedido());
				ps.setDate(2,pedido.getFechaconfirmacionpedido());
				ps.setDate(3,pedido.getFechaentregaestipulada());
				ps.setDate(4,pedido.getFechapedidocotizacion());
				ps.setDate(5,pedido.getFechacancelacion());
				ps.setDate(6,pedido.getFechaentregareal());
				ps.setLong(7,pedido.getEstado());
				ps.setLong(8,pedido.getFactura());
				ps.setLong(9,pedido.getPresupuesto());
				ps.setDate(10,pedido.getFecharequeridacotizacion());
				ps.setLong(11,pedido.getPlano());
				ps.setString(12,pedido.getMotivocancelacion());
				ps.setBoolean(13,pedido.getEspedidoweb());
				ps.setInt(14,pedido.getNropedidocotizacioncliente());
				ps.setDate(15,pedido.getFecharegpedcotiz());
				ps.setLong(16,pedido.getCliente());
				ps.setLong(17,pedido.getPlanprocedimientos());
				ps.setLong(18,pedido.getPlanrequerimientosmateriaprima());
				ps.setLong(19,pedido.getPlanprocesoscalidad());
				ps.setLong(20,pedido.getPrioridad());
				ps.setLong(21,pedidopk.getIdpedido());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PedidoException(sqle);}
		catch(Exception e){throw new PedidoException(e);}
	}

/**
* This method inserts data in table PEDIDO
*
* @param Pedido pedido
* @param   Connection con
* @return  PedidoPK
*/

	public int insert(PedidoDB pedido ,Connection con)throws PedidoException {

		PreparedStatement ps = null;
                ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into PEDIDO( NROPEDIDO, FECHACONFIRMACIONPEDIDO, FECHAENTREGAESTIPULADA, FECHAPEDIDOCOTIZACION, FECHACANCELACION, FECHAENTREGAREAL, ESTADO, FACTURA, PRESUPUESTO, FECHAREQUERIDACOTIZACION, PLANO, MOTIVOCANCELACION, ESPEDIDOWEB, NROPEDIDOCOTIZACIONCLIENTE, FECHAREGPEDCOTIZ, CLIENTE, PLANPROCEDIMIENTOS, PLANREQUERIMIENTOSMATERIAPRIMA, PLANPROCESOSCALIDAD, PRIORIDAD) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)RETURNING idpedido");
				ps.setLong(1,pedido.getNropedido());
                                
                                if(pedido.getFechaconfirmacionpedido()!=null)
                                    ps.setDate(2,pedido.getFechaconfirmacionpedido());
                                else
                                    ps.setNull(2,Types.NULL);

                                if(pedido.getFechaentregaestipulada()!=null)
                                    ps.setDate(3,pedido.getFechaentregaestipulada());
                                else
                                    ps.setNull(3,Types.NULL);

                                if(pedido.getFechapedidocotizacion()!=null)
                                    ps.setDate(4,pedido.getFechapedidocotizacion());
                                else
                                    ps.setNull(4,Types.NULL);

				if(pedido.getFechacancelacion()!=null)
                                    ps.setDate(5,pedido.getFechacancelacion());
                                else
                                    ps.setNull(5,Types.NULL);

				if(pedido.getFechaentregareal()!=null)
                                    ps.setDate(6,pedido.getFechaentregareal());
                                else
                                    ps.setNull(6,Types.NULL);
			
				ps.setLong(7,pedido.getEstado());

                                if(pedido.getFactura()>0)
                                    ps.setLong(8,pedido.getFactura());
                                else
                                    ps.setNull(8,Types.NULL);

                                if(pedido.getPresupuesto()>0)
                                    ps.setLong(9,pedido.getPresupuesto());
                                else
                                    ps.setNull(9,Types.NULL);

                                if(pedido.getFecharequeridacotizacion()!=null)
                                    ps.setDate(10,pedido.getFecharequeridacotizacion());
                                else
                                    ps.setNull(10,Types.NULL);

                                if(pedido.getPlano()>0)
                                    ps.setLong(11,pedido.getPlano());
                                else
                                    ps.setNull(11,Types.NULL);

				ps.setString(12,pedido.getMotivocancelacion());
				ps.setBoolean(13,pedido.getEspedidoweb());
				ps.setInt(14,pedido.getNropedidocotizacioncliente());

                                if(pedido.getFecharegpedcotiz()!=null)
                                    ps.setDate(15,pedido.getFecharegpedcotiz());
                                else
                                    ps.setNull(15,Types.NULL);

				ps.setLong(16,pedido.getCliente());

                                if(pedido.getPlanprocedimientos()>0)
                                    ps.setLong(17,pedido.getPlanprocedimientos());
                                else
                                    ps.setNull(17,Types.NULL);

				if(pedido.getPlanrequerimientosmateriaprima()>0)
                                    ps.setLong(18,pedido.getPlanrequerimientosmateriaprima());
                                else
                                    ps.setNull(18,Types.NULL);

				if(pedido.getPlanprocesoscalidad()>0)
                                    ps.setLong(19,pedido.getPlanprocesoscalidad());
                                else
                                    ps.setNull(19,Types.NULL);
				
				ps.setLong(20,pedido.getPrioridad());

                                rs=ps.executeQuery();
                                rs.next();
				return (int)rs.getLong(1);
		}catch(SQLException sqle){throw new PedidoException(sqle);}
		catch(Exception e){throw new PedidoException(e);}
	}

/**
* 
* Returns a row from the pedido table for the primary key passed as parameter.
* 
*/

	public PedidoDB findByPrimaryKey(long idpedido, Connection con) throws PedidoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where idpedido = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idpedido);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PedidoException(sqle);
	  	}
	    catch(Exception e){throw new PedidoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the pedido table for the primary key object passed as parameter.
* 
* @param  PedidoPK pedidopk
* @param Connection con
* @return  Pedido
*/

	public PedidoDB findByPrimaryKey(PedidoPK pedidopk, Connection con) throws PedidoException{
		return findByPrimaryKey(pedidopk.getIdpedido(), con);
	}

/**
*
* Returns all rows from pedido table where NROPEDIDO= nropedido
*
* @param   long  nropedido
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByNropedido(long nropedido, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where nropedido = ? order by nropedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nropedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHACONFIRMACIONPEDIDO= fechaconfirmacionpedido
*
* @param   Date  fechaconfirmacionpedido
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFechaconfirmacionpedido(Date fechaconfirmacionpedido, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where fechaconfirmacionpedido = ? order by fechaconfirmacionpedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaconfirmacionpedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAENTREGAESTIPULADA= fechaentregaestipulada
*
* @param   Date  fechaentregaestipulada
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFechaentregaestipulada(Date fechaentregaestipulada, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where fechaentregaestipulada = ? order by fechaentregaestipulada";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaentregaestipulada );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAPEDIDOCOTIZACION= fechapedidocotizacion
*
* @param   Date  fechapedidocotizacion
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFechapedidocotizacion(Date fechapedidocotizacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where fechapedidocotizacion = ? order by fechapedidocotizacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechapedidocotizacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHACANCELACION= fechacancelacion
*
* @param   Date  fechacancelacion
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFechacancelacion(Date fechacancelacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where fechacancelacion = ? order by fechacancelacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechacancelacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAENTREGAREAL= fechaentregareal
*
* @param   Date  fechaentregareal
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFechaentregareal(Date fechaentregareal, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where fechaentregareal = ? order by fechaentregareal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaentregareal );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where ESTADO= estado
*
* @param   long  estado
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByEstado(long estado, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where estado = ? order by estado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, estado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FACTURA= factura
*
* @param   long  factura
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFactura(long factura, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where factura = ? order by factura";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, factura );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PRESUPUESTO= presupuesto
*
* @param   long  presupuesto
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByPresupuesto(long presupuesto, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where presupuesto = ? order by presupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, presupuesto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAREQUERIDACOTIZACION= fecharequeridacotizacion
*
* @param   Date  fecharequeridacotizacion
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFecharequeridacotizacion(Date fecharequeridacotizacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where fecharequeridacotizacion = ? order by fecharequeridacotizacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fecharequeridacotizacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PLANO= plano
*
* @param   long  plano
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByPlano(long plano, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where plano = ? order by plano";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, plano );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where MOTIVOCANCELACION= motivocancelacion
*
* @param   String  motivocancelacion
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByMotivocancelacion(String motivocancelacion, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where motivocancelacion = ? order by motivocancelacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivocancelacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where ESPEDIDOWEB= espedidoweb
*
* @param   boolean  espedidoweb
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByEspedidoweb(boolean espedidoweb, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where espedidoweb = ? order by espedidoweb";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setBoolean( 1, espedidoweb );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where NROPEDIDOCOTIZACIONCLIENTE= nropedidocotizacioncliente
*
* @param   int  nropedidocotizacioncliente
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByNropedidocotizacioncliente(int nropedidocotizacioncliente, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where nropedidocotizacioncliente = ? order by nropedidocotizacioncliente";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, nropedidocotizacioncliente );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where FECHAREGPEDCOTIZ= fecharegpedcotiz
*
* @param   Date  fecharegpedcotiz
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByFecharegpedcotiz(Date fecharegpedcotiz, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where fecharegpedcotiz = ? order by fecharegpedcotiz";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fecharegpedcotiz );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where IDPEDIDO= idpedido
*
* @param   long  idpedido
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByIdpedido(long idpedido, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where idpedido = ? order by idpedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where CLIENTE= cliente
*
* @param   long  cliente
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByCliente(long cliente, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where cliente = ? order by cliente";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, cliente );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PLANPROCEDIMIENTOS= planprocedimientos
*
* @param   long  planprocedimientos
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByPlanprocedimientos(long planprocedimientos, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where planprocedimientos = ? order by planprocedimientos";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, planprocedimientos );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PLANREQUERIMIENTOSMATERIAPRIMA= planrequerimientosmateriaprima
*
* @param   long  planrequerimientosmateriaprima
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByPlanrequerimientosmateriaprima(long planrequerimientosmateriaprima, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where planrequerimientosmateriaprima = ? order by planrequerimientosmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, planrequerimientosmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PLANPROCESOSCALIDAD= planprocesoscalidad
*
* @param   long  planprocesoscalidad
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByPlanprocesoscalidad(long planprocesoscalidad, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where planprocesoscalidad = ? order by planprocesoscalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, planprocesoscalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pedido table where PRIORIDAD= prioridad
*
* @param   long  prioridad
* @param   Connection con
* @return  Pedido[]
*/

	public PedidoDB[] findByPrioridad(long prioridad, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido where prioridad = ? order by prioridad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, prioridad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
* Returns all rows from pedido table 
*
* @param Connection con
* @return  Pedido[]
*
*/

	public PedidoDB[] findAll( Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
* Returns rows from pedido table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Pedido[]
*
*/

	public PedidoDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
* Returns rows from pedido table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Pedido[]
*
*/

	public PedidoDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PedidoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select nropedido, fechaconfirmacionpedido, fechaentregaestipulada, fechapedidocotizacion, fechacancelacion, fechaentregareal, estado, factura, presupuesto, fecharequeridacotizacion, plano, motivocancelacion, espedidoweb, nropedidocotizacioncliente, fecharegpedcotiz, idpedido, cliente, planprocedimientos, planrequerimientosmateriaprima, planprocesoscalidad, prioridad from pedido";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PedidoException(sqle);
			}
			catch(Exception e){
					throw new PedidoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Pedido
*
*/

	protected PedidoDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					PedidoDB dto = new PedidoDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Pedido dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(PedidoDB dto, ResultSet rs) throws SQLException
	{
		 dto.setNropedido(rs.getLong("nropedido"));
		 dto.setFechaconfirmacionpedido(rs.getDate("fechaconfirmacionpedido"));
		 dto.setFechaentregaestipulada(rs.getDate("fechaentregaestipulada"));
		 dto.setFechapedidocotizacion(rs.getDate("fechapedidocotizacion"));
		 dto.setFechacancelacion(rs.getDate("fechacancelacion"));
		 dto.setFechaentregareal(rs.getDate("fechaentregareal"));
		 dto.setEstado(rs.getLong("estado"));
		 dto.setFactura(rs.getLong("factura"));
		 dto.setPresupuesto(rs.getLong("presupuesto"));
		 dto.setFecharequeridacotizacion(rs.getDate("fecharequeridacotizacion"));
		 dto.setPlano(rs.getLong("plano"));
		 dto.setMotivocancelacion(rs.getString("motivocancelacion"));
		 dto.setEspedidoweb(rs.getBoolean("espedidoweb"));
		 dto.setNropedidocotizacioncliente(rs.getInt("nropedidocotizacioncliente"));
		 dto.setFecharegpedcotiz(rs.getDate("fecharegpedcotiz"));
		 dto.setIdpedido(rs.getLong("idpedido"));
		 dto.setCliente(rs.getLong("cliente"));
		 dto.setPlanprocedimientos(rs.getLong("planprocedimientos"));
		 dto.setPlanrequerimientosmateriaprima(rs.getLong("planrequerimientosmateriaprima"));
		 dto.setPlanprocesoscalidad(rs.getLong("planprocesoscalidad"));
		 dto.setPrioridad(rs.getLong("prioridad"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Pedido[]
*/

	protected PedidoDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PedidoDB dto = new PedidoDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		PedidoDB ret[] = new PedidoDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
