/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Jun 22 00:02:11 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of SesionDAO interface 
* 
*/


public class SesionDAOImpl implements SesionDAO
{


/**
* Method deletes a record from table SESION
* @param SesionPK sesionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(SesionPK sesionpk , Connection con)throws SesionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  SESION where idsesion = ?");
			ps.setLong(1, sesionpk.getIdsesion());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new SesionException(sqle);}
		catch(Exception e) {throw new SesionException(e);}
	}



/**
* This method updates a record in table SESION
* @param SesionPK
* @param Sesion
* @param  Connection con
* @return   int
*/

	public int update(SesionPK sesionpk, Sesion sesion, Connection con)throws SesionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update SESION set FECHAINICIO = ? , FECHAFIN = ? , HORAINICIO = ? , HORAFIN = ? , USUARIO = ?  where idsesion = ?");
				ps.setDate(1,sesion.getFechainicio());
				ps.setDate(2,sesion.getFechafin());
				ps.setTime(3,sesion.getHorainicio());
				ps.setTime(4,sesion.getHorafin());
				ps.setLong(5,sesion.getUsuario());
				ps.setLong(6,sesionpk.getIdsesion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new SesionException(sqle);}
		catch(Exception e){throw new SesionException(e);}
	}

/**
* This method inserts data in table SESION
*
* @param Sesion sesion
* @param   Connection con
* @return  SesionPK
*/

	public int insert(Sesion sesion ,Connection con)throws SesionException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into SESION( IDSESION, FECHAINICIO, FECHAFIN, HORAINICIO, HORAFIN, USUARIO) values (?, ?, ?, ?, ?, ?)");
				ps.setLong(1,sesion.getIdsesion());
				ps.setDate(2,sesion.getFechainicio());
				ps.setDate(3,sesion.getFechafin());
				ps.setTime(4,sesion.getHorainicio());
				ps.setTime(5,sesion.getHorafin());
				ps.setLong(6,sesion.getUsuario());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new SesionException(sqle);}
		catch(Exception e){throw new SesionException(e);}
	}

/**
* 
* Returns a row from the sesion table for the primary key passed as parameter.
* 
*/

	public Sesion findByPrimaryKey(long idsesion, Connection con) throws SesionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion where idsesion = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idsesion);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new SesionException(sqle);
	  	}
	    catch(Exception e){throw new SesionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the sesion table for the primary key object passed as parameter.
* 
* @param  SesionPK sesionpk
* @param Connection con
* @return  Sesion
*/

	public Sesion findByPrimaryKey(SesionPK sesionpk, Connection con) throws SesionException{
		return findByPrimaryKey(sesionpk.getIdsesion(), con);
	}

/**
*
* Returns all rows from sesion table where IDSESION= idsesion
*
* @param   long  idsesion
* @param   Connection con
* @return  Sesion[]
*/

	public Sesion[] findByIdsesion(long idsesion, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion where idsesion = ? order by idsesion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idsesion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from sesion table where FECHAINICIO= fechainicio
*
* @param   Date  fechainicio
* @param   Connection con
* @return  Sesion[]
*/

	public Sesion[] findByFechainicio(Date fechainicio, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion where fechainicio = ? order by fechainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from sesion table where FECHAFIN= fechafin
*
* @param   Date  fechafin
* @param   Connection con
* @return  Sesion[]
*/

	public Sesion[] findByFechafin(Date fechafin, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion where fechafin = ? order by fechafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from sesion table where HORAINICIO= horainicio
*
* @param   Time  horainicio
* @param   Connection con
* @return  Sesion[]
*/

	public Sesion[] findByHorainicio(Time horainicio, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion where horainicio = ? order by horainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from sesion table where HORAFIN= horafin
*
* @param   Time  horafin
* @param   Connection con
* @return  Sesion[]
*/

	public Sesion[] findByHorafin(Time horafin, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion where horafin = ? order by horafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from sesion table where USUARIO= usuario
*
* @param   long  usuario
* @param   Connection con
* @return  Sesion[]
*/

	public Sesion[] findByUsuario(long usuario, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion where usuario = ? order by usuario";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, usuario );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
* Returns all rows from sesion table 
*
* @param Connection con
* @return  Sesion[]
*
*/

	public Sesion[] findAll( Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
* Returns rows from sesion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Sesion[]
*
*/

	public Sesion[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
* Returns rows from sesion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Sesion[]
*
*/

	public Sesion[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws SesionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idsesion, fechainicio, fechafin, horainicio, horafin, usuario from sesion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new SesionException(sqle);
			}
			catch(Exception e){
					throw new SesionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Sesion
*
*/

	protected Sesion fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Sesion dto = new Sesion();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Sesion dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Sesion dto, ResultSet rs) throws SQLException
	{
		 dto.setIdsesion(rs.getLong("idsesion"));
		 dto.setFechainicio(rs.getDate("fechainicio"));
		 dto.setFechafin(rs.getDate("fechafin"));
		 dto.setHorainicio(rs.getTime("horainicio"));
		 dto.setHorafin(rs.getTime("horafin"));
		 dto.setUsuario(rs.getLong("usuario"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Sesion[]
*/

	protected Sesion[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Sesion dto = new Sesion();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Sesion ret[] = new Sesion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
