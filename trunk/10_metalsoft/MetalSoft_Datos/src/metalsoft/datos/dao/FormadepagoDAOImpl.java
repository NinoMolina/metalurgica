/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:39:11 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of FormadepagoDAO interface 
* 
*/


public class FormadepagoDAOImpl implements FormadepagoDAO
{


/**
* Method deletes a record from table FORMADEPAGO
* @param FormadepagoPK formadepagopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(FormadepagoPK formadepagopk , Connection con)throws FormadepagoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  FORMADEPAGO where idformapago = ?");
			ps.setInt(1, formadepagopk.getIdformapago());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new FormadepagoException(sqle);}
		catch(Exception e) {throw new FormadepagoException(e);}
	}



/**
* This method updates a record in table FORMADEPAGO
* @param FormadepagoPK
* @param Formadepago
* @param  Connection con
* @return   int
*/

	public int update(FormadepagoPK formadepagopk, Formadepago formadepago, Connection con)throws FormadepagoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update FORMADEPAGO set NOMBRE = ? , DESCRIPCION = ?  where idformapago = ?");
				ps.setString(1,formadepago.getNombre());
				ps.setString(2,formadepago.getDescripcion());
				ps.setInt(3,formadepagopk.getIdformapago());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new FormadepagoException(sqle);}
		catch(Exception e){throw new FormadepagoException(e);}
	}

/**
* This method inserts data in table FORMADEPAGO
*
* @param Formadepago formadepago
* @param   Connection con
* @return  FormadepagoPK
*/

	public int insert(Formadepago formadepago ,Connection con)throws FormadepagoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into FORMADEPAGO( IDFORMAPAGO, NOMBRE, DESCRIPCION) values (?, ?, ?)");
				ps.setInt(1,formadepago.getIdformapago());
				ps.setString(2,formadepago.getNombre());
				ps.setString(3,formadepago.getDescripcion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new FormadepagoException(sqle);}
		catch(Exception e){throw new FormadepagoException(e);}
	}

/**
* 
* Returns a row from the formadepago table for the primary key passed as parameter.
* 
*/

	public Formadepago findByPrimaryKey(int idformapago, Connection con) throws FormadepagoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idformapago, nombre, descripcion from formadepago where idformapago = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setInt(1, idformapago);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new FormadepagoException(sqle);
	  	}
	    catch(Exception e){throw new FormadepagoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the formadepago table for the primary key object passed as parameter.
* 
* @param  FormadepagoPK formadepagopk
* @param Connection con
* @return  Formadepago
*/

	public Formadepago findByPrimaryKey(FormadepagoPK formadepagopk, Connection con) throws FormadepagoException{
		return findByPrimaryKey(formadepagopk.getIdformapago(), con);
	}

/**
*
* Returns all rows from formadepago table where IDFORMAPAGO= idformapago
*
* @param   int  idformapago
* @param   Connection con
* @return  Formadepago[]
*/

	public Formadepago[] findByIdformapago(int idformapago, Connection con) throws FormadepagoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idformapago, nombre, descripcion from formadepago where idformapago = ? order by idformapago";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, idformapago );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new FormadepagoException(sqle);
			}
			catch(Exception e){
					throw new FormadepagoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from formadepago table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Formadepago[]
*/

	public Formadepago[] findByNombre(String nombre, Connection con) throws FormadepagoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idformapago, nombre, descripcion from formadepago where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new FormadepagoException(sqle);
			}
			catch(Exception e){
					throw new FormadepagoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from formadepago table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Formadepago[]
*/

	public Formadepago[] findByDescripcion(String descripcion, Connection con) throws FormadepagoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idformapago, nombre, descripcion from formadepago where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new FormadepagoException(sqle);
			}
			catch(Exception e){
					throw new FormadepagoException(e);
			}
			finally{}
	}

/**
* Returns all rows from formadepago table 
*
* @param Connection con
* @return  Formadepago[]
*
*/

	public Formadepago[] findAll( Connection con) throws FormadepagoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idformapago, nombre, descripcion from formadepago";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new FormadepagoException(sqle);
			}
			catch(Exception e){
					throw new FormadepagoException(e);
			}
			finally{}
	}

/**
* Returns rows from formadepago table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Formadepago[]
*
*/

	public Formadepago[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws FormadepagoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new FormadepagoException(sqle);
			}
			catch(Exception e){
					throw new FormadepagoException(e);
			}
			finally{}
	}

/**
* Returns rows from formadepago table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Formadepago[]
*
*/

	public Formadepago[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws FormadepagoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idformapago, nombre, descripcion from formadepago";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new FormadepagoException(sqle);
			}
			catch(Exception e){
					throw new FormadepagoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Formadepago
*
*/

	protected Formadepago fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Formadepago dto = new Formadepago();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Formadepago dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Formadepago dto, ResultSet rs) throws SQLException
	{
		 dto.setIdformapago(rs.getInt("idformapago"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setDescripcion(rs.getString("descripcion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Formadepago[]
*/

	protected Formadepago[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Formadepago dto = new Formadepago();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Formadepago ret[] = new Formadepago[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
