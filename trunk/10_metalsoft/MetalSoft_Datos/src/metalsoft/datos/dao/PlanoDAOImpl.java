/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PlanoDAO interface 
* 
*/


public class PlanoDAOImpl implements PlanoDAO
{


/**
* Method deletes a record from table PLANO
* @param PlanoPK planopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PlanoPK planopk , Connection con)throws PlanoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PLANO where idplano = ?");
			ps.setLong(1, planopk.getIdplano());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PlanoException(sqle);}
		catch(Exception e) {throw new PlanoException(e);}
	}



/**
* This method updates a record in table PLANO
* @param PlanoPK
* @param Plano
* @param  Connection con
* @return   int
*/

	public int update(PlanoPK planopk, Plano plano, Connection con)throws PlanoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PLANO set NROPLANO = ? , ESCALA = ? , PEDIDO = ? , IMAGEN = ?  where idplano = ?");
				ps.setLong(1,plano.getNroplano());
				ps.setInt(2,plano.getEscala());
				ps.setLong(3,plano.getPedido());
				ps.setObject(4,plano.getImagen());
				ps.setLong(5,planopk.getIdplano());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PlanoException(sqle);}
		catch(Exception e){throw new PlanoException(e);}
	}

/**
* This method inserts data in table PLANO
*
* @param Plano plano
* @param   Connection con
* @return  PlanoPK
*/

	public int insert(Plano plano ,Connection con)throws PlanoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PLANO( NROPLANO, ESCALA, PEDIDO, IMAGEN) values (?, ?, ?, ?)");
				ps.setLong(1,plano.getNroplano());
				ps.setInt(2,plano.getEscala());
				ps.setLong(3,plano.getPedido());
				ps.setObject(4,plano.getImagen());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PlanoException(sqle);}
		catch(Exception e){throw new PlanoException(e);}
	}

/**
* 
* Returns a row from the plano table for the primary key passed as parameter.
* 
*/

	public Plano findByPrimaryKey(long idplano, Connection con) throws PlanoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idplano, nroplano, escala, pedido, imagen from plano where idplano = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idplano);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PlanoException(sqle);
	  	}
	    catch(Exception e){throw new PlanoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the plano table for the primary key object passed as parameter.
* 
* @param  PlanoPK planopk
* @param Connection con
* @return  Plano
*/

	public Plano findByPrimaryKey(PlanoPK planopk, Connection con) throws PlanoException{
		return findByPrimaryKey(planopk.getIdplano(), con);
	}

/**
*
* Returns all rows from plano table where IDPLANO= idplano
*
* @param   long  idplano
* @param   Connection con
* @return  Plano[]
*/

	public Plano[] findByIdplano(long idplano, Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplano, nroplano, escala, pedido, imagen from plano where idplano = ? order by idplano";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplano );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from plano table where NROPLANO= nroplano
*
* @param   long  nroplano
* @param   Connection con
* @return  Plano[]
*/

	public Plano[] findByNroplano(long nroplano, Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplano, nroplano, escala, pedido, imagen from plano where nroplano = ? order by nroplano";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroplano );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from plano table where ESCALA= escala
*
* @param   int  escala
* @param   Connection con
* @return  Plano[]
*/

	public Plano[] findByEscala(int escala, Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplano, nroplano, escala, pedido, imagen from plano where escala = ? order by escala";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, escala );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from plano table where PEDIDO= pedido
*
* @param   long  pedido
* @param   Connection con
* @return  Plano[]
*/

	public Plano[] findByPedido(long pedido, Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplano, nroplano, escala, pedido, imagen from plano where pedido = ? order by pedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, pedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from plano table where IMAGEN= imagen
*
* @param   Object  imagen
* @param   Connection con
* @return  Plano[]
*/

	public Plano[] findByImagen(Object imagen, Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplano, nroplano, escala, pedido, imagen from plano where imagen = ? order by imagen";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setObject( 1, imagen );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
* Returns all rows from plano table 
*
* @param Connection con
* @return  Plano[]
*
*/

	public Plano[] findAll( Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplano, nroplano, escala, pedido, imagen from plano";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
* Returns rows from plano table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Plano[]
*
*/

	public Plano[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
* Returns rows from plano table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Plano[]
*
*/

	public Plano[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PlanoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idplano, nroplano, escala, pedido, imagen from plano";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanoException(sqle);
			}
			catch(Exception e){
					throw new PlanoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Plano
*
*/

	protected Plano fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Plano dto = new Plano();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Plano dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Plano dto, ResultSet rs) throws SQLException
	{
		 dto.setIdplano(rs.getLong("idplano"));
		 dto.setNroplano(rs.getLong("nroplano"));
		 dto.setEscala(rs.getInt("escala"));
		 dto.setPedido(rs.getLong("pedido"));
		 dto.setImagen(rs.getObject("imagen"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Plano[]
*/

	protected Plano[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Plano dto = new Plano();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Plano ret[] = new Plano[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
