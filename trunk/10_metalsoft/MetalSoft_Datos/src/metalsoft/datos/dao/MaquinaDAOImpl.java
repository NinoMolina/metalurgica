/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of MaquinaDAO interface 
* 
*/


public class MaquinaDAOImpl implements MaquinaDAO
{


/**
* Method deletes a record from table MAQUINA
* @param MaquinaPK maquinapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(MaquinaPK maquinapk , Connection con)throws MaquinaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  MAQUINA where idmaquina = ?");
			ps.setLong(1, maquinapk.getIdmaquina());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new MaquinaException(sqle);}
		catch(Exception e) {throw new MaquinaException(e);}
	}



/**
* This method updates a record in table MAQUINA
* @param MaquinaPK
* @param MaquinaDB
* @param  Connection con
* @return   int
*/

	public int update(MaquinaPK maquinapk, MaquinaDB maquina, Connection con)throws MaquinaException{
		PreparedStatement ps = null;

		try
		{
			ps = con.prepareStatement("update MAQUINA set NOMBRE = ? , MARCA = ? , DESCRIPCION = ? , ESTADO = ? , TIPOMAQUINA = ?, FECHAALTA=?, FECHABAJA=?, TIEMPOCAPACIDADPRODUCCION=?, IDUNIDADMEDIDA=?  where idmaquina = ?");
				ps.setString(1,maquina.getNombre());
				long id2=maquina.getMarca();
                if(id2>0) ps.setLong(2,maquina.getMarca());
                else ps.setNull(2,java.sql.Types.NULL);

				ps.setString(3,maquina.getDescripcion());
                long id4=maquina.getEstado();
                if(id4>0) ps.setLong(4,maquina.getEstado());
                else ps.setNull(4,java.sql.Types.NULL);

                long id5=maquina.getTipomaquina();
                if(id5>0) ps.setLong(5,maquina.getTipomaquina());
                else ps.setNull(5,java.sql.Types.NULL);

                ps.setDate(6,maquina.getFechaAlta());
                ps.setDate(7,maquina.getFechaBaja());
                ps.setTime(8, maquina.getTiempoCapacidadProduccion());

                long id9=maquina.getUnidadMedida();
                if(id9>0) ps.setLong(9, maquina.getUnidadMedida());
                else ps.setNull(9,java.sql.Types.NULL);
				ps.setLong(10,maquinapk.getIdmaquina());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MaquinaException(sqle);}
		catch(Exception e){throw new MaquinaException(e);}
	}

/**
* This method inserts data in table MAQUINA
*
* @param MaquinaDB maquina
* @param   Connection con
* @return  MaquinaPK
*/

	public int insert(MaquinaDB maquina ,Connection con)throws MaquinaException {

		PreparedStatement ps = null;
        ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into MAQUINA( NOMBRE, MARCA, DESCRIPCION, ESTADO, TIPOMAQUINA, FECHAALTA, FECHABAJA, TIEMPOCAPACIDADPRODUCCION, IDUNIDADMEDIDA) values (?, ?, ?, ?, ?, ?, ?, ?, ?)  RETURNING IDMAQUINA");
				ps.setString(1,maquina.getNombre());
                long id2=maquina.getMarca();
                if(id2>0) ps.setLong(2,maquina.getMarca());
                else ps.setNull(2,java.sql.Types.NULL);

				ps.setString(3,maquina.getDescripcion());
                long id4=maquina.getEstado();
                if(id4>0) ps.setLong(4,maquina.getEstado());
                else ps.setNull(4,java.sql.Types.NULL);

                long id5=maquina.getTipomaquina();
                if(id5>0) ps.setLong(5,maquina.getTipomaquina());
                else ps.setNull(5,java.sql.Types.NULL);
				
                ps.setDate(6,maquina.getFechaAlta());
                ps.setDate(7,maquina.getFechaBaja());
                ps.setTime(8, maquina.getTiempoCapacidadProduccion());

                long id9=maquina.getUnidadMedida();
                if(id9>0) ps.setLong(9, maquina.getUnidadMedida());
                else ps.setNull(9,java.sql.Types.NULL);
                

				rs=ps.executeQuery();
                rs.next();
				return (int) rs.getLong(1);
		}catch(SQLException sqle){throw new MaquinaException(sqle);}
		catch(Exception e){throw new MaquinaException(e);}
	}

/**
* 
* Returns a row from the maquina table for the primary key passed as parameter.
* 
*/

	public MaquinaDB findByPrimaryKey(long idmaquina, Connection con) throws MaquinaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina where idmaquina = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idmaquina);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new MaquinaException(sqle);
	  	}
	    catch(Exception e){throw new MaquinaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the maquina table for the primary key object passed as parameter.
* 
* @param  MaquinaPK maquinapk
* @param Connection con
* @return  MaquinaDB
*/

	public MaquinaDB findByPrimaryKey(MaquinaPK maquinapk, Connection con) throws MaquinaException{
		return findByPrimaryKey(maquinapk.getIdmaquina(), con);
	}

/**
*
* Returns all rows from maquina table where IDMAQUINA= idmaquina
*
* @param   long  idmaquina
* @param   Connection con
* @return  MaquinaDB[]
*/

	public MaquinaDB[] findByIdmaquina(long idmaquina, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina where idmaquina = ? order by idmaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquina table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  MaquinaDB[]
*/

	public MaquinaDB[] findByNombre(String nombre, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquina table where MARCA= marca
*
* @param   long  marca
* @param   Connection con
* @return  MaquinaDB[]
*/

	public MaquinaDB[] findByMarca(long marca, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina where marca = ? order by marca";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, marca );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquina table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  MaquinaDB[]
*/

	public MaquinaDB[] findByDescripcion(String descripcion, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquina table where ESTADO= estado
*
* @param   long  estado
* @param   Connection con
* @return  MaquinaDB[]
*/

	public MaquinaDB[] findByEstado(long estado, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina where estado = ? order by estado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, estado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquina table where TIPOMAQUINA= tipomaquina
*
* @param   long  tipomaquina
* @param   Connection con
* @return  MaquinaDB[]
*/

	public MaquinaDB[] findByTipomaquina(long tipomaquina, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina where tipomaquina = ? order by tipomaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, tipomaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
* Returns all rows from maquina table 
*
* @param Connection con
* @return  MaquinaDB[]
*
*/

	public MaquinaDB[] findAll( Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
* Returns rows from maquina table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  MaquinaDB[]
*
*/

	public MaquinaDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
* Returns rows from maquina table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  MaquinaDB[]
*
*/

	public MaquinaDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws MaquinaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idmaquina, nombre, marca, descripcion, estado, tipomaquina, fechaalta, fechabaja, tiempocapacidadproduccion, idunidadmedida from maquina";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaException(sqle);
			}
			catch(Exception e){
					throw new MaquinaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  MaquinaDB
*
*/

	protected MaquinaDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					MaquinaDB dto = new MaquinaDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param MaquinaDB dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(MaquinaDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdmaquina(rs.getLong("idmaquina"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setMarca(rs.getLong("marca"));
		 dto.setDescripcion(rs.getString("descripcion"));
		 dto.setEstado(rs.getLong("estado"));
		 dto.setTipomaquina(rs.getLong("tipomaquina"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  MaquinaDB[]
*/

	protected MaquinaDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			MaquinaDB dto = new MaquinaDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		MaquinaDB ret[] = new MaquinaDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
