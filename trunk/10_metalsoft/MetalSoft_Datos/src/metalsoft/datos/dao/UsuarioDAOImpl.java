/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:05 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of UsuarioDAO interface 
* 
*/


public class UsuarioDAOImpl implements UsuarioDAO
{


/**
* Method deletes a record from table USUARIO
* @param UsuarioPK usuariopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(UsuarioPK usuariopk , Connection con)throws UsuarioException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  USUARIO where idusuario = ?");
			ps.setLong(1, usuariopk.getIdusuario());
                        int id=ps.executeUpdate();
			return id;
		}catch(SQLException sqle) {throw new UsuarioException(sqle);}
		catch(Exception e) {throw new UsuarioException(e);}
	}



/**
* This method updates a record in table USUARIO
* @param UsuarioPK
* @param Usuario
* @param  Connection con
* @return   int
*/

	public int update(UsuarioPK usuariopk, Usuario usuario, Connection con)throws UsuarioException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update USUARIO set USUARIO = ? , CLAVE = ?  where idusuario = ?");
				ps.setString(1,usuario.getUsuario());
				ps.setString(2,usuario.getClave());
				ps.setLong(3,usuariopk.getIdusuario());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new UsuarioException(sqle);}
		catch(Exception e){throw new UsuarioException(e);}
	}

/**
* This method inserts data in table USUARIO
*
* @param Usuario usuario
* @param   Connection con
* @return  UsuarioPK
*/

	public int insert(Usuario usuario ,Connection con)throws UsuarioException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into USUARIO( USUARIO, CLAVE) values (?, ?)");
				ps.setString(1,usuario.getUsuario());
				ps.setString(2,usuario.getClave());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new UsuarioException(sqle);}
		catch(Exception e){throw new UsuarioException(e);}
	}

/**
* 
* Returns a row from the Usuario table for the primary key passed as parameter.
* 
*/

	public Usuario findByPrimaryKey(long idusuario, Connection con) throws UsuarioException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idusuario, usuario, clave from usuario where idusuario = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idusuario);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new UsuarioException(sqle);
	  	}
	    catch(Exception e){throw new UsuarioException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the Usuario table for the primary key object passed as parameter.
* 
* @param  UsuarioPK usuariopk
* @param Connection con
* @return  Usuario
*/

	public Usuario findByPrimaryKey(UsuarioPK usuariopk, Connection con) throws UsuarioException{
		return findByPrimaryKey(usuariopk.getIdusuario(), con);
	}

/**
*
* Returns all rows from usuario table where IDUSUARIO= idusuario
*
* @param   long  idusuario
* @param   Connection con
* @return  Usuario[]
*/

	public Usuario[] findByIdusuario(long idusuario, Connection con) throws UsuarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idusuario, usuario, clave from usuario where idusuario = ? order by idusuario";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idusuario );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new UsuarioException(sqle);
			}
			catch(Exception e){
					throw new UsuarioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from usuario table where USUARIO= usuario
*
* @param   String  usuario
* @param   Connection con
* @return  Usuario[]
*/

	public Usuario[] findByUsuario(String usuario, Connection con) throws UsuarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idusuario, usuario, clave from usuario where usuario = ? order by usuario";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, usuario );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new UsuarioException(sqle);
			}
			catch(Exception e){
					throw new UsuarioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from usuario table where CLAVE= clave
*
* @param   String  clave
* @param   Connection con
* @return  Usuario[]
*/

	public Usuario[] findByClave(String clave, Connection con) throws UsuarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idusuario, usuario, clave from usuario where clave = ? order by clave";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, clave );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new UsuarioException(sqle);
			}
			catch(Exception e){
					throw new UsuarioException(e);
			}
			finally{}
	}

/**
* Returns all rows from Usuario table 
*
* @param Connection con
* @return  Usuario[]
*
*/

	public Usuario[] findAll( Connection con) throws UsuarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idusuario, usuario, clave from usuario";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new UsuarioException(sqle);
			}
			catch(Exception e){
					throw new UsuarioException(e);
			}
			finally{}
	}

/**
* Returns rows from Usuario table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Usuario[]
*
*/

	public Usuario[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws UsuarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new UsuarioException(sqle);
			}
			catch(Exception e){
					throw new UsuarioException(e);
			}
			finally{}
	}

/**
* Returns rows from Usuario table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Usuario[]
*
*/

	public Usuario[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws UsuarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idusuario, usuario, clave from usuario";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new UsuarioException(sqle);
			}
			catch(Exception e){
					throw new UsuarioException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Usuario
*
*/

	protected Usuario fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Usuario dto = new Usuario();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Usuario dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Usuario dto, ResultSet rs) throws SQLException
	{
		 dto.setIdusuario(rs.getLong("idusuario"));
		 dto.setUsuario(rs.getString("usuario"));
		 dto.setClave(rs.getString("clave"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Usuario[]
*/

	protected Usuario[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Usuario dto = new Usuario();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Usuario ret[] = new Usuario[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
