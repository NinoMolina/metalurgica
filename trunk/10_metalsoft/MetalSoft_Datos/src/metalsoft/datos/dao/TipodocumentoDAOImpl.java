/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Jun 22 00:02:11 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of TipodocumentoDAO interface 
* 
*/


public class TipodocumentoDAOImpl implements TipodocumentoDAO
{


/**
* Method deletes a record from table TIPODOCUMENTO
* @param TipodocumentoPK tipodocumentopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(TipodocumentoPK tipodocumentopk , Connection con)throws TipodocumentoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  TIPODOCUMENTO where idtipodocumento = ?");
			ps.setLong(1, tipodocumentopk.getIdtipodocumento());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new TipodocumentoException(sqle);}
		catch(Exception e) {throw new TipodocumentoException(e);}
	}



/**
* This method updates a record in table TIPODOCUMENTO
* @param TipodocumentoPK
* @param Tipodocumento
* @param  Connection con
* @return   int
*/

	public int update(TipodocumentoPK tipodocumentopk, Tipodocumento tipodocumento, Connection con)throws TipodocumentoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update TIPODOCUMENTO set TIPO = ? , NOMBRE = ?  where idtipodocumento = ?");
				ps.setString(1,tipodocumento.getTipo());
				ps.setString(2,tipodocumento.getNombre());
				ps.setLong(3,tipodocumentopk.getIdtipodocumento());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new TipodocumentoException(sqle);}
		catch(Exception e){throw new TipodocumentoException(e);}
	}

/**
* This method inserts data in table TIPODOCUMENTO
*
* @param Tipodocumento tipodocumento
* @param   Connection con
* @return  TipodocumentoPK
*/

	public int insert(Tipodocumento tipodocumento ,Connection con)throws TipodocumentoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into TIPODOCUMENTO( IDTIPODOCUMENTO, TIPO, NOMBRE) values (?, ?, ?)");
				ps.setLong(1,tipodocumento.getIdtipodocumento());
				ps.setString(2,tipodocumento.getTipo());
				ps.setString(3,tipodocumento.getNombre());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new TipodocumentoException(sqle);}
		catch(Exception e){throw new TipodocumentoException(e);}
	}

/**
* 
* Returns a row from the tipodocumento table for the primary key passed as parameter.
* 
*/

	public Tipodocumento findByPrimaryKey(long idtipodocumento, Connection con) throws TipodocumentoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idtipodocumento, tipo, nombre from tipodocumento where idtipodocumento = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idtipodocumento);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new TipodocumentoException(sqle);
	  	}
	    catch(Exception e){throw new TipodocumentoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the tipodocumento table for the primary key object passed as parameter.
* 
* @param  TipodocumentoPK tipodocumentopk
* @param Connection con
* @return  Tipodocumento
*/

	public Tipodocumento findByPrimaryKey(TipodocumentoPK tipodocumentopk, Connection con) throws TipodocumentoException{
		return findByPrimaryKey(tipodocumentopk.getIdtipodocumento(), con);
	}

/**
*
* Returns all rows from tipodocumento table where IDTIPODOCUMENTO= idtipodocumento
*
* @param   long  idtipodocumento
* @param   Connection con
* @return  Tipodocumento[]
*/

	public Tipodocumento[] findByIdtipodocumento(long idtipodocumento, Connection con) throws TipodocumentoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipodocumento, tipo, nombre from tipodocumento where idtipodocumento = ? order by idtipodocumento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idtipodocumento );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TipodocumentoException(sqle);
			}
			catch(Exception e){
					throw new TipodocumentoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from tipodocumento table where TIPO= tipo
*
* @param   String  tipo
* @param   Connection con
* @return  Tipodocumento[]
*/

	public Tipodocumento[] findByTipo(String tipo, Connection con) throws TipodocumentoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipodocumento, tipo, nombre from tipodocumento where tipo = ? order by tipo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, tipo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TipodocumentoException(sqle);
			}
			catch(Exception e){
					throw new TipodocumentoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from tipodocumento table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Tipodocumento[]
*/

	public Tipodocumento[] findByNombre(String nombre, Connection con) throws TipodocumentoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipodocumento, tipo, nombre from tipodocumento where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TipodocumentoException(sqle);
			}
			catch(Exception e){
					throw new TipodocumentoException(e);
			}
			finally{}
	}

/**
* Returns all rows from tipodocumento table 
*
* @param Connection con
* @return  Tipodocumento[]
*
*/

	public Tipodocumento[] findAll( Connection con) throws TipodocumentoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipodocumento, tipo, nombre from tipodocumento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TipodocumentoException(sqle);
			}
			catch(Exception e){
					throw new TipodocumentoException(e);
			}
			finally{}
	}

/**
* Returns rows from tipodocumento table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Tipodocumento[]
*
*/

	public Tipodocumento[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws TipodocumentoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TipodocumentoException(sqle);
			}
			catch(Exception e){
					throw new TipodocumentoException(e);
			}
			finally{}
	}

/**
* Returns rows from tipodocumento table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Tipodocumento[]
*
*/

	public Tipodocumento[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws TipodocumentoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idtipodocumento, tipo, nombre from tipodocumento";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TipodocumentoException(sqle);
			}
			catch(Exception e){
					throw new TipodocumentoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Tipodocumento
*
*/

	protected Tipodocumento fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Tipodocumento dto = new Tipodocumento();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Tipodocumento dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Tipodocumento dto, ResultSet rs) throws SQLException
	{
		 dto.setIdtipodocumento(rs.getLong("idtipodocumento"));
		 dto.setTipo(rs.getString("tipo"));
		 dto.setNombre(rs.getString("nombre"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Tipodocumento[]
*/

	protected Tipodocumento[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Tipodocumento dto = new Tipodocumento();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Tipodocumento ret[] = new Tipodocumento[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
