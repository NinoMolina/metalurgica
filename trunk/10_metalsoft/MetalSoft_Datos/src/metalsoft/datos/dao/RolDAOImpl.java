/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Jun 22 00:02:11 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of RolDAO interface 
* 
*/


public class RolDAOImpl implements RolDAO
{


/**
* Method deletes a record from table ROL
* @param RolPK rolpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(RolPK rolpk , Connection con)throws RolException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  ROL where idrol = ?");
			ps.setLong(1, rolpk.getIdrol());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new RolException(sqle);}
		catch(Exception e) {throw new RolException(e);}
	}



/**
* This method updates a record in table ROL
* @param RolPK
* @param Rol
* @param  Connection con
* @return   int
*/

	public int update(RolPK rolpk, Rol rol, Connection con)throws RolException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update ROL set ROL = ? , DESCRIPCION = ?  where idrol = ?");
				ps.setString(1,rol.getRol());
				ps.setString(2,rol.getDescripcion());
				ps.setLong(3,rolpk.getIdrol());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new RolException(sqle);}
		catch(Exception e){throw new RolException(e);}
	}

/**
* This method inserts data in table ROL
*
* @param Rol rol
* @param   Connection con
* @return  RolPK
*/

	public int insert(Rol rol ,Connection con)throws RolException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into ROL( IDROL, ROL, DESCRIPCION) values (?, ?, ?)");
				ps.setLong(1,rol.getIdrol());
				ps.setString(2,rol.getRol());
				ps.setString(3,rol.getDescripcion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new RolException(sqle);}
		catch(Exception e){throw new RolException(e);}
	}

/**
* 
* Returns a row from the rol table for the primary key passed as parameter.
* 
*/

	public Rol findByPrimaryKey(long idrol, Connection con) throws RolException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idrol, rol, descripcion from rol where idrol = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idrol);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new RolException(sqle);
	  	}
	    catch(Exception e){throw new RolException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the rol table for the primary key object passed as parameter.
* 
* @param  RolPK rolpk
* @param Connection con
* @return  Rol
*/

	public Rol findByPrimaryKey(RolPK rolpk, Connection con) throws RolException{
		return findByPrimaryKey(rolpk.getIdrol(), con);
	}

/**
*
* Returns all rows from rol table where IDROL= idrol
*
* @param   long  idrol
* @param   Connection con
* @return  Rol[]
*/

	public Rol[] findByIdrol(long idrol, Connection con) throws RolException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idrol, rol, descripcion from rol where idrol = ? order by idrol";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idrol );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new RolException(sqle);
			}
			catch(Exception e){
					throw new RolException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from rol table where ROL= rol
*
* @param   String  rol
* @param   Connection con
* @return  Rol[]
*/

	public Rol[] findByRol(String rol, Connection con) throws RolException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idrol, rol, descripcion from rol where rol = ? order by rol";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, rol );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new RolException(sqle);
			}
			catch(Exception e){
					throw new RolException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from rol table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Rol[]
*/

	public Rol[] findByDescripcion(String descripcion, Connection con) throws RolException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idrol, rol, descripcion from rol where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new RolException(sqle);
			}
			catch(Exception e){
					throw new RolException(e);
			}
			finally{}
	}

/**
* Returns all rows from rol table 
*
* @param Connection con
* @return  Rol[]
*
*/

	public Rol[] findAll( Connection con) throws RolException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idrol, rol, descripcion from rol";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new RolException(sqle);
			}
			catch(Exception e){
					throw new RolException(e);
			}
			finally{}
	}

/**
* Returns rows from rol table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Rol[]
*
*/

	public Rol[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws RolException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new RolException(sqle);
			}
			catch(Exception e){
					throw new RolException(e);
			}
			finally{}
	}

/**
* Returns rows from rol table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Rol[]
*
*/

	public Rol[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws RolException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idrol, rol, descripcion from rol";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new RolException(sqle);
			}
			catch(Exception e){
					throw new RolException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Rol
*
*/

	protected Rol fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Rol dto = new Rol();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Rol dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Rol dto, ResultSet rs) throws SQLException
	{
		 dto.setIdrol(rs.getLong("idrol"));
		 dto.setRol(rs.getString("rol"));
		 dto.setDescripcion(rs.getString("descripcion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Rol[]
*/

	protected Rol[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Rol dto = new Rol();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Rol ret[] = new Rol[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
