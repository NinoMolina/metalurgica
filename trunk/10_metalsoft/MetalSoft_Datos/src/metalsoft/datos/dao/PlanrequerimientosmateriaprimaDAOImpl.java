/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Jun 22 00:40:17 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;

import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PlanrequerimientosmateriaprimaDAO interface 
* 
*/


public class PlanrequerimientosmateriaprimaDAOImpl implements PlanrequerimientosmateriaprimaDAO
{


/**
* Method deletes a record from table PLANREQUERIMIENTOSMATERIAPRIMA
* @param PlanrequerimientosmateriaprimaPK planrequerimientosmateriaprimapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PlanrequerimientosmateriaprimaPK planrequerimientosmateriaprimapk , Connection con)throws PlanrequerimientosmateriaprimaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PLANREQUERIMIENTOSMATERIAPRIMA where idplanrequerimientosmateriaprima = ?");
			ps.setLong(1, planrequerimientosmateriaprimapk.getIdplanrequerimientosmateriaprima());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PlanrequerimientosmateriaprimaException(sqle);}
		catch(Exception e) {throw new PlanrequerimientosmateriaprimaException(e);}
	}



/**
* This method updates a record in table PLANREQUERIMIENTOSMATERIAPRIMA
* @param PlanrequerimientosmateriaprimaPK
* @param Planrequerimientosmateriaprima
* @param  Connection con
* @return   int
*/

	public int update(PlanrequerimientosmateriaprimaPK planrequerimientosmateriaprimapk, Planrequerimientosmateriaprima planrequerimientosmateriaprima, Connection con)throws PlanrequerimientosmateriaprimaException{
            return -1;
	}

/**
* This method inserts data in table PLANREQUERIMIENTOSMATERIAPRIMA
*
* @param Planrequerimientosmateriaprima planrequerimientosmateriaprima
* @param   Connection con
* @return  PlanrequerimientosmateriaprimaPK
*/

	public int insert(Planrequerimientosmateriaprima planrequerimientosmateriaprima ,Connection con)throws PlanrequerimientosmateriaprimaException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PLANREQUERIMIENTOSMATERIAPRIMA( IDPLANREQUERIMIENTOSMATERIAPRIMA) values (?)");
				ps.setLong(1,planrequerimientosmateriaprima.getIdplanrequerimientosmateriaprima());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PlanrequerimientosmateriaprimaException(sqle);}
		catch(Exception e){throw new PlanrequerimientosmateriaprimaException(e);}
	}

/**
* 
* Returns a row from the planrequerimientosmateriaprima table for the primary key passed as parameter.
* 
*/

	public Planrequerimientosmateriaprima findByPrimaryKey(long idplanrequerimientosmateriaprima, Connection con) throws PlanrequerimientosmateriaprimaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idplanrequerimientosmateriaprima from planrequerimientosmateriaprima where idplanrequerimientosmateriaprima = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idplanrequerimientosmateriaprima);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PlanrequerimientosmateriaprimaException(sqle);
	  	}
	    catch(Exception e){throw new PlanrequerimientosmateriaprimaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the planrequerimientosmateriaprima table for the primary key object passed as parameter.
* 
* @param  PlanrequerimientosmateriaprimaPK planrequerimientosmateriaprimapk
* @param Connection con
* @return  Planrequerimientosmateriaprima
*/

	public Planrequerimientosmateriaprima findByPrimaryKey(PlanrequerimientosmateriaprimaPK planrequerimientosmateriaprimapk, Connection con) throws PlanrequerimientosmateriaprimaException{
		return findByPrimaryKey(planrequerimientosmateriaprimapk.getIdplanrequerimientosmateriaprima(), con);
	}

/**
*
* Returns all rows from planrequerimientosmateriaprima table where IDPLANREQUERIMIENTOSMATERIAPRIMA= idplanrequerimientosmateriaprima
*
* @param   long  idplanrequerimientosmateriaprima
* @param   Connection con
* @return  Planrequerimientosmateriaprima[]
*/

	public Planrequerimientosmateriaprima[] findByIdplanrequerimientosmateriaprima(long idplanrequerimientosmateriaprima, Connection con) throws PlanrequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanrequerimientosmateriaprima from planrequerimientosmateriaprima where idplanrequerimientosmateriaprima = ? order by idplanrequerimientosmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanrequerimientosmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanrequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new PlanrequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns all rows from planrequerimientosmateriaprima table 
*
* @param Connection con
* @return  Planrequerimientosmateriaprima[]
*
*/

	public Planrequerimientosmateriaprima[] findAll( Connection con) throws PlanrequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanrequerimientosmateriaprima from planrequerimientosmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanrequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new PlanrequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from planrequerimientosmateriaprima table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Planrequerimientosmateriaprima[]
*
*/

	public Planrequerimientosmateriaprima[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PlanrequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanrequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new PlanrequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from planrequerimientosmateriaprima table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Planrequerimientosmateriaprima[]
*
*/

	public Planrequerimientosmateriaprima[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PlanrequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idplanrequerimientosmateriaprima from planrequerimientosmateriaprima";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanrequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new PlanrequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Planrequerimientosmateriaprima
*
*/

	protected Planrequerimientosmateriaprima fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Planrequerimientosmateriaprima dto = new Planrequerimientosmateriaprima();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Planrequerimientosmateriaprima dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Planrequerimientosmateriaprima dto, ResultSet rs) throws SQLException
	{
		 dto.setIdplanrequerimientosmateriaprima(rs.getLong("idplanrequerimientosmateriaprima"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Planrequerimientosmateriaprima[]
*/

	protected Planrequerimientosmateriaprima[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Planrequerimientosmateriaprima dto = new Planrequerimientosmateriaprima();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Planrequerimientosmateriaprima ret[] = new Planrequerimientosmateriaprima[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
