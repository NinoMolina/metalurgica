/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:40:19 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of TpomateriaprimaDAO interface 
* 
*/


public class TpomateriaprimaDAOImpl implements TpomateriaprimaDAO
{


/**
* Method deletes a record from table TPOMATERIAPRIMA
* @param TpomateriaprimaPK tpomateriaprimapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(TpomateriaprimaPK tpomateriaprimapk , Connection con)throws TpomateriaprimaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  TPOMATERIAPRIMA where idtipomateriaprima = ?");
			ps.setLong(1, tpomateriaprimapk.getIdtipomateriaprima());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new TpomateriaprimaException(sqle);}
		catch(Exception e) {throw new TpomateriaprimaException(e);}
	}



/**
* This method updates a record in table TPOMATERIAPRIMA
* @param TpomateriaprimaPK
* @param Tpomateriaprima
* @param  Connection con
* @return   int
*/

	public int update(TpomateriaprimaPK tpomateriaprimapk, Tpomateriaprima tpomateriaprima, Connection con)throws TpomateriaprimaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update TPOMATERIAPRIMA set NOMBRE = ? , DESCRIPCION = ?  where idtipomateriaprima = ?");
				ps.setString(1,tpomateriaprima.getNombre());
				ps.setString(2,tpomateriaprima.getDescripcion());
				ps.setLong(3,tpomateriaprimapk.getIdtipomateriaprima());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new TpomateriaprimaException(sqle);}
		catch(Exception e){throw new TpomateriaprimaException(e);}
	}

/**
* This method inserts data in table TPOMATERIAPRIMA
*
* @param Tpomateriaprima tpomateriaprima
* @param   Connection con
* @return  TpomateriaprimaPK
*/

	public int insert(Tpomateriaprima tpomateriaprima ,Connection con)throws TpomateriaprimaException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into TPOMATERIAPRIMA( IDTIPOMATERIAPRIMA, NOMBRE, DESCRIPCION) values (?, ?, ?)");
				ps.setLong(1,tpomateriaprima.getIdtipomateriaprima());
				ps.setString(2,tpomateriaprima.getNombre());
				ps.setString(3,tpomateriaprima.getDescripcion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new TpomateriaprimaException(sqle);}
		catch(Exception e){throw new TpomateriaprimaException(e);}
	}

/**
* 
* Returns a row from the tpomateriaprima table for the primary key passed as parameter.
* 
*/

	public Tpomateriaprima findByPrimaryKey(long idtipomateriaprima, Connection con) throws TpomateriaprimaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idtipomateriaprima, nombre, descripcion from tpomateriaprima where idtipomateriaprima = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idtipomateriaprima);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new TpomateriaprimaException(sqle);
	  	}
	    catch(Exception e){throw new TpomateriaprimaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the tpomateriaprima table for the primary key object passed as parameter.
* 
* @param  TpomateriaprimaPK tpomateriaprimapk
* @param Connection con
* @return  Tpomateriaprima
*/

	public Tpomateriaprima findByPrimaryKey(TpomateriaprimaPK tpomateriaprimapk, Connection con) throws TpomateriaprimaException{
		return findByPrimaryKey(tpomateriaprimapk.getIdtipomateriaprima(), con);
	}

/**
*
* Returns all rows from tpomateriaprima table where IDTIPOMATERIAPRIMA= idtipomateriaprima
*
* @param   long  idtipomateriaprima
* @param   Connection con
* @return  Tpomateriaprima[]
*/

	public Tpomateriaprima[] findByIdtipomateriaprima(long idtipomateriaprima, Connection con) throws TpomateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipomateriaprima, nombre, descripcion from tpomateriaprima where idtipomateriaprima = ? order by idtipomateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idtipomateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TpomateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new TpomateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from tpomateriaprima table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Tpomateriaprima[]
*/

	public Tpomateriaprima[] findByNombre(String nombre, Connection con) throws TpomateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipomateriaprima, nombre, descripcion from tpomateriaprima where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TpomateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new TpomateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from tpomateriaprima table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Tpomateriaprima[]
*/

	public Tpomateriaprima[] findByDescripcion(String descripcion, Connection con) throws TpomateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipomateriaprima, nombre, descripcion from tpomateriaprima where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TpomateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new TpomateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns all rows from tpomateriaprima table 
*
* @param Connection con
* @return  Tpomateriaprima[]
*
*/

	public Tpomateriaprima[] findAll( Connection con) throws TpomateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idtipomateriaprima, nombre, descripcion from tpomateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TpomateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new TpomateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from tpomateriaprima table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Tpomateriaprima[]
*
*/

	public Tpomateriaprima[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws TpomateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TpomateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new TpomateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from tpomateriaprima table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Tpomateriaprima[]
*
*/

	public Tpomateriaprima[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws TpomateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idtipomateriaprima, nombre, descripcion from tpomateriaprima";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new TpomateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new TpomateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Tpomateriaprima
*
*/

	protected Tpomateriaprima fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Tpomateriaprima dto = new Tpomateriaprima();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Tpomateriaprima dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Tpomateriaprima dto, ResultSet rs) throws SQLException
	{
		 dto.setIdtipomateriaprima(rs.getLong("idtipomateriaprima"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setDescripcion(rs.getString("descripcion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Tpomateriaprima[]
*/

	protected Tpomateriaprima[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Tpomateriaprima dto = new Tpomateriaprima();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Tpomateriaprima ret[] = new Tpomateriaprima[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
