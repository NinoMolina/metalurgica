/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 28 01:02:39 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of MateriaprimaDAO interface 
* 
*/


public class MateriaprimaDAOImpl implements MateriaprimaDAO
{


/**
* Method deletes a record from table MATERIAPRIMA
* @param MateriaprimaPK materiaprimapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(MateriaprimaPK materiaprimapk , Connection con)throws MateriaprimaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  MATERIAPRIMA where idmateriaprima = ?");
			ps.setLong(1, materiaprimapk.getIdmateriaprima());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new MateriaprimaException(sqle);}
		catch(Exception e) {throw new MateriaprimaException(e);}
	}



/**
* This method updates a record in table MATERIAPRIMA
* @param MateriaprimaPK
* @param MateriaprimaDB
* @param  Connection con
* @return   int
*/

	public int update(MateriaprimaPK materiaprimapk, MateriaprimaDB materiaprima, Connection con)throws MateriaprimaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update MATERIAPRIMA set CODPRODUCTO = ? , NOMBRE = ? , FECHAALTA = ? , FECHABAJA = ? , CODBARRA = ? , ALTO = ? , STOCK = ? , UNIDADMEDIDA = ? , DESCRIPCION = ? , TIPOMATERIAL = ?, LARGO = ?, ANCHO = ?  where idmateriaprima = ?");
				ps.setLong(1,materiaprima.getCodproducto());
				ps.setString(2,materiaprima.getNombre());
				ps.setDate(3,materiaprima.getFechaalta());
				ps.setDate(4,materiaprima.getFechabaja());
                long id5=materiaprima.getCodbarra();
                if(id5>0) ps.setLong(5,materiaprima.getCodbarra());
                else ps.setNull(5,java.sql.Types.NULL);
				
				ps.setDouble(6,materiaprima.getAlto());
				ps.setLong(7,materiaprima.getStock());
                long id8=materiaprima.getUnidaddemedida();
                if(id8>0) ps.setLong(8,materiaprima.getUnidaddemedida());
                else ps.setNull(8,java.sql.Types.NULL);
				
				ps.setString(9,materiaprima.getDescripcion());
                long id10=materiaprima.getTipomaterial();
                if(id10>0) ps.setLong(10,materiaprima.getTipomaterial());
                else ps.setNull(10,java.sql.Types.NULL);
				
                ps.setDouble(11,materiaprima.getLargo());
                ps.setDouble(12,materiaprima.getAncho());
				ps.setLong(13,materiaprimapk.getIdmateriaprima());


				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MateriaprimaException(sqle);}
		catch(Exception e){throw new MateriaprimaException(e);}
	}

/**
* This method inserts data in table MATERIAPRIMA
*
* @param MateriaprimaDB materiaprima
* @param   Connection con
* @return  MateriaprimaPK
*/

	public int insert(MateriaprimaDB materiaprima ,Connection con)throws MateriaprimaException {

		PreparedStatement ps = null;
        ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into MATERIAPRIMA( CODPRODUCTO, NOMBRE, FECHAALTA, FECHABAJA, CODBARRA, ALTO, STOCK, UNIDADMEDIDA, DESCRIPCION, TIPOMATERIAL, LARGO, ANCHO) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING IDMATERIAPRIMA");
				ps.setLong(1,materiaprima.getCodproducto());
				ps.setString(2,materiaprima.getNombre());
				ps.setDate(3,materiaprima.getFechaalta());
				ps.setDate(4,materiaprima.getFechabaja());
				//ps.setLong(5,materiaprima.getCodbarra());
                long id5=materiaprima.getCodbarra();
                if(id5>0) ps.setLong(5,materiaprima.getCodbarra());
                else ps.setNull(5,java.sql.Types.NULL);

				ps.setDouble(6,materiaprima.getAlto());
				ps.setLong(7,materiaprima.getStock());
                long id8=materiaprima.getUnidaddemedida();
                if(id8>0) ps.setLong(8,materiaprima.getUnidaddemedida());
                else ps.setNull(8,java.sql.Types.NULL);

				ps.setString(9,materiaprima.getDescripcion());
                long id10=materiaprima.getTipomaterial();
                if(id10>0) ps.setLong(10,materiaprima.getTipomaterial());
                else ps.setNull(10,java.sql.Types.NULL);
				//ps.setDouble(6,materiaprima.getAlto());
				//ps.setLong(7,materiaprima.getStock());
				//ps.setLong(8,materiaprima.getUnidaddemedida());
				//ps.setString(9,materiaprima.getDescripcion());
				//ps.setLong(10,materiaprima.getTipomaterial());
                ps.setDouble(11,materiaprima.getLargo());
                ps.setDouble(12,materiaprima.getAncho());
                rs=ps.executeQuery();
                rs.next();
				return (int) rs.getLong(1);
		}catch(SQLException sqle){throw new MateriaprimaException(sqle);}
		catch(Exception e){throw new MateriaprimaException(e);}
	}

/**
* 
* Returns a row from the materiaprima table for the primary key passed as parameter.
* 
*/

	public MateriaprimaDB findByPrimaryKey(long idmateriaprima, Connection con) throws MateriaprimaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where idmateriaprima = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idmateriaprima);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new MateriaprimaException(sqle);
	  	}
	    catch(Exception e){throw new MateriaprimaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the materiaprima table for the primary key object passed as parameter.
* 
* @param  MateriaprimaPK materiaprimapk
* @param Connection con
* @return  MateriaprimaDB
*/

	public MateriaprimaDB findByPrimaryKey(MateriaprimaPK materiaprimapk, Connection con) throws MateriaprimaException{
		return findByPrimaryKey(materiaprimapk.getIdmateriaprima(), con);
	}

/**
*
* Returns all rows from materiaprima table where IDMATERIAPRIMA= idmateriaprima
*
* @param   long  idmateriaprima
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByIdmateriaprima(long idmateriaprima, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where idmateriaprima = ? order by idmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where CODPRODUCTO= codproducto
*
* @param   long  codproducto
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByCodproducto(long codproducto, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where codproducto = ? order by codproducto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, codproducto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByNombre(String nombre, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where FECHAALTA= fechaalta
*
* @param   Date  fechaalta
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByFechaalta(Date fechaalta, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where fechaalta = ? order by fechaalta";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaalta );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where FECHABAJA= fechabaja
*
* @param   Date  fechabaja
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByFechabaja(Date fechabaja, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where fechabaja = ? order by fechabaja";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechabaja );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where CODBARRA= codbarra
*
* @param   long  codbarra
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByCodbarra(long codbarra, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where codbarra = ? order by codbarra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, codbarra );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where DIMENSIONES= dimensiones
*
* @param   String  dimensiones
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	

/**
*
* Returns all rows from materiaprima table where STOCK= stock
*
* @param   long  stock
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByStock(long stock, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where stock = ? order by stock";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, stock );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where UNIDADMEDIDA= unidadmedida
*
* @param   String  unidadmedida
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByUnidaddemedida(long unidaddemedida, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where unidadmedida = ? order by unidadmedida";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, unidaddemedida );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByDescripcion(String descripcion, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from materiaprima table where TIPOMATERIAL= tipomaterial
*
* @param   long  tipomaterial
* @param   Connection con
* @return  MateriaprimaDB[]
*/

	public MateriaprimaDB[] findByTipomaterial(long tipomaterial, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima where tipomaterial = ? order by tipomaterial";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, tipomaterial );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns all rows from materiaprima table 
*
* @param Connection con
* @return  MateriaprimaDB[]
*
*/

	public MateriaprimaDB[] findAll( Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from materiaprima table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  MateriaprimaDB[]
*
*/

	public MateriaprimaDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from materiaprima table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  MateriaprimaDB[]
*
*/

	public MateriaprimaDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws MateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idmateriaprima, codproducto, nombre, fechaalta, fechabaja, codbarra, alto, ancho, largo, stock, unidadmedida, descripcion, tipomaterial from materiaprima";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new MateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  MateriaprimaDB
*
*/

	protected MateriaprimaDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					MateriaprimaDB dto = new MateriaprimaDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param MateriaprimaDB dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(MateriaprimaDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdmateriaprima(rs.getLong("idmateriaprima"));
		 dto.setCodproducto(rs.getLong("codproducto"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setFechaalta(rs.getDate("fechaalta"));
		 dto.setFechabaja(rs.getDate("fechabaja"));
		 dto.setCodbarra(rs.getLong("codbarra"));
		 dto.setAlto(rs.getDouble("alto"));
         dto.setAncho(rs.getDouble("ancho"));
         dto.setLargo(rs.getDouble("largo"));
		 dto.setStock(rs.getLong("stock"));
		 dto.setUnidaddemedida(rs.getLong("unidadmedida"));
		 dto.setDescripcion(rs.getString("descripcion"));
		 dto.setTipomaterial(rs.getLong("tipomaterial"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  MateriaprimaDB[]
*/

	protected MateriaprimaDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			MateriaprimaDB dto = new MateriaprimaDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		MateriaprimaDB ret[] = new MateriaprimaDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
