/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Jun 22 00:40:14 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetalleplanprocesoscalidadDAO interface 
* 
*/


public class DetalleplanprocesoscalidadDAOImpl implements DetalleplanprocesoscalidadDAO
{


/**
* Method deletes a record from table DETALLEPLANPROCESOSCALIDAD
* @param DetalleplanprocesoscalidadPK detalleplanprocesoscalidadpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetalleplanprocesoscalidadPK detalleplanprocesoscalidadpk , Connection con)throws DetalleplanprocesoscalidadException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEPLANPROCESOSCALIDAD where iddetalle = ? AND idplanprocesoscalidad = ?");
			ps.setLong(1, detalleplanprocesoscalidadpk.getIddetalle());
			ps.setLong(2, detalleplanprocesoscalidadpk.getIdplanprocesoscalidad());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetalleplanprocesoscalidadException(sqle);}
		catch(Exception e) {throw new DetalleplanprocesoscalidadException(e);}
	}



/**
* This method updates a record in table DETALLEPLANPROCESOSCALIDAD
* @param DetalleplanprocesoscalidadPK
* @param Detalleplanprocesoscalidad
* @param  Connection con
* @return   int
*/

	public int update(DetalleplanprocesoscalidadPK detalleplanprocesoscalidadpk, Detalleplanprocesoscalidad detalleplanprocesoscalidad, Connection con)throws DetalleplanprocesoscalidadException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEPLANPROCESOSCALIDAD set IDPIEZA = ? , IDPROCESOCALIDAD = ? , DURACIONESTIMADA = ?  where iddetalle = ? AND idplanprocesoscalidad = ?");
				ps.setLong(1,detalleplanprocesoscalidad.getIdpieza());
				ps.setLong(2,detalleplanprocesoscalidad.getIdprocesocalidad());
				ps.setTime(3,detalleplanprocesoscalidad.getDuracionestimada());
				ps.setLong(4,detalleplanprocesoscalidadpk.getIddetalle());
				ps.setLong(5,detalleplanprocesoscalidadpk.getIdplanprocesoscalidad());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleplanprocesoscalidadException(sqle);}
		catch(Exception e){throw new DetalleplanprocesoscalidadException(e);}
	}

/**
* This method inserts data in table DETALLEPLANPROCESOSCALIDAD
*
* @param Detalleplanprocesoscalidad detalleplanprocesoscalidad
* @param   Connection con
* @return  DetalleplanprocesoscalidadPK
*/

	public int insert(Detalleplanprocesoscalidad detalleplanprocesoscalidad ,Connection con)throws DetalleplanprocesoscalidadException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEPLANPROCESOSCALIDAD( IDDETALLE, IDPLANPROCESOSCALIDAD, IDPIEZA, IDPROCESOCALIDAD, DURACIONESTIMADA) values (?, ?, ?, ?, ?)");
				ps.setLong(1,detalleplanprocesoscalidad.getIddetalle());
				ps.setLong(2,detalleplanprocesoscalidad.getIdplanprocesoscalidad());
				ps.setLong(3,detalleplanprocesoscalidad.getIdpieza());
				ps.setLong(4,detalleplanprocesoscalidad.getIdprocesocalidad());
				ps.setTime(5,detalleplanprocesoscalidad.getDuracionestimada());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleplanprocesoscalidadException(sqle);}
		catch(Exception e){throw new DetalleplanprocesoscalidadException(e);}
	}

/**
* 
* Returns a row from the detalleplanprocesoscalidad table for the primary key passed as parameter.
* 
*/

	public Detalleplanprocesoscalidad findByPrimaryKey(long iddetalle, long idplanprocesoscalidad, Connection con) throws DetalleplanprocesoscalidadException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad where iddetalle = ? AND idplanprocesoscalidad = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idplanprocesoscalidad);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetalleplanprocesoscalidadException(sqle);
	  	}
	    catch(Exception e){throw new DetalleplanprocesoscalidadException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detalleplanprocesoscalidad table for the primary key object passed as parameter.
* 
* @param  DetalleplanprocesoscalidadPK detalleplanprocesoscalidadpk
* @param Connection con
* @return  Detalleplanprocesoscalidad
*/

	public Detalleplanprocesoscalidad findByPrimaryKey(DetalleplanprocesoscalidadPK detalleplanprocesoscalidadpk, Connection con) throws DetalleplanprocesoscalidadException{
		return findByPrimaryKey(detalleplanprocesoscalidadpk.getIddetalle(), detalleplanprocesoscalidadpk.getIdplanprocesoscalidad(), con);
	}

/**
*
* Returns all rows from detalleplanprocesoscalidad table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detalleplanprocesoscalidad[]
*/

	public Detalleplanprocesoscalidad[] findByIddetalle(long iddetalle, Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocesoscalidad table where IDPLANPROCESOSCALIDAD= idplanprocesoscalidad
*
* @param   long  idplanprocesoscalidad
* @param   Connection con
* @return  Detalleplanprocesoscalidad[]
*/

	public Detalleplanprocesoscalidad[] findByIdplanprocesoscalidad(long idplanprocesoscalidad, Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad where idplanprocesoscalidad = ? order by idplanprocesoscalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanprocesoscalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocesoscalidad table where IDPIEZA= idpieza
*
* @param   long  idpieza
* @param   Connection con
* @return  Detalleplanprocesoscalidad[]
*/

	public Detalleplanprocesoscalidad[] findByIdpieza(long idpieza, Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad where idpieza = ? order by idpieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocesoscalidad table where IDPROCESOCALIDAD= idprocesocalidad
*
* @param   long  idprocesocalidad
* @param   Connection con
* @return  Detalleplanprocesoscalidad[]
*/

	public Detalleplanprocesoscalidad[] findByIdprocesocalidad(long idprocesocalidad, Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad where idprocesocalidad = ? order by idprocesocalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idprocesocalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocesoscalidad table where DURACIONESTIMADA= duracionestimada
*
* @param   Time  duracionestimada
* @param   Connection con
* @return  Detalleplanprocesoscalidad[]
*/

	public Detalleplanprocesoscalidad[] findByDuracionestimada(Time duracionestimada, Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad where duracionestimada = ? order by duracionestimada";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracionestimada );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
* Returns all rows from detalleplanprocesoscalidad table 
*
* @param Connection con
* @return  Detalleplanprocesoscalidad[]
*
*/

	public Detalleplanprocesoscalidad[] findAll( Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleplanprocesoscalidad table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleplanprocesoscalidad[]
*
*/

	public Detalleplanprocesoscalidad[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleplanprocesoscalidad table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleplanprocesoscalidad[]
*
*/

	public Detalleplanprocesoscalidad[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetalleplanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idplanprocesoscalidad, idpieza, idprocesocalidad, duracionestimada from detalleplanprocesoscalidad";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocesoscalidadException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detalleplanprocesoscalidad
*
*/

	protected Detalleplanprocesoscalidad fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detalleplanprocesoscalidad dto = new Detalleplanprocesoscalidad();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detalleplanprocesoscalidad dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detalleplanprocesoscalidad dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdplanprocesoscalidad(rs.getLong("idplanprocesoscalidad"));
		 dto.setIdpieza(rs.getLong("idpieza"));
		 dto.setIdprocesocalidad(rs.getLong("idprocesocalidad"));
		 dto.setDuracionestimada(rs.getTime("duracionestimada"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detalleplanprocesoscalidad[]
*/

	protected Detalleplanprocesoscalidad[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detalleplanprocesoscalidad dto = new Detalleplanprocesoscalidad();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detalleplanprocesoscalidad ret[] = new Detalleplanprocesoscalidad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
