/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Aug 30 13:24:00 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallepiezapresupuestoDAO interface 
* 
*/


public class DetallepiezapresupuestoDAOImpl implements DetallepiezapresupuestoDAO
{


/**
* Method deletes a record from table DETALLEPIEZAPRESUPUESTO
* @param DetallepiezapresupuestoPK detallepiezapresupuestopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallepiezapresupuestoPK detallepiezapresupuestopk , Connection con)throws DetallepiezapresupuestoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEPIEZAPRESUPUESTO where iddetalle = ?");
			ps.setLong(1, detallepiezapresupuestopk.getIddetalle());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallepiezapresupuestoException(sqle);}
		catch(Exception e) {throw new DetallepiezapresupuestoException(e);}
	}



/**
* This method updates a record in table DETALLEPIEZAPRESUPUESTO
* @param DetallepiezapresupuestoPK
* @param Detallepiezapresupuesto
* @param  Connection con
* @return   int
*/

	public int update(DetallepiezapresupuestoPK detallepiezapresupuestopk, Detallepiezapresupuesto detallepiezapresupuesto, Connection con)throws DetallepiezapresupuestoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEPIEZAPRESUPUESTO set DURACIONPIEZAXETAPA = ? , IDETAPA = ? , IDDETALLEPRODUCTOPRESUPUESTO = ?  where iddetalle = ?");
				ps.setTime(1,detallepiezapresupuesto.getDuracionpiezaxetapa());
				ps.setLong(2,detallepiezapresupuesto.getIdetapa());
				ps.setLong(3,detallepiezapresupuesto.getIddetalleproductopresupuesto());
				ps.setLong(4,detallepiezapresupuestopk.getIddetalle());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallepiezapresupuestoException(sqle);}
		catch(Exception e){throw new DetallepiezapresupuestoException(e);}
	}

/**
* This method inserts data in table DETALLEPIEZAPRESUPUESTO
*
* @param Detallepiezapresupuesto detallepiezapresupuesto
* @param   Connection con
* @return  DetallepiezapresupuestoPK
*/

	public int insert(Detallepiezapresupuesto detallepiezapresupuesto ,Connection con)throws DetallepiezapresupuestoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEPIEZAPRESUPUESTO( DURACIONPIEZAXETAPA, IDETAPA, IDDETALLEPRODUCTOPRESUPUESTO) values (?, ?, ?)");
				ps.setTime(1,detallepiezapresupuesto.getDuracionpiezaxetapa());
				ps.setLong(2,detallepiezapresupuesto.getIdetapa());
				ps.setLong(3,detallepiezapresupuesto.getIddetalleproductopresupuesto());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallepiezapresupuestoException(sqle);}
		catch(Exception e){throw new DetallepiezapresupuestoException(e);}
	}

/**
* 
* Returns a row from the detallepiezapresupuesto table for the primary key passed as parameter.
* 
*/

	public Detallepiezapresupuesto findByPrimaryKey(long iddetalle, Connection con) throws DetallepiezapresupuestoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select duracionpiezaxetapa, iddetalle, idetapa, iddetalleproductopresupuesto from detallepiezapresupuesto where iddetalle = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallepiezapresupuestoException(sqle);
	  	}
	    catch(Exception e){throw new DetallepiezapresupuestoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallepiezapresupuesto table for the primary key object passed as parameter.
* 
* @param  DetallepiezapresupuestoPK detallepiezapresupuestopk
* @param Connection con
* @return  Detallepiezapresupuesto
*/

	public Detallepiezapresupuesto findByPrimaryKey(DetallepiezapresupuestoPK detallepiezapresupuestopk, Connection con) throws DetallepiezapresupuestoException{
		return findByPrimaryKey(detallepiezapresupuestopk.getIddetalle(), con);
	}

/**
*
* Returns all rows from detallepiezapresupuesto table where DURACIONPIEZAXETAPA= duracionpiezaxetapa
*
* @param   Time  duracionpiezaxetapa
* @param   Connection con
* @return  Detallepiezapresupuesto[]
*/

	public Detallepiezapresupuesto[] findByDuracionpiezaxetapa(Time duracionpiezaxetapa, Connection con) throws DetallepiezapresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select duracionpiezaxetapa, iddetalle, idetapa, iddetalleproductopresupuesto from detallepiezapresupuesto where duracionpiezaxetapa = ? order by duracionpiezaxetapa";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracionpiezaxetapa );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezapresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezapresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepiezapresupuesto table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallepiezapresupuesto[]
*/

	public Detallepiezapresupuesto[] findByIddetalle(long iddetalle, Connection con) throws DetallepiezapresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select duracionpiezaxetapa, iddetalle, idetapa, iddetalleproductopresupuesto from detallepiezapresupuesto where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezapresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezapresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepiezapresupuesto table where IDETAPA= idetapa
*
* @param   long  idetapa
* @param   Connection con
* @return  Detallepiezapresupuesto[]
*/

	public Detallepiezapresupuesto[] findByIdetapa(long idetapa, Connection con) throws DetallepiezapresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select duracionpiezaxetapa, iddetalle, idetapa, iddetalleproductopresupuesto from detallepiezapresupuesto where idetapa = ? order by idetapa";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapa );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezapresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezapresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepiezapresupuesto table where IDDETALLEPRODUCTOPRESUPUESTO= iddetalleproductopresupuesto
*
* @param   long  iddetalleproductopresupuesto
* @param   Connection con
* @return  Detallepiezapresupuesto[]
*/

	public Detallepiezapresupuesto[] findByIddetalleproductopresupuesto(long iddetalleproductopresupuesto, Connection con) throws DetallepiezapresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select duracionpiezaxetapa, iddetalle, idetapa, iddetalleproductopresupuesto from detallepiezapresupuesto where iddetalleproductopresupuesto = ? order by iddetalleproductopresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalleproductopresupuesto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezapresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezapresupuestoException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallepiezapresupuesto table 
*
* @param Connection con
* @return  Detallepiezapresupuesto[]
*
*/

	public Detallepiezapresupuesto[] findAll( Connection con) throws DetallepiezapresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select duracionpiezaxetapa, iddetalle, idetapa, iddetalleproductopresupuesto from detallepiezapresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezapresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezapresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallepiezapresupuesto table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallepiezapresupuesto[]
*
*/

	public Detallepiezapresupuesto[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallepiezapresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezapresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezapresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallepiezapresupuesto table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallepiezapresupuesto[]
*
*/

	public Detallepiezapresupuesto[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallepiezapresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select duracionpiezaxetapa, iddetalle, idetapa, iddetalleproductopresupuesto from detallepiezapresupuesto";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepiezapresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepiezapresupuestoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallepiezapresupuesto
*
*/

	protected Detallepiezapresupuesto fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallepiezapresupuesto dto = new Detallepiezapresupuesto();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallepiezapresupuesto dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallepiezapresupuesto dto, ResultSet rs) throws SQLException
	{
		 dto.setDuracionpiezaxetapa(rs.getTime("duracionpiezaxetapa"));
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdetapa(rs.getLong("idetapa"));
		 dto.setIddetalleproductopresupuesto(rs.getLong("iddetalleproductopresupuesto"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallepiezapresupuesto[]
*/

	protected Detallepiezapresupuesto[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallepiezapresupuesto dto = new Detallepiezapresupuesto();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallepiezapresupuesto ret[] = new Detallepiezapresupuesto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
