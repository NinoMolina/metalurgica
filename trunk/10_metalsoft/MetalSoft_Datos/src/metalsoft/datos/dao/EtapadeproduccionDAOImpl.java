/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of EtapadeproduccionDAO interface 
* 
*/


public class EtapadeproduccionDAOImpl implements EtapadeproduccionDAO
{


/**
* Method deletes a record from table ETAPADEPRODUCCION
* @param EtapadeproduccionPK etapadeproduccionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(EtapadeproduccionPK etapadeproduccionpk , Connection con)throws EtapadeproduccionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  ETAPADEPRODUCCION where idetapaproduccion = ?");
			ps.setLong(1, etapadeproduccionpk.getIdetapaproduccion());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new EtapadeproduccionException(sqle);}
		catch(Exception e) {throw new EtapadeproduccionException(e);}
	}



/**
* This method updates a record in table ETAPADEPRODUCCION
* @param EtapadeproduccionPK
* @param EtapadeproduccionDB
* @param  Connection con
* @return   int
*/

	public int update(EtapadeproduccionPK etapadeproduccionpk, EtapadeproduccionDB etapadeproduccion, Connection con)throws EtapadeproduccionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update ETAPADEPRODUCCION set NROETAPAPRODUCCION = ? , NOMBRE = ? , HORASMAQUINA = ? , HORASHOMBRE = ? , MAQUINA = ? , DURACIONESTIMADA = ? , FECHACREACION = ?  where idetapaproduccion = ?");
				ps.setLong(1,etapadeproduccion.getNroetapaproduccion());
				ps.setString(2,etapadeproduccion.getNombre());
				ps.setTime(3,etapadeproduccion.getHorasmaquina());
				ps.setTime(4,etapadeproduccion.getHorashombre());
				ps.setLong(5,etapadeproduccion.getMaquina());
				ps.setTime(6,etapadeproduccion.getDuracionestimada());
				ps.setDate(7,etapadeproduccion.getFechacreacion());
				ps.setLong(8,etapadeproduccionpk.getIdetapaproduccion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EtapadeproduccionException(sqle);}
		catch(Exception e){throw new EtapadeproduccionException(e);}
	}

/**
* This method inserts data in table ETAPADEPRODUCCION
*
* @param EtapadeproduccionDB etapadeproduccion
* @param   Connection con
* @return  EtapadeproduccionPK
*/

	public int insert(EtapadeproduccionDB etapadeproduccion ,Connection con)throws EtapadeproduccionException {

		PreparedStatement ps = null;
        ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into ETAPADEPRODUCCION( NROETAPAPRODUCCION, NOMBRE, HORASMAQUINA, HORASHOMBRE, MAQUINA, DURACIONESTIMADA, FECHACREACION) values (?, ?, ?, ?, ?, ?, ?)RETURNING idetapaproduccion");
				ps.setLong(1,etapadeproduccion.getNroetapaproduccion());
				ps.setString(2,etapadeproduccion.getNombre());
				ps.setTime(3,etapadeproduccion.getHorasmaquina());
				ps.setTime(4,etapadeproduccion.getHorashombre());
				ps.setLong(5,etapadeproduccion.getMaquina());
				ps.setTime(6,etapadeproduccion.getDuracionestimada());
				ps.setDate(7,etapadeproduccion.getFechacreacion());

				rs=ps.executeQuery();
                rs.next();
                return (int)rs.getLong("idetapaproduccion");
		}catch(SQLException sqle){throw new EtapadeproduccionException(sqle);}
		catch(Exception e){throw new EtapadeproduccionException(e);}
	}

/**
* 
* Returns a row from the etapadeproduccion table for the primary key passed as parameter.
* 
*/

	public EtapadeproduccionDB findByPrimaryKey(long idetapaproduccion, Connection con) throws EtapadeproduccionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where idetapaproduccion = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idetapaproduccion);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new EtapadeproduccionException(sqle);
	  	}
	    catch(Exception e){throw new EtapadeproduccionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the etapadeproduccion table for the primary key object passed as parameter.
* 
* @param  EtapadeproduccionPK etapadeproduccionpk
* @param Connection con
* @return  EtapadeproduccionDB
*/

	public EtapadeproduccionDB findByPrimaryKey(EtapadeproduccionPK etapadeproduccionpk, Connection con) throws EtapadeproduccionException{
		return findByPrimaryKey(etapadeproduccionpk.getIdetapaproduccion(), con);
	}

/**
*
* Returns all rows from etapadeproduccion table where IDETAPAPRODUCCION= idetapaproduccion
*
* @param   long  idetapaproduccion
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByIdetapaproduccion(long idetapaproduccion, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where idetapaproduccion = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from etapadeproduccion table where NROETAPAPRODUCCION= nroetapaproduccion
*
* @param   long  nroetapaproduccion
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByNroetapaproduccion(long nroetapaproduccion, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where nroetapaproduccion = ? order by nroetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from etapadeproduccion table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByNombre(String nombre, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from etapadeproduccion table where HORASMAQUINA= horasmaquina
*
* @param   Time  horasmaquina
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByHorasmaquina(Time horasmaquina, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where horasmaquina = ? order by horasmaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horasmaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from etapadeproduccion table where HORASHOMBRE= horashombre
*
* @param   Time  horashombre
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByHorashombre(Time horashombre, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where horashombre = ? order by horashombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horashombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from etapadeproduccion table where MAQUINA= maquina
*
* @param   long  maquina
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByMaquina(long maquina, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where maquina = ? order by maquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, maquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from etapadeproduccion table where DURACIONESTIMADA= duracionestimada
*
* @param   Time  duracionestimada
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByDuracionestimada(Time duracionestimada, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where duracionestimada = ? order by duracionestimada";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracionestimada );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from etapadeproduccion table where FECHACREACION= fechacreacion
*
* @param   Date  fechacreacion
* @param   Connection con
* @return  EtapadeproduccionDB[]
*/

	public EtapadeproduccionDB[] findByFechacreacion(Date fechacreacion, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion where fechacreacion = ? order by fechacreacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechacreacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
* Returns all rows from etapadeproduccion table 
*
* @param Connection con
* @return  EtapadeproduccionDB[]
*
*/

	public EtapadeproduccionDB[] findAll( Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from etapadeproduccion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  EtapadeproduccionDB[]
*
*/

	public EtapadeproduccionDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from etapadeproduccion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  EtapadeproduccionDB[]
*
*/

	public EtapadeproduccionDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws EtapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idetapaproduccion, nroetapaproduccion, nombre, horasmaquina, horashombre, maquina, duracionestimada, fechacreacion from etapadeproduccion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EtapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new EtapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  EtapadeproduccionDB
*
*/

	protected EtapadeproduccionDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					EtapadeproduccionDB dto = new EtapadeproduccionDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param EtapadeproduccionDB dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(EtapadeproduccionDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdetapaproduccion(rs.getLong("idetapaproduccion"));
		 dto.setNroetapaproduccion(rs.getLong("nroetapaproduccion"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setHorasmaquina(rs.getTime("horasmaquina"));
		 dto.setHorashombre(rs.getTime("horashombre"));
		 dto.setMaquina(rs.getLong("maquina"));
		 dto.setDuracionestimada(rs.getTime("duracionestimada"));
		 dto.setFechacreacion(rs.getDate("fechacreacion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  EtapadeproduccionDB[]
*/

	protected EtapadeproduccionDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EtapadeproduccionDB dto = new EtapadeproduccionDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		EtapadeproduccionDB ret[] = new EtapadeproduccionDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
