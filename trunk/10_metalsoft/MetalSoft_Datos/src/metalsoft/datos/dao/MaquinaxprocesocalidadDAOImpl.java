/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of MaquinaxprocesocalidadDAO interface 
* 
*/


public class MaquinaxprocesocalidadDAOImpl implements MaquinaxprocesocalidadDAO
{


/**
* Method deletes a record from table MAQUINAXPROCESOCALIDAD
* @param MaquinaxprocesocalidadPK maquinaxprocesocalidadpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(MaquinaxprocesocalidadPK maquinaxprocesocalidadpk , Connection con)throws MaquinaxprocesocalidadException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  MAQUINAXPROCESOCALIDAD where idprocesocalidad = ? AND idmaquina = ?");
			ps.setLong(1, maquinaxprocesocalidadpk.getIdprocesocalidad());
			ps.setLong(2, maquinaxprocesocalidadpk.getIdmaquina());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new MaquinaxprocesocalidadException(sqle);}
		catch(Exception e) {throw new MaquinaxprocesocalidadException(e);}
	}



/**
* This method updates a record in table MAQUINAXPROCESOCALIDAD
* @param MaquinaxprocesocalidadPK
* @param Maquinaxprocesocalidad
* @param  Connection con
* @return   int
*/

	public int update(MaquinaxprocesocalidadPK maquinaxprocesocalidadpk, Maquinaxprocesocalidad maquinaxprocesocalidad, Connection con)throws MaquinaxprocesocalidadException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update MAQUINAXPROCESOCALIDAD set DURACION = ? , DESCRIPCION = ?  where idprocesocalidad = ? AND idmaquina = ?");
				ps.setTime(1,maquinaxprocesocalidad.getDuracion());
				ps.setString(2,maquinaxprocesocalidad.getDescripcion());
				ps.setLong(3,maquinaxprocesocalidadpk.getIdprocesocalidad());
				ps.setLong(4,maquinaxprocesocalidadpk.getIdmaquina());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MaquinaxprocesocalidadException(sqle);}
		catch(Exception e){throw new MaquinaxprocesocalidadException(e);}
	}

/**
* This method inserts data in table MAQUINAXPROCESOCALIDAD
*
* @param Maquinaxprocesocalidad maquinaxprocesocalidad
* @param   Connection con
* @return  MaquinaxprocesocalidadPK
*/

	public int insert(Maquinaxprocesocalidad maquinaxprocesocalidad ,Connection con)throws MaquinaxprocesocalidadException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into MAQUINAXPROCESOCALIDAD( IDPROCESOCALIDAD, IDMAQUINA, DURACION, DESCRIPCION) values (?, ?, ?, ?)");
				ps.setLong(1,maquinaxprocesocalidad.getIdprocesocalidad());
				ps.setLong(2,maquinaxprocesocalidad.getIdmaquina());
				ps.setTime(3,maquinaxprocesocalidad.getDuracion());
				ps.setString(4,maquinaxprocesocalidad.getDescripcion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MaquinaxprocesocalidadException(sqle);}
		catch(Exception e){throw new MaquinaxprocesocalidadException(e);}
	}

/**
* 
* Returns a row from the maquinaxprocesocalidad table for the primary key passed as parameter.
* 
*/

	public Maquinaxprocesocalidad findByPrimaryKey(long idprocesocalidad, long idmaquina, Connection con) throws MaquinaxprocesocalidadException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idprocesocalidad, idmaquina, duracion, descripcion from maquinaxprocesocalidad where idprocesocalidad = ? AND idmaquina = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idprocesocalidad);
	  		stmt.setLong(2, idmaquina);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new MaquinaxprocesocalidadException(sqle);
	  	}
	    catch(Exception e){throw new MaquinaxprocesocalidadException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the maquinaxprocesocalidad table for the primary key object passed as parameter.
* 
* @param  MaquinaxprocesocalidadPK maquinaxprocesocalidadpk
* @param Connection con
* @return  Maquinaxprocesocalidad
*/

	public Maquinaxprocesocalidad findByPrimaryKey(MaquinaxprocesocalidadPK maquinaxprocesocalidadpk, Connection con) throws MaquinaxprocesocalidadException{
		return findByPrimaryKey(maquinaxprocesocalidadpk.getIdprocesocalidad(), maquinaxprocesocalidadpk.getIdmaquina(), con);
	}

/**
*
* Returns all rows from maquinaxprocesocalidad table where IDPROCESOCALIDAD= idprocesocalidad
*
* @param   long  idprocesocalidad
* @param   Connection con
* @return  Maquinaxprocesocalidad[]
*/

	public Maquinaxprocesocalidad[] findByIdprocesocalidad(long idprocesocalidad, Connection con) throws MaquinaxprocesocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idprocesocalidad, idmaquina, duracion, descripcion from maquinaxprocesocalidad where idprocesocalidad = ? order by idprocesocalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idprocesocalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxprocesocalidadException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxprocesocalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquinaxprocesocalidad table where IDMAQUINA= idmaquina
*
* @param   long  idmaquina
* @param   Connection con
* @return  Maquinaxprocesocalidad[]
*/

	public Maquinaxprocesocalidad[] findByIdmaquina(long idmaquina, Connection con) throws MaquinaxprocesocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idprocesocalidad, idmaquina, duracion, descripcion from maquinaxprocesocalidad where idmaquina = ? order by idmaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxprocesocalidadException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxprocesocalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquinaxprocesocalidad table where DURACION= duracion
*
* @param   Time  duracion
* @param   Connection con
* @return  Maquinaxprocesocalidad[]
*/

	public Maquinaxprocesocalidad[] findByDuracion(Time duracion, Connection con) throws MaquinaxprocesocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idprocesocalidad, idmaquina, duracion, descripcion from maquinaxprocesocalidad where duracion = ? order by duracion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxprocesocalidadException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxprocesocalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquinaxprocesocalidad table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Maquinaxprocesocalidad[]
*/

	public Maquinaxprocesocalidad[] findByDescripcion(String descripcion, Connection con) throws MaquinaxprocesocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idprocesocalidad, idmaquina, duracion, descripcion from maquinaxprocesocalidad where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxprocesocalidadException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxprocesocalidadException(e);
			}
			finally{}
	}

/**
* Returns all rows from maquinaxprocesocalidad table 
*
* @param Connection con
* @return  Maquinaxprocesocalidad[]
*
*/

	public Maquinaxprocesocalidad[] findAll( Connection con) throws MaquinaxprocesocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idprocesocalidad, idmaquina, duracion, descripcion from maquinaxprocesocalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxprocesocalidadException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxprocesocalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from maquinaxprocesocalidad table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Maquinaxprocesocalidad[]
*
*/

	public Maquinaxprocesocalidad[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws MaquinaxprocesocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxprocesocalidadException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxprocesocalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from maquinaxprocesocalidad table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Maquinaxprocesocalidad[]
*
*/

	public Maquinaxprocesocalidad[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws MaquinaxprocesocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idprocesocalidad, idmaquina, duracion, descripcion from maquinaxprocesocalidad";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxprocesocalidadException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxprocesocalidadException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Maquinaxprocesocalidad
*
*/

	protected Maquinaxprocesocalidad fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Maquinaxprocesocalidad dto = new Maquinaxprocesocalidad();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Maquinaxprocesocalidad dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Maquinaxprocesocalidad dto, ResultSet rs) throws SQLException
	{
		 dto.setIdprocesocalidad(rs.getLong("idprocesocalidad"));
		 dto.setIdmaquina(rs.getLong("idmaquina"));
		 dto.setDuracion(rs.getTime("duracion"));
		 dto.setDescripcion(rs.getString("descripcion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Maquinaxprocesocalidad[]
*/

	protected Maquinaxprocesocalidad[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Maquinaxprocesocalidad dto = new Maquinaxprocesocalidad();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Maquinaxprocesocalidad ret[] = new Maquinaxprocesocalidad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
