/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:01 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallaplanificacionproduccionDAO interface 
* 
*/


public class DetallaplanificacionproduccionDAOImpl implements DetallaplanificacionproduccionDAO
{


/**
* Method deletes a record from table DETALLAPLANIFICACIONPRODUCCION
* @param DetallaplanificacionproduccionPK detallaplanificacionproduccionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallaplanificacionproduccionPK detallaplanificacionproduccionpk , Connection con)throws DetallaplanificacionproduccionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLAPLANIFICACIONPRODUCCION where iddetalle = ? AND idplanificacionproduccion = ?");
			ps.setLong(1, detallaplanificacionproduccionpk.getIddetalle());
			ps.setLong(2, detallaplanificacionproduccionpk.getIdplanificacionproduccion());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallaplanificacionproduccionException(sqle);}
		catch(Exception e) {throw new DetallaplanificacionproduccionException(e);}
	}



/**
* This method updates a record in table DETALLAPLANIFICACIONPRODUCCION
* @param DetallaplanificacionproduccionPK
* @param Detallaplanificacionproduccion
* @param  Connection con
* @return   int
*/

	public int update(DetallaplanificacionproduccionPK detallaplanificacionproduccionpk, Detallaplanificacionproduccion detallaplanificacionproduccion, Connection con)throws DetallaplanificacionproduccionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLAPLANIFICACIONPRODUCCION set IDDETALLEEJECUCIONPLANIFICACION = ? , IDEJECUCIONPLANIFICACIONPRODUCCION = ? , PIEZA = ? , EMPLEADO = ? , FECHAINICIO = ? , HORAINICIO = ? , FECHAFIN = ? , HORAFIN = ?  where iddetalle = ? AND idplanificacionproduccion = ?");
				ps.setLong(1,detallaplanificacionproduccion.getIddetalleejecucionplanificacion());
				ps.setLong(2,detallaplanificacionproduccion.getIdejecucionplanificacionproduccion());
				ps.setLong(3,detallaplanificacionproduccion.getPieza());
				ps.setLong(4,detallaplanificacionproduccion.getEmpleado());
				ps.setDate(5,detallaplanificacionproduccion.getFechainicio());
				ps.setTime(6,detallaplanificacionproduccion.getHorainicio());
				ps.setDate(7,detallaplanificacionproduccion.getFechafin());
				ps.setTime(8,detallaplanificacionproduccion.getHorafin());
				ps.setLong(9,detallaplanificacionproduccionpk.getIddetalle());
				ps.setLong(10,detallaplanificacionproduccionpk.getIdplanificacionproduccion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallaplanificacionproduccionException(sqle);}
		catch(Exception e){throw new DetallaplanificacionproduccionException(e);}
	}

/**
* This method inserts data in table DETALLAPLANIFICACIONPRODUCCION
*
* @param Detallaplanificacionproduccion detallaplanificacionproduccion
* @param   Connection con
* @return  DetallaplanificacionproduccionPK
*/

	public int insert(Detallaplanificacionproduccion detallaplanificacionproduccion ,Connection con)throws DetallaplanificacionproduccionException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLAPLANIFICACIONPRODUCCION( IDPLANIFICACIONPRODUCCION, IDDETALLEEJECUCIONPLANIFICACION, IDEJECUCIONPLANIFICACIONPRODUCCION, PIEZA, EMPLEADO, FECHAINICIO, HORAINICIO, FECHAFIN, HORAFIN) values (?, ?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,detallaplanificacionproduccion.getIdplanificacionproduccion());
				ps.setLong(2,detallaplanificacionproduccion.getIddetalleejecucionplanificacion());
				ps.setLong(3,detallaplanificacionproduccion.getIdejecucionplanificacionproduccion());
				ps.setLong(4,detallaplanificacionproduccion.getPieza());
				ps.setLong(5,detallaplanificacionproduccion.getEmpleado());
				ps.setDate(6,detallaplanificacionproduccion.getFechainicio());
				ps.setTime(7,detallaplanificacionproduccion.getHorainicio());
				ps.setDate(8,detallaplanificacionproduccion.getFechafin());
				ps.setTime(9,detallaplanificacionproduccion.getHorafin());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallaplanificacionproduccionException(sqle);}
		catch(Exception e){throw new DetallaplanificacionproduccionException(e);}
	}

/**
* 
* Returns a row from the detallaplanificacionproduccion table for the primary key passed as parameter.
* 
*/

	public Detallaplanificacionproduccion findByPrimaryKey(long iddetalle, long idplanificacionproduccion, Connection con) throws DetallaplanificacionproduccionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where iddetalle = ? AND idplanificacionproduccion = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idplanificacionproduccion);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallaplanificacionproduccionException(sqle);
	  	}
	    catch(Exception e){throw new DetallaplanificacionproduccionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallaplanificacionproduccion table for the primary key object passed as parameter.
* 
* @param  DetallaplanificacionproduccionPK detallaplanificacionproduccionpk
* @param Connection con
* @return  Detallaplanificacionproduccion
*/

	public Detallaplanificacionproduccion findByPrimaryKey(DetallaplanificacionproduccionPK detallaplanificacionproduccionpk, Connection con) throws DetallaplanificacionproduccionException{
		return findByPrimaryKey(detallaplanificacionproduccionpk.getIddetalle(), detallaplanificacionproduccionpk.getIdplanificacionproduccion(), con);
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByIddetalle(long iddetalle, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where IDPLANIFICACIONPRODUCCION= idplanificacionproduccion
*
* @param   long  idplanificacionproduccion
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByIdplanificacionproduccion(long idplanificacionproduccion, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where idplanificacionproduccion = ? order by idplanificacionproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanificacionproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where IDDETALLEEJECUCIONPLANIFICACION= iddetalleejecucionplanificacion
*
* @param   long  iddetalleejecucionplanificacion
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByIddetalleejecucionplanificacion(long iddetalleejecucionplanificacion, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where iddetalleejecucionplanificacion = ? order by iddetalleejecucionplanificacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalleejecucionplanificacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where IDEJECUCIONPLANIFICACIONPRODUCCION= idejecucionplanificacionproduccion
*
* @param   long  idejecucionplanificacionproduccion
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByIdejecucionplanificacionproduccion(long idejecucionplanificacionproduccion, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where idejecucionplanificacionproduccion = ? order by idejecucionplanificacionproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idejecucionplanificacionproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where PIEZA= pieza
*
* @param   long  pieza
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByPieza(long pieza, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where pieza = ? order by pieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, pieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where EMPLEADO= empleado
*
* @param   long  empleado
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByEmpleado(long empleado, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where empleado = ? order by empleado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, empleado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where FECHAINICIO= fechainicio
*
* @param   Date  fechainicio
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByFechainicio(Date fechainicio, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where fechainicio = ? order by fechainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where HORAINICIO= horainicio
*
* @param   Time  horainicio
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByHorainicio(Time horainicio, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where horainicio = ? order by horainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where FECHAFIN= fechafin
*
* @param   Date  fechafin
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByFechafin(Date fechafin, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where fechafin = ? order by fechafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallaplanificacionproduccion table where HORAFIN= horafin
*
* @param   Time  horafin
* @param   Connection con
* @return  Detallaplanificacionproduccion[]
*/

	public Detallaplanificacionproduccion[] findByHorafin(Time horafin, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion where horafin = ? order by horafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallaplanificacionproduccion table 
*
* @param Connection con
* @return  Detallaplanificacionproduccion[]
*
*/

	public Detallaplanificacionproduccion[] findAll( Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from detallaplanificacionproduccion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallaplanificacionproduccion[]
*
*/

	public Detallaplanificacionproduccion[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from detallaplanificacionproduccion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallaplanificacionproduccion[]
*
*/

	public Detallaplanificacionproduccion[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallaplanificacionproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idplanificacionproduccion, iddetalleejecucionplanificacion, idejecucionplanificacionproduccion, pieza, empleado, fechainicio, horainicio, fechafin, horafin from detallaplanificacionproduccion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallaplanificacionproduccionException(sqle);
			}
			catch(Exception e){
					throw new DetallaplanificacionproduccionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallaplanificacionproduccion
*
*/

	protected Detallaplanificacionproduccion fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallaplanificacionproduccion dto = new Detallaplanificacionproduccion();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallaplanificacionproduccion dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallaplanificacionproduccion dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdplanificacionproduccion(rs.getLong("idplanificacionproduccion"));
		 dto.setIddetalleejecucionplanificacion(rs.getLong("iddetalleejecucionplanificacion"));
		 dto.setIdejecucionplanificacionproduccion(rs.getLong("idejecucionplanificacionproduccion"));
		 dto.setPieza(rs.getLong("pieza"));
		 dto.setEmpleado(rs.getLong("empleado"));
		 dto.setFechainicio(rs.getDate("fechainicio"));
		 dto.setHorainicio(rs.getTime("horainicio"));
		 dto.setFechafin(rs.getDate("fechafin"));
		 dto.setHorafin(rs.getTime("horafin"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallaplanificacionproduccion[]
*/

	protected Detallaplanificacionproduccion[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallaplanificacionproduccion dto = new Detallaplanificacionproduccion();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallaplanificacionproduccion ret[] = new Detallaplanificacionproduccion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
