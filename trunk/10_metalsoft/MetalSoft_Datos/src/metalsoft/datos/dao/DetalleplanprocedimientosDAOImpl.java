/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Jun 22 00:40:14 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetalleplanprocedimientosDAO interface 
* 
*/


public class DetalleplanprocedimientosDAOImpl implements DetalleplanprocedimientosDAO
{


/**
* Method deletes a record from table DETALLEPLANPROCEDIMIENTOS
* @param DetalleplanprocedimientosPK detalleplanprocedimientospk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetalleplanprocedimientosPK detalleplanprocedimientospk , Connection con)throws DetalleplanprocedimientosException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEPLANPROCEDIMIENTOS where iddetalle = ? AND idplanpprocedimientos = ?");
			ps.setLong(1, detalleplanprocedimientospk.getIddetalle());
			ps.setLong(2, detalleplanprocedimientospk.getIdplanpprocedimientos());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetalleplanprocedimientosException(sqle);}
		catch(Exception e) {throw new DetalleplanprocedimientosException(e);}
	}



/**
* This method updates a record in table DETALLEPLANPROCEDIMIENTOS
* @param DetalleplanprocedimientosPK
* @param Detalleplanprocedimientos
* @param  Connection con
* @return   int
*/

	public int update(DetalleplanprocedimientosPK detalleplanprocedimientospk, Detalleplanprocedimientos detalleplanprocedimientos, Connection con)throws DetalleplanprocedimientosException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEPLANPROCEDIMIENTOS set IDPIEZA = ? , IDETAPAPRODUCCION = ? , DURACIONESTIMADA = ?  where iddetalle = ? AND idplanpprocedimientos = ?");
				ps.setLong(1,detalleplanprocedimientos.getIdpieza());
				ps.setLong(2,detalleplanprocedimientos.getIdetapaproduccion());
				ps.setTime(3,detalleplanprocedimientos.getDuracionestimada());
				ps.setLong(4,detalleplanprocedimientospk.getIddetalle());
				ps.setLong(5,detalleplanprocedimientospk.getIdplanpprocedimientos());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleplanprocedimientosException(sqle);}
		catch(Exception e){throw new DetalleplanprocedimientosException(e);}
	}

/**
* This method inserts data in table DETALLEPLANPROCEDIMIENTOS
*
* @param Detalleplanprocedimientos detalleplanprocedimientos
* @param   Connection con
* @return  DetalleplanprocedimientosPK
*/

	public int insert(Detalleplanprocedimientos detalleplanprocedimientos ,Connection con)throws DetalleplanprocedimientosException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEPLANPROCEDIMIENTOS( IDDETALLE, IDPLANPPROCEDIMIENTOS, IDPIEZA, IDETAPAPRODUCCION, DURACIONESTIMADA) values (?, ?, ?, ?, ?)");
				ps.setLong(1,detalleplanprocedimientos.getIddetalle());
				ps.setLong(2,detalleplanprocedimientos.getIdplanpprocedimientos());
				ps.setLong(3,detalleplanprocedimientos.getIdpieza());
				ps.setLong(4,detalleplanprocedimientos.getIdetapaproduccion());
				ps.setTime(5,detalleplanprocedimientos.getDuracionestimada());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleplanprocedimientosException(sqle);}
		catch(Exception e){throw new DetalleplanprocedimientosException(e);}
	}

/**
* 
* Returns a row from the detalleplanprocedimientos table for the primary key passed as parameter.
* 
*/

	public Detalleplanprocedimientos findByPrimaryKey(long iddetalle, long idplanpprocedimientos, Connection con) throws DetalleplanprocedimientosException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos where iddetalle = ? AND idplanpprocedimientos = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idplanpprocedimientos);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetalleplanprocedimientosException(sqle);
	  	}
	    catch(Exception e){throw new DetalleplanprocedimientosException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detalleplanprocedimientos table for the primary key object passed as parameter.
* 
* @param  DetalleplanprocedimientosPK detalleplanprocedimientospk
* @param Connection con
* @return  Detalleplanprocedimientos
*/

	public Detalleplanprocedimientos findByPrimaryKey(DetalleplanprocedimientosPK detalleplanprocedimientospk, Connection con) throws DetalleplanprocedimientosException{
		return findByPrimaryKey(detalleplanprocedimientospk.getIddetalle(), detalleplanprocedimientospk.getIdplanpprocedimientos(), con);
	}

/**
*
* Returns all rows from detalleplanprocedimientos table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detalleplanprocedimientos[]
*/

	public Detalleplanprocedimientos[] findByIddetalle(long iddetalle, Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocedimientos table where IDPLANPPROCEDIMIENTOS= idplanpprocedimientos
*
* @param   long  idplanpprocedimientos
* @param   Connection con
* @return  Detalleplanprocedimientos[]
*/

	public Detalleplanprocedimientos[] findByIdplanpprocedimientos(long idplanpprocedimientos, Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos where idplanpprocedimientos = ? order by idplanpprocedimientos";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanpprocedimientos );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocedimientos table where IDPIEZA= idpieza
*
* @param   long  idpieza
* @param   Connection con
* @return  Detalleplanprocedimientos[]
*/

	public Detalleplanprocedimientos[] findByIdpieza(long idpieza, Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos where idpieza = ? order by idpieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocedimientos table where IDETAPAPRODUCCION= idetapaproduccion
*
* @param   long  idetapaproduccion
* @param   Connection con
* @return  Detalleplanprocedimientos[]
*/

	public Detalleplanprocedimientos[] findByIdetapaproduccion(long idetapaproduccion, Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos where idetapaproduccion = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleplanprocedimientos table where DURACIONESTIMADA= duracionestimada
*
* @param   Time  duracionestimada
* @param   Connection con
* @return  Detalleplanprocedimientos[]
*/

	public Detalleplanprocedimientos[] findByDuracionestimada(Time duracionestimada, Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos where duracionestimada = ? order by duracionestimada";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracionestimada );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
* Returns all rows from detalleplanprocedimientos table 
*
* @param Connection con
* @return  Detalleplanprocedimientos[]
*
*/

	public Detalleplanprocedimientos[] findAll( Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleplanprocedimientos table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleplanprocedimientos[]
*
*/

	public Detalleplanprocedimientos[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleplanprocedimientos table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleplanprocedimientos[]
*
*/

	public Detalleplanprocedimientos[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetalleplanprocedimientosException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idplanpprocedimientos, idpieza, idetapaproduccion, duracionestimada from detalleplanprocedimientos";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleplanprocedimientosException(sqle);
			}
			catch(Exception e){
					throw new DetalleplanprocedimientosException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detalleplanprocedimientos
*
*/

	protected Detalleplanprocedimientos fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detalleplanprocedimientos dto = new Detalleplanprocedimientos();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detalleplanprocedimientos dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detalleplanprocedimientos dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdplanpprocedimientos(rs.getLong("idplanpprocedimientos"));
		 dto.setIdpieza(rs.getLong("idpieza"));
		 dto.setIdetapaproduccion(rs.getLong("idetapaproduccion"));
		 dto.setDuracionestimada(rs.getTime("duracionestimada"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detalleplanprocedimientos[]
*/

	protected Detalleplanprocedimientos[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detalleplanprocedimientos dto = new Detalleplanprocedimientos();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detalleplanprocedimientos ret[] = new Detalleplanprocedimientos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
