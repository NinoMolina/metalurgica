/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:38:46 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetalleproductoDAO interface 
* 
*/


public class DetalleproductoDAOImpl implements DetalleproductoDAO
{


/**
* Method deletes a record from table DETALLEPRODUCTO
* @param DetalleproductoPK detalleproductopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetalleproductoPK detalleproductopk , Connection con)throws DetalleproductoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEPRODUCTO where iddetalle = ? AND idproducto = ?");
			ps.setLong(1, detalleproductopk.getIddetalle());
			ps.setLong(2, detalleproductopk.getIdproducto());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetalleproductoException(sqle);}
		catch(Exception e) {throw new DetalleproductoException(e);}
	}



/**
* This method updates a record in table DETALLEPRODUCTO
* @param DetalleproductoPK
* @param Detalleproducto
* @param  Connection con
* @return   int
*/

	public int update(DetalleproductoPK detalleproductopk, Detalleproducto detalleproducto, Connection con)throws DetalleproductoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEPRODUCTO set CANTIDADPIEZAS = ? , DESCRIPCION = ? , PIEZA = ?  where iddetalle = ? AND idproducto = ?");
				ps.setInt(1,detalleproducto.getCantidadpiezas());
				ps.setString(2,detalleproducto.getDescripcion());
				ps.setLong(3,detalleproducto.getPieza());
				ps.setLong(4,detalleproductopk.getIddetalle());
				ps.setLong(5,detalleproductopk.getIdproducto());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleproductoException(sqle);}
		catch(Exception e){throw new DetalleproductoException(e);}
	}

/**
* This method inserts data in table DETALLEPRODUCTO
*
* @param Detalleproducto detalleproducto
* @param   Connection con
* @return  DetalleproductoPK
*/

	public int insert(Detalleproducto detalleproducto ,Connection con)throws DetalleproductoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEPRODUCTO( IDDETALLE, IDPRODUCTO, CANTIDADPIEZAS, DESCRIPCION, PIEZA) values (?, ?, ?, ?, ?)");
				ps.setLong(1,detalleproducto.getIddetalle());
				ps.setLong(2,detalleproducto.getIdproducto());
				ps.setInt(3,detalleproducto.getCantidadpiezas());
				ps.setString(4,detalleproducto.getDescripcion());
				ps.setLong(5,detalleproducto.getPieza());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleproductoException(sqle);}
		catch(Exception e){throw new DetalleproductoException(e);}
	}

/**
* 
* Returns a row from the detalleproducto table for the primary key passed as parameter.
* 
*/

	public Detalleproducto findByPrimaryKey(long iddetalle, long idproducto, Connection con) throws DetalleproductoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto where iddetalle = ? AND idproducto = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idproducto);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetalleproductoException(sqle);
	  	}
	    catch(Exception e){throw new DetalleproductoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detalleproducto table for the primary key object passed as parameter.
* 
* @param  DetalleproductoPK detalleproductopk
* @param Connection con
* @return  Detalleproducto
*/

	public Detalleproducto findByPrimaryKey(DetalleproductoPK detalleproductopk, Connection con) throws DetalleproductoException{
		return findByPrimaryKey(detalleproductopk.getIddetalle(), detalleproductopk.getIdproducto(), con);
	}

/**
*
* Returns all rows from detalleproducto table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detalleproducto[]
*/

	public Detalleproducto[] findByIddetalle(long iddetalle, Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleproducto table where IDPRODUCTO= idproducto
*
* @param   long  idproducto
* @param   Connection con
* @return  Detalleproducto[]
*/

	public Detalleproducto[] findByIdproducto(long idproducto, Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto where idproducto = ? order by idproducto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idproducto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleproducto table where CANTIDADPIEZAS= cantidadpiezas
*
* @param   int  cantidadpiezas
* @param   Connection con
* @return  Detalleproducto[]
*/

	public Detalleproducto[] findByCantidadpiezas(int cantidadpiezas, Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto where cantidadpiezas = ? order by cantidadpiezas";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidadpiezas );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleproducto table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Detalleproducto[]
*/

	public Detalleproducto[] findByDescripcion(String descripcion, Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleproducto table where PIEZA= pieza
*
* @param   long  pieza
* @param   Connection con
* @return  Detalleproducto[]
*/

	public Detalleproducto[] findByPieza(long pieza, Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto where pieza = ? order by pieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, pieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
* Returns all rows from detalleproducto table 
*
* @param Connection con
* @return  Detalleproducto[]
*
*/

	public Detalleproducto[] findAll( Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleproducto table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleproducto[]
*
*/

	public Detalleproducto[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleproducto table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleproducto[]
*
*/

	public Detalleproducto[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetalleproductoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idproducto, cantidadpiezas, descripcion, pieza from detalleproducto";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleproductoException(sqle);
			}
			catch(Exception e){
					throw new DetalleproductoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detalleproducto
*
*/

	protected Detalleproducto fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detalleproducto dto = new Detalleproducto();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detalleproducto dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detalleproducto dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdproducto(rs.getLong("idproducto"));
		 dto.setCantidadpiezas(rs.getInt("cantidadpiezas"));
		 dto.setDescripcion(rs.getString("descripcion"));
		 dto.setPieza(rs.getLong("pieza"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detalleproducto[]
*/

	protected Detalleproducto[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detalleproducto dto = new Detalleproducto();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detalleproducto ret[] = new Detalleproducto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
