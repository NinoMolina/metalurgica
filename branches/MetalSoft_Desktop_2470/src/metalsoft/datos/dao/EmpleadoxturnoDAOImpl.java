/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:02 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of EmpleadoxturnoDAO interface 
* 
*/


public class EmpleadoxturnoDAOImpl implements EmpleadoxturnoDAO
{


/**
* Method deletes a record from table EMPLEADOXTURNO
* @param EmpleadoxturnoPK empleadoxturnopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(EmpleadoxturnoPKDB empleadoxturnopk , Connection con)throws EmpleadoxturnoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  EMPLEADOXTURNO where idempleado = ? AND idturno = ?");
			ps.setLong(1, empleadoxturnopk.getIdempleado());
			ps.setLong(2, empleadoxturnopk.getIdturno());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new EmpleadoxturnoException(sqle);}
		catch(Exception e) {throw new EmpleadoxturnoException(e);}
	}



/**
* This method updates a record in table EMPLEADOXTURNO
* @param EmpleadoxturnoPK
* @param EmpleadoxturnoDB
* @param  Connection con
* @return   int
*/

	public int update(EmpleadoxturnoPKDB empleadoxturnopk, EmpleadoxturnoDB empleadoxturno, Connection con)throws EmpleadoxturnoException{
            throw new EmpleadoxturnoException("el metodo update no esta implementado!");
	}

/**
* This method inserts data in table EMPLEADOXTURNO
*
* @param EmpleadoxturnoDB empleadoxturno
* @param   Connection con
* @return  EmpleadoxturnoPK
*/

	public int insert(EmpleadoxturnoDB empleadoxturno ,Connection con)throws EmpleadoxturnoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into EMPLEADOXTURNO( IDEMPLEADO, IDTURNO) values (?, ?)");
				ps.setLong(1,empleadoxturno.getIdempleado());
				ps.setLong(2,empleadoxturno.getIdturno());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EmpleadoxturnoException(sqle);}
		catch(Exception e){throw new EmpleadoxturnoException(e);}
	}

/**
* 
* Returns a row from the empleadoxturno table for the primary key passed as parameter.
* 
*/

	public EmpleadoxturnoDB findByPrimaryKey(long idempleado, long idturno, Connection con) throws EmpleadoxturnoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idempleado, idturno from empleadoxturno where idempleado = ? AND idturno = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idempleado);
	  		stmt.setLong(2, idturno);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new EmpleadoxturnoException(sqle);
	  	}
	    catch(Exception e){throw new EmpleadoxturnoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the empleadoxturno table for the primary key object passed as parameter.
* 
* @param  EmpleadoxturnoPK empleadoxturnopk
* @param Connection con
* @return  EmpleadoxturnoDB
*/

	public EmpleadoxturnoDB findByPrimaryKey(EmpleadoxturnoPKDB empleadoxturnopk, Connection con) throws EmpleadoxturnoException{
		return findByPrimaryKey(empleadoxturnopk.getIdempleado(), empleadoxturnopk.getIdturno(), con);
	}

/**
*
* Returns all rows from empleadoxturno table where IDEMPLEADO= idempleado
*
* @param   long  idempleado
* @param   Connection con
* @return  EmpleadoxturnoDB[]
*/

	public EmpleadoxturnoDB[] findByIdempleado(long idempleado, Connection con) throws EmpleadoxturnoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempleado, idturno from empleadoxturno where idempleado = ? order by idempleado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idempleado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpleadoxturnoException(sqle);
			}
			catch(Exception e){
					throw new EmpleadoxturnoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from empleadoxturno table where IDTURNO= idturno
*
* @param   long  idturno
* @param   Connection con
* @return  EmpleadoxturnoDB[]
*/

	public EmpleadoxturnoDB[] findByIdturno(long idturno, Connection con) throws EmpleadoxturnoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempleado, idturno from empleadoxturno where idturno = ? order by idturno";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idturno );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpleadoxturnoException(sqle);
			}
			catch(Exception e){
					throw new EmpleadoxturnoException(e);
			}
			finally{}
	}

/**
* Returns all rows from empleadoxturno table 
*
* @param Connection con
* @return  EmpleadoxturnoDB[]
*
*/

	public EmpleadoxturnoDB[] findAll( Connection con) throws EmpleadoxturnoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idempleado, idturno from empleadoxturno";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpleadoxturnoException(sqle);
			}
			catch(Exception e){
					throw new EmpleadoxturnoException(e);
			}
			finally{}
	}

/**
* Returns rows from empleadoxturno table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  EmpleadoxturnoDB[]
*
*/

	public EmpleadoxturnoDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws EmpleadoxturnoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpleadoxturnoException(sqle);
			}
			catch(Exception e){
					throw new EmpleadoxturnoException(e);
			}
			finally{}
	}

/**
* Returns rows from empleadoxturno table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  EmpleadoxturnoDB[]
*
*/

	public EmpleadoxturnoDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws EmpleadoxturnoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idempleado, idturno from empleadoxturno";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EmpleadoxturnoException(sqle);
			}
			catch(Exception e){
					throw new EmpleadoxturnoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  EmpleadoxturnoDB
*
*/

	protected EmpleadoxturnoDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					EmpleadoxturnoDB dto = new EmpleadoxturnoDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param EmpleadoxturnoDB dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(EmpleadoxturnoDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdempleado(rs.getLong("idempleado"));
		 dto.setIdturno(rs.getLong("idturno"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  EmpleadoxturnoDB[]
*/

	protected EmpleadoxturnoDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EmpleadoxturnoDB dto = new EmpleadoxturnoDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		EmpleadoxturnoDB ret[] = new EmpleadoxturnoDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
