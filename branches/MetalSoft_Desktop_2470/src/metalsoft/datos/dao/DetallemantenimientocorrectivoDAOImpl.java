/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:01 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallemantenimientocorrectivoDAO interface 
* 
*/


public class DetallemantenimientocorrectivoDAOImpl implements DetallemantenimientocorrectivoDAO
{


/**
* Method deletes a record from table DETALLEMANTENIMIENTOCORRECTIVO
* @param DetallemantenimientocorrectivoPK detallemantenimientocorrectivopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallemantenimientocorrectivoPKDB detallemantenimientocorrectivopk , Connection con)throws DetallemantenimientocorrectivoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEMANTENIMIENTOCORRECTIVO where idmantenimientocorrectivo = ? AND iddetalle = ?");
			ps.setLong(1, detallemantenimientocorrectivopk.getIdmantenimientocorrectivo());
			ps.setLong(2, detallemantenimientocorrectivopk.getIddetalle());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallemantenimientocorrectivoException(sqle);}
		catch(Exception e) {throw new DetallemantenimientocorrectivoException(e);}
	}



/**
* This method updates a record in table DETALLEMANTENIMIENTOCORRECTIVO
* @param DetallemantenimientocorrectivoPK
* @param Detallemantenimientocorrectivo
* @param  Connection con
* @return   int
*/

	public int update(DetallemantenimientocorrectivoPKDB detallemantenimientocorrectivopk, DetallemantenimientocorrectivoDB detallemantenimientocorrectivo, Connection con)throws DetallemantenimientocorrectivoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEMANTENIMIENTOCORRECTIVO set DURACION = ? , ROTURA = ? , MOTIVOROTURA = ?  where idmantenimientocorrectivo = ? AND iddetalle = ?");
				ps.setTime(1,detallemantenimientocorrectivo.getDuracion());
				ps.setLong(2,detallemantenimientocorrectivo.getRotura());
				ps.setString(3,detallemantenimientocorrectivo.getMotivorotura());
				ps.setLong(4,detallemantenimientocorrectivopk.getIdmantenimientocorrectivo());
				ps.setLong(5,detallemantenimientocorrectivopk.getIddetalle());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallemantenimientocorrectivoException(sqle);}
		catch(Exception e){throw new DetallemantenimientocorrectivoException(e);}
	}

/**
* This method inserts data in table DETALLEMANTENIMIENTOCORRECTIVO
*
* @param Detallemantenimientocorrectivo detallemantenimientocorrectivo
* @param   Connection con
* @return  DetallemantenimientocorrectivoPK
*/

	public int insert(DetallemantenimientocorrectivoDB detallemantenimientocorrectivo ,Connection con)throws DetallemantenimientocorrectivoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEMANTENIMIENTOCORRECTIVO( IDDETALLE, DURACION, ROTURA, MOTIVOROTURA) values (?, ?, ?, ?)");
				ps.setLong(1,detallemantenimientocorrectivo.getIddetalle());
				ps.setTime(2,detallemantenimientocorrectivo.getDuracion());
				ps.setLong(3,detallemantenimientocorrectivo.getRotura());
				ps.setString(4,detallemantenimientocorrectivo.getMotivorotura());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallemantenimientocorrectivoException(sqle);}
		catch(Exception e){throw new DetallemantenimientocorrectivoException(e);}
	}

/**
* 
* Returns a row from the detallemantenimientocorrectivo table for the primary key passed as parameter.
* 
*/

	public DetallemantenimientocorrectivoDB findByPrimaryKey(long idmantenimientocorrectivo, long iddetalle, Connection con) throws DetallemantenimientocorrectivoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo where idmantenimientocorrectivo = ? AND iddetalle = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idmantenimientocorrectivo);
	  		stmt.setLong(2, iddetalle);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallemantenimientocorrectivoException(sqle);
	  	}
	    catch(Exception e){throw new DetallemantenimientocorrectivoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallemantenimientocorrectivo table for the primary key object passed as parameter.
* 
* @param  DetallemantenimientocorrectivoPK detallemantenimientocorrectivopk
* @param Connection con
* @return  Detallemantenimientocorrectivo
*/

	public DetallemantenimientocorrectivoDB findByPrimaryKey(DetallemantenimientocorrectivoPKDB detallemantenimientocorrectivopk, Connection con) throws DetallemantenimientocorrectivoException{
		return findByPrimaryKey(detallemantenimientocorrectivopk.getIdmantenimientocorrectivo(), detallemantenimientocorrectivopk.getIddetalle(), con);
	}

/**
*
* Returns all rows from detallemantenimientocorrectivo table where IDMANTENIMIENTOCORRECTIVO= idmantenimientocorrectivo
*
* @param   long  idmantenimientocorrectivo
* @param   Connection con
* @return  Detallemantenimientocorrectivo[]
*/

	public DetallemantenimientocorrectivoDB[] findByIdmantenimientocorrectivo(long idmantenimientocorrectivo, Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo where idmantenimientocorrectivo = ? order by idmantenimientocorrectivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmantenimientocorrectivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientocorrectivo table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallemantenimientocorrectivo[]
*/

	public DetallemantenimientocorrectivoDB[] findByIddetalle(long iddetalle, Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientocorrectivo table where DURACION= duracion
*
* @param   Time  duracion
* @param   Connection con
* @return  Detallemantenimientocorrectivo[]
*/

	public DetallemantenimientocorrectivoDB[] findByDuracion(Time duracion, Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo where duracion = ? order by duracion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientocorrectivo table where ROTURA= rotura
*
* @param   long  rotura
* @param   Connection con
* @return  Detallemantenimientocorrectivo[]
*/

	public DetallemantenimientocorrectivoDB[] findByRotura(long rotura, Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo where rotura = ? order by rotura";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, rotura );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientocorrectivo table where MOTIVOROTURA= motivorotura
*
* @param   String  motivorotura
* @param   Connection con
* @return  Detallemantenimientocorrectivo[]
*/

	public DetallemantenimientocorrectivoDB[] findByMotivorotura(String motivorotura, Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo where motivorotura = ? order by motivorotura";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivorotura );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallemantenimientocorrectivo table 
*
* @param Connection con
* @return  Detallemantenimientocorrectivo[]
*
*/

	public DetallemantenimientocorrectivoDB[] findAll( Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallemantenimientocorrectivo table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallemantenimientocorrectivo[]
*
*/

	public DetallemantenimientocorrectivoDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallemantenimientocorrectivo table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallemantenimientocorrectivo[]
*
*/

	public DetallemantenimientocorrectivoDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallemantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idmantenimientocorrectivo, iddetalle, duracion, rotura, motivorotura from detallemantenimientocorrectivo";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallemantenimientocorrectivo
*
*/

	protected DetallemantenimientocorrectivoDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					DetallemantenimientocorrectivoDB dto = new DetallemantenimientocorrectivoDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallemantenimientocorrectivo dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(DetallemantenimientocorrectivoDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdmantenimientocorrectivo(rs.getLong("idmantenimientocorrectivo"));
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setDuracion(rs.getTime("duracion"));
		 dto.setRotura(rs.getLong("rotura"));
		 dto.setMotivorotura(rs.getString("motivorotura"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallemantenimientocorrectivo[]
*/

	protected DetallemantenimientocorrectivoDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DetallemantenimientocorrectivoDB dto = new DetallemantenimientocorrectivoDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		DetallemantenimientocorrectivoDB ret[] = new DetallemantenimientocorrectivoDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
