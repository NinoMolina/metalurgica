/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Oct 12 17:45:25 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of ProductorealDAO interface 
* 
*/


public class ProductorealDAOImpl implements ProductorealDAO
{


/**
* Method deletes a record from table PRODUCTOREAL
* @param ProductorealPK productorealpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(ProductorealPKDB productorealpk , Connection con)throws ProductorealException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PRODUCTOREAL where idproductoreal = ?");
			ps.setLong(1, productorealpk.getIdproductoreal());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new ProductorealException(sqle);}
		catch(Exception e) {throw new ProductorealException(e);}
	}



/**
* This method updates a record in table PRODUCTOREAL
* @param ProductorealPK
* @param Productoreal
* @param  Connection con
* @return   int
*/

	public int update(ProductorealPKDB productorealpk, ProductorealDB productoreal, Connection con)throws ProductorealException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PRODUCTOREAL set NROPRODUCTO = ? , FECHATERMINACION = ? , FECHAINICIOPRODUCCION = ? , IDPIEZA = ? , IDPEDIDO = ? , CODIGOBARRA = ? , ESTADO = ? , IDPIEZAREAL = ?  where idproductoreal = ?");
				ps.setLong(1,productoreal.getNroproducto());
				ps.setDate(2,productoreal.getFechaterminacion());
				ps.setDate(3,productoreal.getFechainicioproduccion());
				ps.setLong(4,productoreal.getIdpieza());
				ps.setLong(5,productoreal.getIdpedido());
				ps.setLong(6,productoreal.getCodigobarra());
				ps.setLong(7,productoreal.getEstado());
				ps.setLong(8,productoreal.getIdpiezareal());
				ps.setLong(9,productorealpk.getIdproductoreal());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ProductorealException(sqle);}
		catch(Exception e){throw new ProductorealException(e);}
	}

/**
* This method inserts data in table PRODUCTOREAL
*
* @param Productoreal productoreal
* @param   Connection con
* @return  ProductorealPK
*/

	public int insert(ProductorealDB productoreal ,Connection con)throws ProductorealException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PRODUCTOREAL( NROPRODUCTO, FECHATERMINACION, FECHAINICIOPRODUCCION, IDPIEZA, IDPEDIDO, CODIGOBARRA, ESTADO, IDPIEZAREAL) values (?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,productoreal.getNroproducto());
				ps.setDate(2,productoreal.getFechaterminacion());
				ps.setDate(3,productoreal.getFechainicioproduccion());
				ps.setLong(4,productoreal.getIdpieza());
				ps.setLong(5,productoreal.getIdpedido());
				ps.setLong(6,productoreal.getCodigobarra());
				ps.setLong(7,productoreal.getEstado());
				ps.setLong(8,productoreal.getIdpiezareal());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ProductorealException(sqle);}
		catch(Exception e){throw new ProductorealException(e);}
	}

/**
* 
* Returns a row from the productoreal table for the primary key passed as parameter.
* 
*/

	public ProductorealDB findByPrimaryKey(long idproductoreal, Connection con) throws ProductorealException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where idproductoreal = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idproductoreal);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new ProductorealException(sqle);
	  	}
	    catch(Exception e){throw new ProductorealException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the productoreal table for the primary key object passed as parameter.
* 
* @param  ProductorealPK productorealpk
* @param Connection con
* @return  Productoreal
*/

	public ProductorealDB findByPrimaryKey(ProductorealPKDB productorealpk, Connection con) throws ProductorealException{
		return findByPrimaryKey(productorealpk.getIdproductoreal(), con);
	}

/**
*
* Returns all rows from productoreal table where IDPRODUCTOREAL= idproductoreal
*
* @param   long  idproductoreal
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByIdproductoreal(long idproductoreal, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where idproductoreal = ? order by idproductoreal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idproductoreal );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where NROPRODUCTO= nroproducto
*
* @param   long  nroproducto
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByNroproducto(long nroproducto, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where nroproducto = ? order by nroproducto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroproducto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where FECHATERMINACION= fechaterminacion
*
* @param   Date  fechaterminacion
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByFechaterminacion(Date fechaterminacion, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where fechaterminacion = ? order by fechaterminacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaterminacion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where FECHAINICIOPRODUCCION= fechainicioproduccion
*
* @param   Date  fechainicioproduccion
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByFechainicioproduccion(Date fechainicioproduccion, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where fechainicioproduccion = ? order by fechainicioproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicioproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where IDPIEZA= idpieza
*
* @param   long  idpieza
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByIdpieza(long idpieza, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where idpieza = ? order by idpieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where IDPEDIDO= idpedido
*
* @param   long  idpedido
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByIdpedido(long idpedido, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where idpedido = ? order by idpedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where CODIGOBARRA= codigobarra
*
* @param   long  codigobarra
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByCodigobarra(long codigobarra, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where codigobarra = ? order by codigobarra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, codigobarra );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where ESTADO= estado
*
* @param   long  estado
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByEstado(long estado, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where estado = ? order by estado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, estado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from productoreal table where IDPIEZAREAL= idpiezareal
*
* @param   long  idpiezareal
* @param   Connection con
* @return  Productoreal[]
*/

	public ProductorealDB[] findByIdpiezareal(long idpiezareal, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal where idpiezareal = ? order by idpiezareal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpiezareal );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
* Returns all rows from productoreal table 
*
* @param Connection con
* @return  Productoreal[]
*
*/

	public ProductorealDB[] findAll( Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
* Returns rows from productoreal table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Productoreal[]
*
*/

	public ProductorealDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
* Returns rows from productoreal table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Productoreal[]
*
*/

	public ProductorealDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws ProductorealException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idproductoreal, nroproducto, fechaterminacion, fechainicioproduccion, idpieza, idpedido, codigobarra, estado, idpiezareal from productoreal";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ProductorealException(sqle);
			}
			catch(Exception e){
					throw new ProductorealException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Productoreal
*
*/

	protected ProductorealDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					ProductorealDB dto = new ProductorealDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Productoreal dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(ProductorealDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdproductoreal(rs.getLong("idproductoreal"));
		 dto.setNroproducto(rs.getLong("nroproducto"));
		 dto.setFechaterminacion(rs.getDate("fechaterminacion"));
		 dto.setFechainicioproduccion(rs.getDate("fechainicioproduccion"));
		 dto.setIdpieza(rs.getLong("idpieza"));
		 dto.setIdpedido(rs.getLong("idpedido"));
		 dto.setCodigobarra(rs.getLong("codigobarra"));
		 dto.setEstado(rs.getLong("estado"));
		 dto.setIdpiezareal(rs.getLong("idpiezareal"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Productoreal[]
*/

	protected ProductorealDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ProductorealDB dto = new ProductorealDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		ProductorealDB ret[] = new ProductorealDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
