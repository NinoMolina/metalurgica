/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:01 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallereclamoempresametalurgicaDAO interface 
* 
*/


public class DetallereclamoempresametalurgicaDAOImpl implements DetallereclamoempresametalurgicaDAO
{


/**
* Method deletes a record from table DETALLERECLAMOEMPRESAMETALURGICA
* @param DetallereclamoempresametalurgicaPK detallereclamoempresametalurgicapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallereclamoempresametalurgicaPK detallereclamoempresametalurgicapk , Connection con)throws DetallereclamoempresametalurgicaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLERECLAMOEMPRESAMETALURGICA where iddetalle = ? AND idreclamo = ?");
			ps.setLong(1, detallereclamoempresametalurgicapk.getIddetalle());
			ps.setLong(2, detallereclamoempresametalurgicapk.getIdreclamo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallereclamoempresametalurgicaException(sqle);}
		catch(Exception e) {throw new DetallereclamoempresametalurgicaException(e);}
	}



/**
* This method updates a record in table DETALLERECLAMOEMPRESAMETALURGICA
* @param DetallereclamoempresametalurgicaPK
* @param Detallereclamoempresametalurgica
* @param  Connection con
* @return   int
*/

	public int update(DetallereclamoempresametalurgicaPK detallereclamoempresametalurgicapk, Detallereclamoempresametalurgica detallereclamoempresametalurgica, Connection con)throws DetallereclamoempresametalurgicaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLERECLAMOEMPRESAMETALURGICA set CANTIDAD = ? , DESCRIPCION = ? , MOTIVO = ? , PIEZA = ? , FECHAEGRESO = ?  where iddetalle = ? AND idreclamo = ?");
				ps.setInt(1,detallereclamoempresametalurgica.getCantidad());
				ps.setString(2,detallereclamoempresametalurgica.getDescripcion());
				ps.setString(3,detallereclamoempresametalurgica.getMotivo());
				ps.setLong(4,detallereclamoempresametalurgica.getPieza());
				ps.setDate(5,detallereclamoempresametalurgica.getFechaegreso());
				ps.setLong(6,detallereclamoempresametalurgicapk.getIddetalle());
				ps.setLong(7,detallereclamoempresametalurgicapk.getIdreclamo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallereclamoempresametalurgicaException(sqle);}
		catch(Exception e){throw new DetallereclamoempresametalurgicaException(e);}
	}

/**
* This method inserts data in table DETALLERECLAMOEMPRESAMETALURGICA
*
* @param Detallereclamoempresametalurgica detallereclamoempresametalurgica
* @param   Connection con
* @return  DetallereclamoempresametalurgicaPK
*/

	public int insert(Detallereclamoempresametalurgica detallereclamoempresametalurgica ,Connection con)throws DetallereclamoempresametalurgicaException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLERECLAMOEMPRESAMETALURGICA( IDRECLAMO, CANTIDAD, DESCRIPCION, MOTIVO, PIEZA, FECHAEGRESO) values (?, ?, ?, ?, ?, ?)");
				ps.setLong(1,detallereclamoempresametalurgica.getIdreclamo());
				ps.setInt(2,detallereclamoempresametalurgica.getCantidad());
				ps.setString(3,detallereclamoempresametalurgica.getDescripcion());
				ps.setString(4,detallereclamoempresametalurgica.getMotivo());
				ps.setLong(5,detallereclamoempresametalurgica.getPieza());
				ps.setDate(6,detallereclamoempresametalurgica.getFechaegreso());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallereclamoempresametalurgicaException(sqle);}
		catch(Exception e){throw new DetallereclamoempresametalurgicaException(e);}
	}

/**
* 
* Returns a row from the detallereclamoempresametalurgica table for the primary key passed as parameter.
* 
*/

	public Detallereclamoempresametalurgica findByPrimaryKey(long iddetalle, long idreclamo, Connection con) throws DetallereclamoempresametalurgicaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where iddetalle = ? AND idreclamo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idreclamo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallereclamoempresametalurgicaException(sqle);
	  	}
	    catch(Exception e){throw new DetallereclamoempresametalurgicaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallereclamoempresametalurgica table for the primary key object passed as parameter.
* 
* @param  DetallereclamoempresametalurgicaPK detallereclamoempresametalurgicapk
* @param Connection con
* @return  Detallereclamoempresametalurgica
*/

	public Detallereclamoempresametalurgica findByPrimaryKey(DetallereclamoempresametalurgicaPK detallereclamoempresametalurgicapk, Connection con) throws DetallereclamoempresametalurgicaException{
		return findByPrimaryKey(detallereclamoempresametalurgicapk.getIddetalle(), detallereclamoempresametalurgicapk.getIdreclamo(), con);
	}

/**
*
* Returns all rows from detallereclamoempresametalurgica table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallereclamoempresametalurgica[]
*/

	public Detallereclamoempresametalurgica[] findByIddetalle(long iddetalle, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoempresametalurgica table where IDRECLAMO= idreclamo
*
* @param   long  idreclamo
* @param   Connection con
* @return  Detallereclamoempresametalurgica[]
*/

	public Detallereclamoempresametalurgica[] findByIdreclamo(long idreclamo, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where idreclamo = ? order by idreclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idreclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoempresametalurgica table where CANTIDAD= cantidad
*
* @param   int  cantidad
* @param   Connection con
* @return  Detallereclamoempresametalurgica[]
*/

	public Detallereclamoempresametalurgica[] findByCantidad(int cantidad, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where cantidad = ? order by cantidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoempresametalurgica table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Detallereclamoempresametalurgica[]
*/

	public Detallereclamoempresametalurgica[] findByDescripcion(String descripcion, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoempresametalurgica table where MOTIVO= motivo
*
* @param   String  motivo
* @param   Connection con
* @return  Detallereclamoempresametalurgica[]
*/

	public Detallereclamoempresametalurgica[] findByMotivo(String motivo, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where motivo = ? order by motivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoempresametalurgica table where PIEZA= pieza
*
* @param   long  pieza
* @param   Connection con
* @return  Detallereclamoempresametalurgica[]
*/

	public Detallereclamoempresametalurgica[] findByPieza(long pieza, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where pieza = ? order by pieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, pieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoempresametalurgica table where FECHAEGRESO= fechaegreso
*
* @param   Date  fechaegreso
* @param   Connection con
* @return  Detallereclamoempresametalurgica[]
*/

	public Detallereclamoempresametalurgica[] findByFechaegreso(Date fechaegreso, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica where fechaegreso = ? order by fechaegreso";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaegreso );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallereclamoempresametalurgica table 
*
* @param Connection con
* @return  Detallereclamoempresametalurgica[]
*
*/

	public Detallereclamoempresametalurgica[] findAll( Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns rows from detallereclamoempresametalurgica table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallereclamoempresametalurgica[]
*
*/

	public Detallereclamoempresametalurgica[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns rows from detallereclamoempresametalurgica table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallereclamoempresametalurgica[]
*
*/

	public Detallereclamoempresametalurgica[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallereclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, pieza, fechaegreso from detallereclamoempresametalurgica";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallereclamoempresametalurgica
*
*/

	protected Detallereclamoempresametalurgica fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallereclamoempresametalurgica dto = new Detallereclamoempresametalurgica();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallereclamoempresametalurgica dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallereclamoempresametalurgica dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdreclamo(rs.getLong("idreclamo"));
		 dto.setCantidad(rs.getInt("cantidad"));
		 dto.setDescripcion(rs.getString("descripcion"));
		 dto.setMotivo(rs.getString("motivo"));
		 dto.setPieza(rs.getLong("pieza"));
		 dto.setFechaegreso(rs.getDate("fechaegreso"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallereclamoempresametalurgica[]
*/

	protected Detallereclamoempresametalurgica[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallereclamoempresametalurgica dto = new Detallereclamoempresametalurgica();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallereclamoempresametalurgica ret[] = new Detallereclamoempresametalurgica[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
