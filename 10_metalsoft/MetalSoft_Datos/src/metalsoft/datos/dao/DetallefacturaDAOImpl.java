/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Oct 31 02:26:41 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallefacturaDAO interface 
* 
*/


public class DetallefacturaDAOImpl implements DetallefacturaDAO
{


/**
* Method deletes a record from table DETALLEFACTURA
* @param DetallefacturaPK detallefacturapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallefacturaPK detallefacturapk , Connection con)throws DetallefacturaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEFACTURA where iddetalle = ? AND idfactura = ?");
			ps.setLong(1, detallefacturapk.getIddetalle());
			ps.setLong(2, detallefacturapk.getIdfactura());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallefacturaException(sqle);}
		catch(Exception e) {throw new DetallefacturaException(e);}
	}



/**
* This method updates a record in table DETALLEFACTURA
* @param DetallefacturaPK
* @param Detallefactura
* @param  Connection con
* @return   int
*/

	public int update(DetallefacturaPK detallefacturapk, Detallefactura detallefactura, Connection con)throws DetallefacturaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEFACTURA set IDPEDIDO = ? , MONTOPARCIAL = ? , CANTIDAD = ? , IDDETALLEPEDIDO = ?  where iddetalle = ? AND idfactura = ?");
				ps.setLong(1,detallefactura.getIdpedido());
				ps.setDouble(2,detallefactura.getMontoparcial());
				ps.setInt(3,detallefactura.getCantidad());
				ps.setLong(4,detallefactura.getIddetallepedido());
				ps.setLong(5,detallefacturapk.getIddetalle());
				ps.setLong(6,detallefacturapk.getIdfactura());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallefacturaException(sqle);}
		catch(Exception e){throw new DetallefacturaException(e);}
	}

/**
* This method inserts data in table DETALLEFACTURA
*
* @param Detallefactura detallefactura
* @param   Connection con
* @return  DetallefacturaPK
*/

	public int insert(Detallefactura detallefactura ,Connection con)throws DetallefacturaException {

		PreparedStatement ps = null;
        ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEFACTURA( IDFACTURA, IDPEDIDO, MONTOPARCIAL, CANTIDAD, IDDETALLEPEDIDO) values (?, ?, ?, ?, ?) RETURNING IDDETALLE");
				ps.setLong(1,detallefactura.getIdfactura());
				ps.setLong(2,detallefactura.getIdpedido());
				ps.setDouble(3,detallefactura.getMontoparcial());
				ps.setInt(4,detallefactura.getCantidad());

                
				ps.setLong(5,detallefactura.getIddetallepedido());

				rs=ps.executeQuery();
                rs.next();
				return (int) rs.getLong(1);
		}catch(SQLException sqle){throw new DetallefacturaException(sqle);}
		catch(Exception e){throw new DetallefacturaException(e);}
	}

/**
* 
* Returns a row from the Detallefactura table for the primary key passed as parameter.
* 
*/

	public Detallefactura findByPrimaryKey(long iddetalle, long idfactura, Connection con) throws DetallefacturaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura where iddetalle = ? AND idfactura = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idfactura);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallefacturaException(sqle);
	  	}
	    catch(Exception e){throw new DetallefacturaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the Detallefactura table for the primary key object passed as parameter.
* 
* @param  DetallefacturaPK detallefacturapk
* @param Connection con
* @return  Detallefactura
*/

	public Detallefactura findByPrimaryKey(DetallefacturaPK detallefacturapk, Connection con) throws DetallefacturaException{
		return findByPrimaryKey(detallefacturapk.getIddetalle(), detallefacturapk.getIdfactura(), con);
	}

/**
*
* Returns all rows from detallefactura table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallefactura[]
*/

	public Detallefactura[] findByIddetalle(long iddetalle, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallefactura table where IDFACTURA= idfactura
*
* @param   long  idfactura
* @param   Connection con
* @return  Detallefactura[]
*/

	public Detallefactura[] findByIdfactura(long idfactura, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura where idfactura = ? order by idfactura";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idfactura );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallefactura table where IDPEDIDO= idpedido
*
* @param   long  idpedido
* @param   Connection con
* @return  Detallefactura[]
*/

	public Detallefactura[] findByIdpedido(long idpedido, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura where idpedido = ? order by idpedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallefactura table where MONTOPARCIAL= montoparcial
*
* @param   double  montoparcial
* @param   Connection con
* @return  Detallefactura[]
*/

	public Detallefactura[] findByMontoparcial(double montoparcial, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura where montoparcial = ? order by montoparcial";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDouble( 1, montoparcial );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallefactura table where CANTIDAD= cantidad
*
* @param   int  cantidad
* @param   Connection con
* @return  Detallefactura[]
*/

	public Detallefactura[] findByCantidad(int cantidad, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura where cantidad = ? order by cantidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallefactura table where IDDETALLEPEDIDO= iddetallepedido
*
* @param   long  iddetallepedido
* @param   Connection con
* @return  Detallefactura[]
*/

	public Detallefactura[] findByIddetallepedido(long iddetallepedido, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura where iddetallepedido = ? order by iddetallepedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetallepedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
* Returns all rows from Detallefactura table 
*
* @param Connection con
* @return  Detallefactura[]
*
*/

	public Detallefactura[] findAll( Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
* Returns rows from Detallefactura table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallefactura[]
*
*/

	public Detallefactura[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
* Returns rows from Detallefactura table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallefactura[]
*
*/

	public Detallefactura[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallefacturaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idfactura, idpedido, montoparcial, cantidad, iddetallepedido from detallefactura";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallefacturaException(sqle);
			}
			catch(Exception e){
					throw new DetallefacturaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallefactura
*
*/

	protected Detallefactura fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallefactura dto = new Detallefactura();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallefactura dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallefactura dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdfactura(rs.getLong("idfactura"));
		 dto.setIdpedido(rs.getLong("idpedido"));
		 dto.setMontoparcial(rs.getDouble("montoparcial"));
		 dto.setCantidad(rs.getInt("cantidad"));
		 dto.setIddetallepedido(rs.getLong("iddetallepedido"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallefactura[]
*/

	protected Detallefactura[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallefactura dto = new Detallefactura();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallefactura ret[] = new Detallefactura[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
