/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:38:43 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallemantenimientopreventivoDAO interface 
* 
*/


public class DetallemantenimientopreventivoDAOImpl implements DetallemantenimientopreventivoDAO
{


/**
* Method deletes a record from table DETALLEMANTENIMIENTOPREVENTIVO
* @param DetallemantenimientopreventivoPK detallemantenimientopreventivopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallemantenimientopreventivoPK detallemantenimientopreventivopk , Connection con)throws DetallemantenimientopreventivoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEMANTENIMIENTOPREVENTIVO where idmantenimientopreventivo = ? AND iddetalle = ?");
			ps.setLong(1, detallemantenimientopreventivopk.getIdmantenimientopreventivo());
			ps.setLong(2, detallemantenimientopreventivopk.getIddetalle());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallemantenimientopreventivoException(sqle);}
		catch(Exception e) {throw new DetallemantenimientopreventivoException(e);}
	}



/**
* This method updates a record in table DETALLEMANTENIMIENTOPREVENTIVO
* @param DetallemantenimientopreventivoPK
* @param Detallemantenimientopreventivo
* @param  Connection con
* @return   int
*/

	public int update(DetallemantenimientopreventivoPK detallemantenimientopreventivopk, Detallemantenimientopreventivo detallemantenimientopreventivo, Connection con)throws DetallemantenimientopreventivoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEMANTENIMIENTOPREVENTIVO set DURACION = ? , SERVICIO = ? , OBSERVACIONES = ?  where idmantenimientopreventivo = ? AND iddetalle = ?");
				ps.setTime(1,detallemantenimientopreventivo.getDuracion());
				ps.setLong(2,detallemantenimientopreventivo.getServicio());
				ps.setString(3,detallemantenimientopreventivo.getObservaciones());
				ps.setLong(4,detallemantenimientopreventivopk.getIdmantenimientopreventivo());
				ps.setLong(5,detallemantenimientopreventivopk.getIddetalle());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallemantenimientopreventivoException(sqle);}
		catch(Exception e){throw new DetallemantenimientopreventivoException(e);}
	}

/**
* This method inserts data in table DETALLEMANTENIMIENTOPREVENTIVO
*
* @param Detallemantenimientopreventivo detallemantenimientopreventivo
* @param   Connection con
* @return  DetallemantenimientopreventivoPK
*/

	public int insert(Detallemantenimientopreventivo detallemantenimientopreventivo ,Connection con)throws DetallemantenimientopreventivoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEMANTENIMIENTOPREVENTIVO( IDMANTENIMIENTOPREVENTIVO, IDDETALLE, DURACION, SERVICIO, OBSERVACIONES) values (?, ?, ?, ?, ?)");
				ps.setLong(1,detallemantenimientopreventivo.getIdmantenimientopreventivo());
				ps.setLong(2,detallemantenimientopreventivo.getIddetalle());
				ps.setTime(3,detallemantenimientopreventivo.getDuracion());
				ps.setLong(4,detallemantenimientopreventivo.getServicio());
				ps.setString(5,detallemantenimientopreventivo.getObservaciones());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallemantenimientopreventivoException(sqle);}
		catch(Exception e){throw new DetallemantenimientopreventivoException(e);}
	}

/**
* 
* Returns a row from the detallemantenimientopreventivo table for the primary key passed as parameter.
* 
*/

	public Detallemantenimientopreventivo findByPrimaryKey(long idmantenimientopreventivo, long iddetalle, Connection con) throws DetallemantenimientopreventivoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo where idmantenimientopreventivo = ? AND iddetalle = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idmantenimientopreventivo);
	  		stmt.setLong(2, iddetalle);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallemantenimientopreventivoException(sqle);
	  	}
	    catch(Exception e){throw new DetallemantenimientopreventivoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallemantenimientopreventivo table for the primary key object passed as parameter.
* 
* @param  DetallemantenimientopreventivoPK detallemantenimientopreventivopk
* @param Connection con
* @return  Detallemantenimientopreventivo
*/

	public Detallemantenimientopreventivo findByPrimaryKey(DetallemantenimientopreventivoPK detallemantenimientopreventivopk, Connection con) throws DetallemantenimientopreventivoException{
		return findByPrimaryKey(detallemantenimientopreventivopk.getIdmantenimientopreventivo(), detallemantenimientopreventivopk.getIddetalle(), con);
	}

/**
*
* Returns all rows from detallemantenimientopreventivo table where IDMANTENIMIENTOPREVENTIVO= idmantenimientopreventivo
*
* @param   long  idmantenimientopreventivo
* @param   Connection con
* @return  Detallemantenimientopreventivo[]
*/

	public Detallemantenimientopreventivo[] findByIdmantenimientopreventivo(long idmantenimientopreventivo, Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo where idmantenimientopreventivo = ? order by idmantenimientopreventivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmantenimientopreventivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientopreventivo table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallemantenimientopreventivo[]
*/

	public Detallemantenimientopreventivo[] findByIddetalle(long iddetalle, Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientopreventivo table where DURACION= duracion
*
* @param   Time  duracion
* @param   Connection con
* @return  Detallemantenimientopreventivo[]
*/

	public Detallemantenimientopreventivo[] findByDuracion(Time duracion, Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo where duracion = ? order by duracion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientopreventivo table where SERVICIO= servicio
*
* @param   long  servicio
* @param   Connection con
* @return  Detallemantenimientopreventivo[]
*/

	public Detallemantenimientopreventivo[] findByServicio(long servicio, Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo where servicio = ? order by servicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, servicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallemantenimientopreventivo table where OBSERVACIONES= observaciones
*
* @param   String  observaciones
* @param   Connection con
* @return  Detallemantenimientopreventivo[]
*/

	public Detallemantenimientopreventivo[] findByObservaciones(String observaciones, Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo where observaciones = ? order by observaciones";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, observaciones );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallemantenimientopreventivo table 
*
* @param Connection con
* @return  Detallemantenimientopreventivo[]
*
*/

	public Detallemantenimientopreventivo[] findAll( Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallemantenimientopreventivo table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallemantenimientopreventivo[]
*
*/

	public Detallemantenimientopreventivo[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallemantenimientopreventivo table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallemantenimientopreventivo[]
*
*/

	public Detallemantenimientopreventivo[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallemantenimientopreventivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idmantenimientopreventivo, iddetalle, duracion, servicio, observaciones from detallemantenimientopreventivo";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallemantenimientopreventivoException(sqle);
			}
			catch(Exception e){
					throw new DetallemantenimientopreventivoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallemantenimientopreventivo
*
*/

	protected Detallemantenimientopreventivo fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallemantenimientopreventivo dto = new Detallemantenimientopreventivo();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallemantenimientopreventivo dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallemantenimientopreventivo dto, ResultSet rs) throws SQLException
	{
		 dto.setIdmantenimientopreventivo(rs.getLong("idmantenimientopreventivo"));
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setDuracion(rs.getTime("duracion"));
		 dto.setServicio(rs.getLong("servicio"));
		 dto.setObservaciones(rs.getString("observaciones"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallemantenimientopreventivo[]
*/

	protected Detallemantenimientopreventivo[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallemantenimientopreventivo dto = new Detallemantenimientopreventivo();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallemantenimientopreventivo ret[] = new Detallemantenimientopreventivo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
