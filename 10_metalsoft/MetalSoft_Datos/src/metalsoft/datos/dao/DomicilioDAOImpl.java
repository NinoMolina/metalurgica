/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:02 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DomicilioDAO interface 
* 
*/


public class DomicilioDAOImpl implements DomicilioDAO
{


/**
* Method deletes a record from table DOMICILIO
* @param DomicilioPK domiciliopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DomicilioPK domiciliopk , Connection con)throws DomicilioException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DOMICILIO where iddomicilio = ?");
			ps.setLong(1, domiciliopk.getIddomicilio());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DomicilioException(sqle);}
		catch(Exception e) {throw new DomicilioException(e);}
	}



/**
* This method updates a record in table DOMICILIO
* @param DomicilioPK
* @param Domicilio
* @param  Connection con
* @return   int
*/

	public int update(DomicilioPK domiciliopk, Domicilio domicilio, Connection con)throws DomicilioException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DOMICILIO set CALLE = ? , NUMEROCALLE = ? , PISO = ? , DEPTO = ? , TORRE = ? , BARRIO = ?  where iddomicilio = ?");
				ps.setString(1,domicilio.getCalle());
				ps.setInt(2,domicilio.getNumerocalle());
				ps.setInt(3,domicilio.getPiso());
				ps.setString(4,domicilio.getDepto());
				ps.setString(5,domicilio.getTorre());
				ps.setLong(6,domicilio.getBarrio());
				ps.setLong(7,domiciliopk.getIddomicilio());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DomicilioException(sqle);}
		catch(Exception e){throw new DomicilioException(e);}
	}

/**
* This method inserts data in table DOMICILIO
*
* @param Domicilio domicilio
* @param   Connection con
* @return  DomicilioPK
*/

	public int insert(Domicilio domicilio ,Connection con)throws DomicilioException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DOMICILIO( CALLE, NUMEROCALLE, PISO, DEPTO, TORRE, BARRIO) values (?, ?, ?, ?, ?, ?)");
				ps.setString(1,domicilio.getCalle());
				ps.setInt(2,domicilio.getNumerocalle());
				ps.setInt(3,domicilio.getPiso());
				ps.setString(4,domicilio.getDepto());
				ps.setString(5,domicilio.getTorre());
				ps.setLong(6,domicilio.getBarrio());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DomicilioException(sqle);}
		catch(Exception e){throw new DomicilioException(e);}
	}

/**
* 
* Returns a row from the domicilio table for the primary key passed as parameter.
* 
*/

	public Domicilio findByPrimaryKey(long iddomicilio, Connection con) throws DomicilioException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where iddomicilio = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddomicilio);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DomicilioException(sqle);
	  	}
	    catch(Exception e){throw new DomicilioException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the domicilio table for the primary key object passed as parameter.
* 
* @param  DomicilioPK domiciliopk
* @param Connection con
* @return  Domicilio
*/

	public Domicilio findByPrimaryKey(DomicilioPK domiciliopk, Connection con) throws DomicilioException{
		return findByPrimaryKey(domiciliopk.getIddomicilio(), con);
	}

/**
*
* Returns all rows from domicilio table where IDDOMICILIO= iddomicilio
*
* @param   long  iddomicilio
* @param   Connection con
* @return  Domicilio[]
*/

	public Domicilio[] findByIddomicilio(long iddomicilio, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where iddomicilio = ? order by iddomicilio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddomicilio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from domicilio table where CALLE= calle
*
* @param   String  calle
* @param   Connection con
* @return  Domicilio[]
*/

	public Domicilio[] findByCalle(String calle, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where calle = ? order by calle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, calle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from domicilio table where NUMEROCALLE= numerocalle
*
* @param   int  numerocalle
* @param   Connection con
* @return  Domicilio[]
*/

	public Domicilio[] findByNumerocalle(int numerocalle, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where numerocalle = ? order by numerocalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, numerocalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from domicilio table where PISO= piso
*
* @param   int  piso
* @param   Connection con
* @return  Domicilio[]
*/

	public Domicilio[] findByPiso(int piso, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where piso = ? order by piso";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, piso );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from domicilio table where DEPTO= depto
*
* @param   String  depto
* @param   Connection con
* @return  Domicilio[]
*/

	public Domicilio[] findByDepto(String depto, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where depto = ? order by depto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, depto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from domicilio table where TORRE= torre
*
* @param   String  torre
* @param   Connection con
* @return  Domicilio[]
*/

	public Domicilio[] findByTorre(String torre, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where torre = ? order by torre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, torre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from domicilio table where BARRIO= barrio
*
* @param   long  barrio
* @param   Connection con
* @return  Domicilio[]
*/

	public Domicilio[] findByBarrio(long barrio, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio where barrio = ? order by barrio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, barrio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
* Returns all rows from domicilio table 
*
* @param Connection con
* @return  Domicilio[]
*
*/

	public Domicilio[] findAll( Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
* Returns rows from domicilio table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Domicilio[]
*
*/

	public Domicilio[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
* Returns rows from domicilio table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Domicilio[]
*
*/

	public Domicilio[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DomicilioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddomicilio, calle, numerocalle, piso, depto, torre, barrio from domicilio";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DomicilioException(sqle);
			}
			catch(Exception e){
					throw new DomicilioException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Domicilio
*
*/

	protected Domicilio fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Domicilio dto = new Domicilio();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Domicilio dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Domicilio dto, ResultSet rs) throws SQLException
	{
		 dto.setIddomicilio(rs.getLong("iddomicilio"));
		 dto.setCalle(rs.getString("calle"));
		 dto.setNumerocalle(rs.getInt("numerocalle"));
		 dto.setPiso(rs.getInt("piso"));
		 dto.setDepto(rs.getString("depto"));
		 dto.setTorre(rs.getString("torre"));
		 dto.setBarrio(rs.getLong("barrio"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Domicilio[]
*/

	protected Domicilio[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Domicilio dto = new Domicilio();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Domicilio ret[] = new Domicilio[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
