/**
 *					--DAO-Generator--
 *
 * Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
 * Date of code generation: Sun Jun 27 03:16:02 ART 2010
 *
 * DAO-Generator Version 1.2
 *
 */
package metalsoft.datos.dao;

import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;

/**
 *
 * Implementation of EjecucionplanificacionproduccionDAO interface
 *
 */
public class EjecucionplanificacionproduccionDAOImpl implements EjecucionplanificacionproduccionDAO {

    /**
     * Method deletes a record from table EJECUCIONPLANIFICACIONPRODUCCION
     * @param EjecucionplanificacionproduccionPK ejecucionplanificacionproduccionpk
     * @param  Connection  con
     * @return  int
     *
     */
    public int delete(EjecucionplanificacionproduccionPK ejecucionplanificacionproduccionpk, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement ps = null;
        try {
            ps = con.prepareStatement("delete from  EJECUCIONPLANIFICACIONPRODUCCION where idejecucion = ? AND idplanificacionproduccion = ?");
            ps.setLong(1, ejecucionplanificacionproduccionpk.getIdejecucion());
            ps.setLong(2, ejecucionplanificacionproduccionpk.getIdplanificacionproduccion());
            return (ps.executeUpdate());
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        }
    }

    /**
     * This method updates a record in table EJECUCIONPLANIFICACIONPRODUCCION
     * @param EjecucionplanificacionproduccionPK
     * @param Ejecucionplanificacionproduccion
     * @param  Connection con
     * @return   int
     */
    public int update(EjecucionplanificacionproduccionPK ejecucionplanificacionproduccionpk, Ejecucionplanificacionproduccion ejecucionplanificacionproduccion, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement ps = null;
        try {
            ps = con.prepareStatement("update EJECUCIONPLANIFICACIONPRODUCCION set FECHAINICIO = ? , FECHAFIN = ? , HORAINICIO = ? , HORAFIN = ? , ESTADO = ?  where idejecucion = ? AND idplanificacionproduccion = ?");
            ps.setDate(1, ejecucionplanificacionproduccion.getFechainicio());
            ps.setDate(2, ejecucionplanificacionproduccion.getFechafin());
            ps.setTime(3, ejecucionplanificacionproduccion.getHorainicio());
            ps.setTime(4, ejecucionplanificacionproduccion.getHorafin());
            ps.setLong(5, ejecucionplanificacionproduccion.getEstado());
            ps.setLong(6, ejecucionplanificacionproduccionpk.getIdejecucion());
            ps.setLong(7, ejecucionplanificacionproduccionpk.getIdplanificacionproduccion());

            return (ps.executeUpdate());
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        }
    }

    /**
     * This method inserts data in table EJECUCIONPLANIFICACIONPRODUCCION
     *
     * @param Ejecucionplanificacionproduccion ejecucionplanificacionproduccion
     * @param   Connection con
     * @return  EjecucionplanificacionproduccionPK
     */
    public int insert(Ejecucionplanificacionproduccion ejecucionplanificacionproduccion, Connection con) throws EjecucionplanificacionproduccionException {

        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = con.prepareStatement("insert into EJECUCIONPLANIFICACIONPRODUCCION( IDPLANIFICACIONPRODUCCION, FECHAINICIO, FECHAFIN, HORAINICIO, HORAFIN, ESTADO) values (?, ?, ?, ?, ?, ?) RETURNING IDEJECUCION");
            ps.setLong(1, ejecucionplanificacionproduccion.getIdplanificacionproduccion());
            if (ejecucionplanificacionproduccion.getFechainicio() == null) {
                ps.setNull(2, java.sql.Types.NULL);
            } else {
                ps.setDate(2, ejecucionplanificacionproduccion.getFechainicio());
            }
            if (ejecucionplanificacionproduccion.getFechafin() == null) {
                ps.setNull(3, java.sql.Types.NULL);
            } else {
                ps.setDate(3, ejecucionplanificacionproduccion.getFechafin());
            }
            if (ejecucionplanificacionproduccion.getHorainicio() == null) {
                ps.setNull(4, java.sql.Types.NULL);
            } else {
                ps.setTime(4, ejecucionplanificacionproduccion.getHorainicio());
            }
            if (ejecucionplanificacionproduccion.getHorafin() == null) {
                ps.setNull(5, java.sql.Types.NULL);
            } else {
                ps.setTime(5, ejecucionplanificacionproduccion.getHorafin());
            }
            ps.setLong(6, ejecucionplanificacionproduccion.getEstado());

            rs = ps.executeQuery();
            rs.next();
            return (int) rs.getLong("idejecucion");
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        }
    }

    /**
     *
     * Returns a row from the ejecucionplanificacionproduccion table for the primary key passed as parameter.
     *
     */
    public Ejecucionplanificacionproduccion findByPrimaryKey(long idejecucion, long idplanificacionproduccion, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            final String SQLSTATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where idejecucion = ? AND idplanificacionproduccion = ?";
            stmt = con.prepareStatement(SQLSTATEMENT);
            stmt.setLong(1, idejecucion);
            stmt.setLong(2, idplanificacionproduccion);
            rs = stmt.executeQuery();
            return fetchSingleResult(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Returns a row from the ejecucionplanificacionproduccion table for the primary key object passed as parameter.
     *
     * @param  EjecucionplanificacionproduccionPK ejecucionplanificacionproduccionpk
     * @param Connection con
     * @return  Ejecucionplanificacionproduccion
     */
    public Ejecucionplanificacionproduccion findByPrimaryKey(EjecucionplanificacionproduccionPK ejecucionplanificacionproduccionpk, Connection con) throws EjecucionplanificacionproduccionException {
        return findByPrimaryKey(ejecucionplanificacionproduccionpk.getIdejecucion(), ejecucionplanificacionproduccionpk.getIdplanificacionproduccion(), con);
    }

    /**
     *
     * Returns all rows from ejecucionplanificacionproduccion table where IDEJECUCION= idejecucion
     *
     * @param   long  idejecucion
     * @param   Connection con
     * @return  Ejecucionplanificacionproduccion[]
     */
    public Ejecucionplanificacionproduccion[] findByIdejecucion(long idejecucion, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where idejecucion = ? order by idejecucion";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            stmt.setLong(1, idejecucion);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Returns all rows from ejecucionplanificacionproduccion table where IDPLANIFICACIONPRODUCCION= idplanificacionproduccion
     *
     * @param   long  idplanificacionproduccion
     * @param   Connection con
     * @return  Ejecucionplanificacionproduccion[]
     */
    public Ejecucionplanificacionproduccion[] findByIdplanificacionproduccion(long idplanificacionproduccion, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where idplanificacionproduccion = ? order by idplanificacionproduccion";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            stmt.setLong(1, idplanificacionproduccion);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Returns all rows from ejecucionplanificacionproduccion table where FECHAINICIO= fechainicio
     *
     * @param   Date  fechainicio
     * @param   Connection con
     * @return  Ejecucionplanificacionproduccion[]
     */
    public Ejecucionplanificacionproduccion[] findByFechainicio(Date fechainicio, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where fechainicio = ? order by fechainicio";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            stmt.setDate(1, fechainicio);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Returns all rows from ejecucionplanificacionproduccion table where FECHAFIN= fechafin
     *
     * @param   Date  fechafin
     * @param   Connection con
     * @return  Ejecucionplanificacionproduccion[]
     */
    public Ejecucionplanificacionproduccion[] findByFechafin(Date fechafin, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where fechafin = ? order by fechafin";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            stmt.setDate(1, fechafin);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Returns all rows from ejecucionplanificacionproduccion table where HORAINICIO= horainicio
     *
     * @param   Time  horainicio
     * @param   Connection con
     * @return  Ejecucionplanificacionproduccion[]
     */
    public Ejecucionplanificacionproduccion[] findByHorainicio(Time horainicio, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where horainicio = ? order by horainicio";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            stmt.setTime(1, horainicio);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Returns all rows from ejecucionplanificacionproduccion table where HORAFIN= horafin
     *
     * @param   Time  horafin
     * @param   Connection con
     * @return  Ejecucionplanificacionproduccion[]
     */
    public Ejecucionplanificacionproduccion[] findByHorafin(Time horafin, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where horafin = ? order by horafin";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            stmt.setTime(1, horafin);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Returns all rows from ejecucionplanificacionproduccion table where ESTADO= estado
     *
     * @param   long  estado
     * @param   Connection con
     * @return  Ejecucionplanificacionproduccion[]
     */
    public Ejecucionplanificacionproduccion[] findByEstado(long estado, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion where estado = ? order by estado";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            stmt.setLong(1, estado);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     * Returns all rows from ejecucionplanificacionproduccion table
     *
     * @param Connection con
     * @return  Ejecucionplanificacionproduccion[]
     *
     */
    public Ejecucionplanificacionproduccion[] findAll(Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion";
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     * Returns rows from ejecucionplanificacionproduccion table by executing the passed sql statement
     * after setting the passed values in Object[]
     *
     * @param String selectStatement
     * @param Object[] sqlParams
     * @param Connection con
     * @return  Ejecucionplanificacionproduccion[]
     *
     */
    public Ejecucionplanificacionproduccion[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        final String SQL_STATEMENT = selectStatement;
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            for (int i = 0; i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     * Returns rows from ejecucionplanificacionproduccion table by executing the select all fields statement
     * after setting the passed where clause and values in Object[]
     *
     * @param String whereClause
     * @param Object[] sqlParams
     * @param Connection con
     * @return  Ejecucionplanificacionproduccion[]
     *
     */
    public Ejecucionplanificacionproduccion[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws EjecucionplanificacionproduccionException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_SELECT = "Select idejecucion, idplanificacionproduccion, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacionproduccion";
        final String SQL_STATEMENT = SQL_SELECT + " where " + whereClause;
        try {
            stmt = con.prepareStatement(SQL_STATEMENT);
            for (int i = 0; i < sqlParams.length; i++) {
                stmt.setObject(i + 1, sqlParams[i]);
            }
            rs = stmt.executeQuery();
            return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new EjecucionplanificacionproduccionException(sqle);
        } catch (Exception e) {
            throw new EjecucionplanificacionproduccionException(e);
        } finally {
        }
    }

    /**
     *
     * Populates a Data Transfer Object by fetching single record from resultSet
     *
     * @param ResultSet rs
     * @return  Ejecucionplanificacionproduccion
     *
     */
    protected Ejecucionplanificacionproduccion fetchSingleResult(ResultSet rs) throws SQLException {
        if (rs.next()) {
            Ejecucionplanificacionproduccion dto = new Ejecucionplanificacionproduccion();
            populateVO(dto, rs);
            return dto;
        } else {
            return null;
        }
    }

    /**
     *
     * Populates a Data Transfer Object by fetching data from  ResultSet
     *
     * @param Ejecucionplanificacionproduccion dto
     * @param   ResultSet rs
     * @return  void
     */
    protected void populateVO(Ejecucionplanificacionproduccion dto, ResultSet rs) throws SQLException {
        dto.setIdejecucion(rs.getLong("idejecucion"));
        dto.setIdplanificacionproduccion(rs.getLong("idplanificacionproduccion"));
        dto.setFechainicio(rs.getDate("fechainicio"));
        dto.setFechafin(rs.getDate("fechafin"));
        dto.setHorainicio(rs.getTime("horainicio"));
        dto.setHorafin(rs.getTime("horafin"));
        dto.setEstado(rs.getLong("estado"));
    }

    /**
     *
     * Returns an array of Value Objects by fetching data from resultSet
     *
     * @param   ResultSet rs
     * @return  Ejecucionplanificacionproduccion[]
     */
    protected Ejecucionplanificacionproduccion[] fetchMultiResults(ResultSet rs) throws SQLException {
        Collection resultList = new ArrayList();
        while (rs.next()) {
            Ejecucionplanificacionproduccion dto = new Ejecucionplanificacionproduccion();
            populateVO(dto, rs);
            resultList.add(dto);
        }
        Ejecucionplanificacionproduccion ret[] = new Ejecucionplanificacionproduccion[resultList.size()];
        resultList.toArray(ret);
        return ret;
    }
}
