/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:05 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of ResponsableDAO interface 
* 
*/


public class ResponsableDAOImpl implements ResponsableDAO
{


/**
* Method deletes a record from table RESPONSABLE
* @param ResponsablePK responsablepk
* @param  Connection  con
* @return  int
*
*/


	public int delete(ResponsablePK responsablepk , Connection con)throws ResponsableException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  RESPONSABLE where idresponsable = ?");
			ps.setLong(1, responsablepk.getIdresponsable());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new ResponsableException(sqle);}
		catch(Exception e) {throw new ResponsableException(e);}
	}



/**
* This method updates a record in table RESPONSABLE
* @param ResponsablePK
* @param Responsable
* @param  Connection con
* @return   int
*/

	public int update(ResponsablePK responsablepk, Responsable responsable, Connection con)throws ResponsableException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update RESPONSABLE set NOMBRE = ? , APELLIDO = ? , TELEFONO = ? , EMAIL = ? , DOMICILIO = ? , NRODOCUMENTO = ? , TIPODOCUMENTO = ? , FAX = ?  where idresponsable = ?");
				ps.setString(1,responsable.getNombre());
				ps.setString(2,responsable.getApellido());
				ps.setString(3,responsable.getTelefono());
				ps.setString(4,responsable.getEmail());
				ps.setLong(5,responsable.getDomicilio());
				ps.setInt(6,responsable.getNrodocumento());
				ps.setLong(7,responsable.getTipodocumento());
				ps.setString(8,responsable.getFax());
				ps.setLong(9,responsablepk.getIdresponsable());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ResponsableException(sqle);}
		catch(Exception e){throw new ResponsableException(e);}
	}

/**
* This method inserts data in table RESPONSABLE
*
* @param Responsable responsable
* @param   Connection con
* @return  ResponsablePK
*/

	public int insert(Responsable responsable ,Connection con)throws ResponsableException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into RESPONSABLE( NOMBRE, APELLIDO, TELEFONO, EMAIL, DOMICILIO, NRODOCUMENTO, TIPODOCUMENTO, FAX) values (?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setString(1,responsable.getNombre());
				ps.setString(2,responsable.getApellido());
				ps.setString(3,responsable.getTelefono());
				ps.setString(4,responsable.getEmail());
				ps.setLong(5,responsable.getDomicilio());
				ps.setInt(6,responsable.getNrodocumento());
				ps.setLong(7,responsable.getTipodocumento());
				ps.setString(8,responsable.getFax());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ResponsableException(sqle);}
		catch(Exception e){throw new ResponsableException(e);}
	}

/**
* 
* Returns a row from the Responsable table for the primary key passed as parameter.
* 
*/

	public Responsable findByPrimaryKey(long idresponsable, Connection con) throws ResponsableException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where idresponsable = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idresponsable);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new ResponsableException(sqle);
	  	}
	    catch(Exception e){throw new ResponsableException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the Responsable table for the primary key object passed as parameter.
* 
* @param  ResponsablePK responsablepk
* @param Connection con
* @return  Responsable
*/

	public Responsable findByPrimaryKey(ResponsablePK responsablepk, Connection con) throws ResponsableException{
		return findByPrimaryKey(responsablepk.getIdresponsable(), con);
	}

/**
*
* Returns all rows from responsable table where IDRESPONSABLE= idresponsable
*
* @param   long  idresponsable
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByIdresponsable(long idresponsable, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where idresponsable = ? order by idresponsable";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idresponsable );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByNombre(String nombre, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where APELLIDO= apellido
*
* @param   String  apellido
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByApellido(String apellido, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where apellido = ? order by apellido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, apellido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where TELEFONO= telefono
*
* @param   String  telefono
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByTelefono(String telefono, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where telefono = ? order by telefono";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, telefono );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where EMAIL= email
*
* @param   String  email
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByEmail(String email, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where email = ? order by email";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, email );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where DOMICILIO= domicilio
*
* @param   long  domicilio
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByDomicilio(long domicilio, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where domicilio = ? order by domicilio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, domicilio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where NRODOCUMENTO= nrodocumento
*
* @param   int  nrodocumento
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByNrodocumento(int nrodocumento, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where nrodocumento = ? order by nrodocumento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, nrodocumento );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where TIPODOCUMENTO= tipodocumento
*
* @param   long  tipodocumento
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByTipodocumento(long tipodocumento, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where tipodocumento = ? order by tipodocumento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, tipodocumento );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from responsable table where FAX= fax
*
* @param   String  fax
* @param   Connection con
* @return  Responsable[]
*/

	public Responsable[] findByFax(String fax, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable where fax = ? order by fax";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, fax );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
* Returns all rows from Responsable table 
*
* @param Connection con
* @return  Responsable[]
*
*/

	public Responsable[] findAll( Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
* Returns rows from Responsable table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Responsable[]
*
*/

	public Responsable[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
* Returns rows from Responsable table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Responsable[]
*
*/

	public Responsable[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws ResponsableException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idresponsable, nombre, apellido, telefono, email, domicilio, nrodocumento, tipodocumento, fax from responsable";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ResponsableException(sqle);
			}
			catch(Exception e){
					throw new ResponsableException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Responsable
*
*/

	protected Responsable fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Responsable dto = new Responsable();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Responsable dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Responsable dto, ResultSet rs) throws SQLException
	{
		 dto.setIdresponsable(rs.getLong("idresponsable"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setApellido(rs.getString("apellido"));
		 dto.setTelefono(rs.getString("telefono"));
		 dto.setEmail(rs.getString("email"));
		 dto.setDomicilio(rs.getLong("domicilio"));
		 dto.setNrodocumento(rs.getInt("nrodocumento"));
		 dto.setTipodocumento(rs.getLong("tipodocumento"));
		 dto.setFax(rs.getString("fax"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Responsable[]
*/

	protected Responsable[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Responsable dto = new Responsable();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Responsable ret[] = new Responsable[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
