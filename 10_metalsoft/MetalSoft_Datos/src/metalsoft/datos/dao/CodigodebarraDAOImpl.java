/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:38:34 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of CodigodebarraDAO interface 
* 
*/


public class CodigodebarraDAOImpl implements CodigodebarraDAO
{


/**
* Method deletes a record from table CODIGODEBARRA
* @param CodigodebarraPK codigodebarrapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(CodigodebarraPK codigodebarrapk , Connection con)throws CodigodebarraException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  CODIGODEBARRA where idcodigo = ?");
			ps.setLong(1, codigodebarrapk.getIdcodigo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new CodigodebarraException(sqle);}
		catch(Exception e) {throw new CodigodebarraException(e);}
	}



/**
* This method updates a record in table CODIGODEBARRA
* @param CodigodebarraPK
* @param Codigodebarra
* @param  Connection con
* @return   int
*/

	public int update(CodigodebarraPK codigodebarrapk, Codigodebarra codigodebarra, Connection con)throws CodigodebarraException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update CODIGODEBARRA set DESCRIPCION = ? , CODIGO = ?  where idcodigo = ?");
				ps.setString(1,codigodebarra.getDescripcion());
				ps.setString(2,codigodebarra.getCodigo());
				ps.setLong(3,codigodebarrapk.getIdcodigo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new CodigodebarraException(sqle);}
		catch(Exception e){throw new CodigodebarraException(e);}
	}

/**
* This method inserts data in table CODIGODEBARRA
*
* @param Codigodebarra codigodebarra
* @param   Connection con
* @return  CodigodebarraPK
*/

	public int insert(Codigodebarra codigodebarra ,Connection con)throws CodigodebarraException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into CODIGODEBARRA( IDCODIGO, DESCRIPCION, CODIGO) values (?, ?, ?)");
				ps.setLong(1,codigodebarra.getIdcodigo());
				ps.setString(2,codigodebarra.getDescripcion());
				ps.setString(3,codigodebarra.getCodigo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new CodigodebarraException(sqle);}
		catch(Exception e){throw new CodigodebarraException(e);}
	}

/**
* 
* Returns a row from the codigodebarra table for the primary key passed as parameter.
* 
*/

	public Codigodebarra findByPrimaryKey(long idcodigo, Connection con) throws CodigodebarraException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idcodigo, descripcion, codigo from codigodebarra where idcodigo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idcodigo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new CodigodebarraException(sqle);
	  	}
	    catch(Exception e){throw new CodigodebarraException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the codigodebarra table for the primary key object passed as parameter.
* 
* @param  CodigodebarraPK codigodebarrapk
* @param Connection con
* @return  Codigodebarra
*/

	public Codigodebarra findByPrimaryKey(CodigodebarraPK codigodebarrapk, Connection con) throws CodigodebarraException{
		return findByPrimaryKey(codigodebarrapk.getIdcodigo(), con);
	}

/**
*
* Returns all rows from codigodebarra table where IDCODIGO= idcodigo
*
* @param   long  idcodigo
* @param   Connection con
* @return  Codigodebarra[]
*/

	public Codigodebarra[] findByIdcodigo(long idcodigo, Connection con) throws CodigodebarraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcodigo, descripcion, codigo from codigodebarra where idcodigo = ? order by idcodigo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idcodigo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CodigodebarraException(sqle);
			}
			catch(Exception e){
					throw new CodigodebarraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from codigodebarra table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Codigodebarra[]
*/

	public Codigodebarra[] findByDescripcion(String descripcion, Connection con) throws CodigodebarraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcodigo, descripcion, codigo from codigodebarra where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CodigodebarraException(sqle);
			}
			catch(Exception e){
					throw new CodigodebarraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from codigodebarra table where CODIGO= codigo
*
* @param   String  codigo
* @param   Connection con
* @return  Codigodebarra[]
*/

	public Codigodebarra[] findByCodigo(String codigo, Connection con) throws CodigodebarraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcodigo, descripcion, codigo from codigodebarra where codigo = ? order by codigo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, codigo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CodigodebarraException(sqle);
			}
			catch(Exception e){
					throw new CodigodebarraException(e);
			}
			finally{}
	}

/**
* Returns all rows from codigodebarra table 
*
* @param Connection con
* @return  Codigodebarra[]
*
*/

	public Codigodebarra[] findAll( Connection con) throws CodigodebarraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcodigo, descripcion, codigo from codigodebarra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CodigodebarraException(sqle);
			}
			catch(Exception e){
					throw new CodigodebarraException(e);
			}
			finally{}
	}

/**
* Returns rows from codigodebarra table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Codigodebarra[]
*
*/

	public Codigodebarra[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws CodigodebarraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CodigodebarraException(sqle);
			}
			catch(Exception e){
					throw new CodigodebarraException(e);
			}
			finally{}
	}

/**
* Returns rows from codigodebarra table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Codigodebarra[]
*
*/

	public Codigodebarra[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws CodigodebarraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idcodigo, descripcion, codigo from codigodebarra";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CodigodebarraException(sqle);
			}
			catch(Exception e){
					throw new CodigodebarraException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Codigodebarra
*
*/

	protected Codigodebarra fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Codigodebarra dto = new Codigodebarra();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Codigodebarra dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Codigodebarra dto, ResultSet rs) throws SQLException
	{
		 dto.setIdcodigo(rs.getLong("idcodigo"));
		 dto.setDescripcion(rs.getString("descripcion"));
		 dto.setCodigo(rs.getString("codigo"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Codigodebarra[]
*/

	protected Codigodebarra[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Codigodebarra dto = new Codigodebarra();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Codigodebarra ret[] = new Codigodebarra[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
