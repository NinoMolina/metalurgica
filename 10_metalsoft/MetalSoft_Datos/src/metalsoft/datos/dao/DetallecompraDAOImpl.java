/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:01 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallecompraDAO interface 
* 
*/


public class DetallecompraDAOImpl implements DetallecompraDAO
{


/**
* Method deletes a record from table DETALLECOMPRA
* @param DetallecompraPK detallecomprapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallecompraPK detallecomprapk , Connection con)throws DetallecompraException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLECOMPRA where iddetalle = ? AND idcompra = ?");
			ps.setLong(1, detallecomprapk.getIddetalle());
			ps.setLong(2, detallecomprapk.getIdcompra());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallecompraException(sqle);}
		catch(Exception e) {throw new DetallecompraException(e);}
	}



/**
* This method updates a record in table DETALLECOMPRA
* @param DetallecompraPK
* @param Detallecompra
* @param  Connection con
* @return   int
*/

	public int update(DetallecompraPK detallecomprapk, Detallecompra detallecompra, Connection con)throws DetallecompraException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLECOMPRA set CANTIDAD = ? , MATERIAPRIMA = ? , PRECIOHISTORICO = ? , FECHARECEPCIONPARCIAL = ? , ESTADO = ?  where iddetalle = ? AND idcompra = ?");
				ps.setInt(1,detallecompra.getCantidad());
				ps.setLong(2,detallecompra.getMateriaprima());
				ps.setDouble(3,detallecompra.getPreciohistorico());
				ps.setDate(4,detallecompra.getFecharecepcionparcial());
				ps.setLong(5,detallecompra.getEstado());
				ps.setLong(6,detallecomprapk.getIddetalle());
				ps.setLong(7,detallecomprapk.getIdcompra());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallecompraException(sqle);}
		catch(Exception e){throw new DetallecompraException(e);}
	}

/**
* This method inserts data in table DETALLECOMPRA
*
* @param Detallecompra detallecompra
* @param   Connection con
* @return  DetallecompraPK
*/

	public int insert(Detallecompra detallecompra ,Connection con)throws DetallecompraException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLECOMPRA( IDCOMPRA, CANTIDAD, MATERIAPRIMA, PRECIOHISTORICO, FECHARECEPCIONPARCIAL, ESTADO) values (?, ?, ?, ?, ?, ?)");
				ps.setLong(1,detallecompra.getIdcompra());
				ps.setInt(2,detallecompra.getCantidad());
				ps.setLong(3,detallecompra.getMateriaprima());
				ps.setDouble(4,detallecompra.getPreciohistorico());
				ps.setDate(5,detallecompra.getFecharecepcionparcial());
				ps.setLong(6,detallecompra.getEstado());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallecompraException(sqle);}
		catch(Exception e){throw new DetallecompraException(e);}
	}

/**
* 
* Returns a row from the detallecompra table for the primary key passed as parameter.
* 
*/

	public Detallecompra findByPrimaryKey(long iddetalle, long idcompra, Connection con) throws DetallecompraException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where iddetalle = ? AND idcompra = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idcompra);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallecompraException(sqle);
	  	}
	    catch(Exception e){throw new DetallecompraException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallecompra table for the primary key object passed as parameter.
* 
* @param  DetallecompraPK detallecomprapk
* @param Connection con
* @return  Detallecompra
*/

	public Detallecompra findByPrimaryKey(DetallecompraPK detallecomprapk, Connection con) throws DetallecompraException{
		return findByPrimaryKey(detallecomprapk.getIddetalle(), detallecomprapk.getIdcompra(), con);
	}

/**
*
* Returns all rows from detallecompra table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallecompra[]
*/

	public Detallecompra[] findByIddetalle(long iddetalle, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallecompra table where IDCOMPRA= idcompra
*
* @param   long  idcompra
* @param   Connection con
* @return  Detallecompra[]
*/

	public Detallecompra[] findByIdcompra(long idcompra, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where idcompra = ? order by idcompra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idcompra );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallecompra table where CANTIDAD= cantidad
*
* @param   int  cantidad
* @param   Connection con
* @return  Detallecompra[]
*/

	public Detallecompra[] findByCantidad(int cantidad, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where cantidad = ? order by cantidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallecompra table where MATERIAPRIMA= materiaprima
*
* @param   long  materiaprima
* @param   Connection con
* @return  Detallecompra[]
*/

	public Detallecompra[] findByMateriaprima(long materiaprima, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where materiaprima = ? order by materiaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, materiaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallecompra table where PRECIOHISTORICO= preciohistorico
*
* @param   double  preciohistorico
* @param   Connection con
* @return  Detallecompra[]
*/

	public Detallecompra[] findByPreciohistorico(double preciohistorico, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where preciohistorico = ? order by preciohistorico";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDouble( 1, preciohistorico );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallecompra table where FECHARECEPCIONPARCIAL= fecharecepcionparcial
*
* @param   Date  fecharecepcionparcial
* @param   Connection con
* @return  Detallecompra[]
*/

	public Detallecompra[] findByFecharecepcionparcial(Date fecharecepcionparcial, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where fecharecepcionparcial = ? order by fecharecepcionparcial";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fecharecepcionparcial );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallecompra table where ESTADO= estado
*
* @param   long  estado
* @param   Connection con
* @return  Detallecompra[]
*/

	public Detallecompra[] findByEstado(long estado, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra where estado = ? order by estado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, estado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallecompra table 
*
* @param Connection con
* @return  Detallecompra[]
*
*/

	public Detallecompra[] findAll( Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
* Returns rows from detallecompra table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallecompra[]
*
*/

	public Detallecompra[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
* Returns rows from detallecompra table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallecompra[]
*
*/

	public Detallecompra[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallecompraException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idcompra, cantidad, materiaprima, preciohistorico, fecharecepcionparcial, estado from detallecompra";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallecompraException(sqle);
			}
			catch(Exception e){
					throw new DetallecompraException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallecompra
*
*/

	protected Detallecompra fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallecompra dto = new Detallecompra();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallecompra dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallecompra dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdcompra(rs.getLong("idcompra"));
		 dto.setCantidad(rs.getInt("cantidad"));
		 dto.setMateriaprima(rs.getLong("materiaprima"));
		 dto.setPreciohistorico(rs.getDouble("preciohistorico"));
		 dto.setFecharecepcionparcial(rs.getDate("fecharecepcionparcial"));
		 dto.setEstado(rs.getLong("estado"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallecompra[]
*/

	protected Detallecompra[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallecompra dto = new Detallecompra();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallecompra ret[] = new Detallecompra[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
