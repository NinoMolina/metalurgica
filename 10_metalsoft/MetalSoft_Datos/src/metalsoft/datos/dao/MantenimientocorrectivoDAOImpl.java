/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of MantenimientocorrectivoDAO interface 
* 
*/


public class MantenimientocorrectivoDAOImpl implements MantenimientocorrectivoDAO
{


/**
* Method deletes a record from table MANTENIMIENTOCORRECTIVO
* @param MantenimientocorrectivoPK mantenimientocorrectivopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(MantenimientocorrectivoPK mantenimientocorrectivopk , Connection con)throws MantenimientocorrectivoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  MANTENIMIENTOCORRECTIVO where idmantenimientocorrectivo = ?");
			ps.setLong(1, mantenimientocorrectivopk.getIdmantenimientocorrectivo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new MantenimientocorrectivoException(sqle);}
		catch(Exception e) {throw new MantenimientocorrectivoException(e);}
	}



/**
* This method updates a record in table MANTENIMIENTOCORRECTIVO
* @param MantenimientocorrectivoPK
* @param Mantenimientocorrectivo
* @param  Connection con
* @return   int
*/

	public int update(MantenimientocorrectivoPK mantenimientocorrectivopk, Mantenimientocorrectivo mantenimientocorrectivo, Connection con)throws MantenimientocorrectivoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update MANTENIMIENTOCORRECTIVO set FECHAENVIOMANTENIMIENTO = ? , HORAENVIOMANTENIMIENTO = ? , NROMANTENIMIENTOCORRECTIVO = ? , EMPLEADO = ? , NROCOMPROBANTEARREGLO = ? , PROVEEDORMANTENIMIENTO = ? , FECHAFINMANTENIMIENTOREAL = ? , MAQUINA = ?  where idmantenimientocorrectivo = ?");
				ps.setDate(1,mantenimientocorrectivo.getFechaenviomantenimiento());
				ps.setTime(2,mantenimientocorrectivo.getHoraenviomantenimiento());
				ps.setLong(3,mantenimientocorrectivo.getNromantenimientocorrectivo());
				ps.setLong(4,mantenimientocorrectivo.getEmpleado());
				ps.setLong(5,mantenimientocorrectivo.getNrocomprobantearreglo());
				ps.setLong(6,mantenimientocorrectivo.getProveedormantenimiento());
				ps.setDate(7,mantenimientocorrectivo.getFechafinmantenimientoreal());
				ps.setLong(8,mantenimientocorrectivo.getMaquina());
				ps.setLong(9,mantenimientocorrectivopk.getIdmantenimientocorrectivo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MantenimientocorrectivoException(sqle);}
		catch(Exception e){throw new MantenimientocorrectivoException(e);}
	}

/**
* This method inserts data in table MANTENIMIENTOCORRECTIVO
*
* @param Mantenimientocorrectivo mantenimientocorrectivo
* @param   Connection con
* @return  MantenimientocorrectivoPK
*/

	public int insert(Mantenimientocorrectivo mantenimientocorrectivo ,Connection con)throws MantenimientocorrectivoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into MANTENIMIENTOCORRECTIVO( FECHAENVIOMANTENIMIENTO, HORAENVIOMANTENIMIENTO, NROMANTENIMIENTOCORRECTIVO, EMPLEADO, NROCOMPROBANTEARREGLO, PROVEEDORMANTENIMIENTO, FECHAFINMANTENIMIENTOREAL, MAQUINA) values (?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setDate(1,mantenimientocorrectivo.getFechaenviomantenimiento());
				ps.setTime(2,mantenimientocorrectivo.getHoraenviomantenimiento());
				ps.setLong(3,mantenimientocorrectivo.getNromantenimientocorrectivo());
				ps.setLong(4,mantenimientocorrectivo.getEmpleado());
				ps.setLong(5,mantenimientocorrectivo.getNrocomprobantearreglo());
				ps.setLong(6,mantenimientocorrectivo.getProveedormantenimiento());
				ps.setDate(7,mantenimientocorrectivo.getFechafinmantenimientoreal());
				ps.setLong(8,mantenimientocorrectivo.getMaquina());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MantenimientocorrectivoException(sqle);}
		catch(Exception e){throw new MantenimientocorrectivoException(e);}
	}

/**
* 
* Returns a row from the mantenimientocorrectivo table for the primary key passed as parameter.
* 
*/

	public Mantenimientocorrectivo findByPrimaryKey(long idmantenimientocorrectivo, Connection con) throws MantenimientocorrectivoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where idmantenimientocorrectivo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idmantenimientocorrectivo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new MantenimientocorrectivoException(sqle);
	  	}
	    catch(Exception e){throw new MantenimientocorrectivoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the mantenimientocorrectivo table for the primary key object passed as parameter.
* 
* @param  MantenimientocorrectivoPK mantenimientocorrectivopk
* @param Connection con
* @return  Mantenimientocorrectivo
*/

	public Mantenimientocorrectivo findByPrimaryKey(MantenimientocorrectivoPK mantenimientocorrectivopk, Connection con) throws MantenimientocorrectivoException{
		return findByPrimaryKey(mantenimientocorrectivopk.getIdmantenimientocorrectivo(), con);
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where IDMANTENIMIENTOCORRECTIVO= idmantenimientocorrectivo
*
* @param   long  idmantenimientocorrectivo
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByIdmantenimientocorrectivo(long idmantenimientocorrectivo, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where idmantenimientocorrectivo = ? order by idmantenimientocorrectivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmantenimientocorrectivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where FECHAENVIOMANTENIMIENTO= fechaenviomantenimiento
*
* @param   Date  fechaenviomantenimiento
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByFechaenviomantenimiento(Date fechaenviomantenimiento, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where fechaenviomantenimiento = ? order by fechaenviomantenimiento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaenviomantenimiento );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where HORAENVIOMANTENIMIENTO= horaenviomantenimiento
*
* @param   Time  horaenviomantenimiento
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByHoraenviomantenimiento(Time horaenviomantenimiento, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where horaenviomantenimiento = ? order by horaenviomantenimiento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horaenviomantenimiento );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where NROMANTENIMIENTOCORRECTIVO= nromantenimientocorrectivo
*
* @param   long  nromantenimientocorrectivo
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByNromantenimientocorrectivo(long nromantenimientocorrectivo, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where nromantenimientocorrectivo = ? order by nromantenimientocorrectivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nromantenimientocorrectivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where EMPLEADO= empleado
*
* @param   long  empleado
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByEmpleado(long empleado, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where empleado = ? order by empleado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, empleado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where NROCOMPROBANTEARREGLO= nrocomprobantearreglo
*
* @param   long  nrocomprobantearreglo
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByNrocomprobantearreglo(long nrocomprobantearreglo, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where nrocomprobantearreglo = ? order by nrocomprobantearreglo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nrocomprobantearreglo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where PROVEEDORMANTENIMIENTO= proveedormantenimiento
*
* @param   long  proveedormantenimiento
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByProveedormantenimiento(long proveedormantenimiento, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where proveedormantenimiento = ? order by proveedormantenimiento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, proveedormantenimiento );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where FECHAFINMANTENIMIENTOREAL= fechafinmantenimientoreal
*
* @param   Date  fechafinmantenimientoreal
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByFechafinmantenimientoreal(Date fechafinmantenimientoreal, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where fechafinmantenimientoreal = ? order by fechafinmantenimientoreal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafinmantenimientoreal );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from mantenimientocorrectivo table where MAQUINA= maquina
*
* @param   long  maquina
* @param   Connection con
* @return  Mantenimientocorrectivo[]
*/

	public Mantenimientocorrectivo[] findByMaquina(long maquina, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo where maquina = ? order by maquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, maquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
* Returns all rows from mantenimientocorrectivo table 
*
* @param Connection con
* @return  Mantenimientocorrectivo[]
*
*/

	public Mantenimientocorrectivo[] findAll( Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
* Returns rows from mantenimientocorrectivo table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Mantenimientocorrectivo[]
*
*/

	public Mantenimientocorrectivo[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
* Returns rows from mantenimientocorrectivo table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Mantenimientocorrectivo[]
*
*/

	public Mantenimientocorrectivo[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws MantenimientocorrectivoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idmantenimientocorrectivo, fechaenviomantenimiento, horaenviomantenimiento, nromantenimientocorrectivo, empleado, nrocomprobantearreglo, proveedormantenimiento, fechafinmantenimientoreal, maquina from mantenimientocorrectivo";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MantenimientocorrectivoException(sqle);
			}
			catch(Exception e){
					throw new MantenimientocorrectivoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Mantenimientocorrectivo
*
*/

	protected Mantenimientocorrectivo fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Mantenimientocorrectivo dto = new Mantenimientocorrectivo();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Mantenimientocorrectivo dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Mantenimientocorrectivo dto, ResultSet rs) throws SQLException
	{
		 dto.setIdmantenimientocorrectivo(rs.getLong("idmantenimientocorrectivo"));
		 dto.setFechaenviomantenimiento(rs.getDate("fechaenviomantenimiento"));
		 dto.setHoraenviomantenimiento(rs.getTime("horaenviomantenimiento"));
		 dto.setNromantenimientocorrectivo(rs.getLong("nromantenimientocorrectivo"));
		 dto.setEmpleado(rs.getLong("empleado"));
		 dto.setNrocomprobantearreglo(rs.getLong("nrocomprobantearreglo"));
		 dto.setProveedormantenimiento(rs.getLong("proveedormantenimiento"));
		 dto.setFechafinmantenimientoreal(rs.getDate("fechafinmantenimientoreal"));
		 dto.setMaquina(rs.getLong("maquina"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Mantenimientocorrectivo[]
*/

	protected Mantenimientocorrectivo[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Mantenimientocorrectivo dto = new Mantenimientocorrectivo();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Mantenimientocorrectivo ret[] = new Mantenimientocorrectivo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
