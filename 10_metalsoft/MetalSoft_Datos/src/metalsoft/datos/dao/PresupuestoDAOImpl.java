/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:04 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PresupuestoDAO interface 
* 
*/


public class PresupuestoDAOImpl implements PresupuestoDAO
{


/**
* Method deletes a record from table PRESUPUESTO
* @param PresupuestoPK presupuestopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PresupuestoPK presupuestopk , Connection con)throws PresupuestoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PRESUPUESTO where idpresupuesto = ?");
			ps.setLong(1, presupuestopk.getIdpresupuesto());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PresupuestoException(sqle);}
		catch(Exception e) {throw new PresupuestoException(e);}
	}



/**
* This method updates a record in table PRESUPUESTO
* @param PresupuestoPK
* @param Presupuesto
* @param  Connection con
* @return   int
*/

	public int update(PresupuestoPK presupuestopk, Presupuesto presupuesto, Connection con)throws PresupuestoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PRESUPUESTO set FECHAPRESUPUESTO = ? , MONTOTOTAL = ? , FECHAVENCIMIENTO = ?  where idpresupuesto = ?");
				ps.setDate(1,presupuesto.getFechapresupuesto());
				ps.setDouble(2,presupuesto.getMontototal());
				ps.setDate(3,presupuesto.getFechavencimiento());
				ps.setLong(4,presupuestopk.getIdpresupuesto());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PresupuestoException(sqle);}
		catch(Exception e){throw new PresupuestoException(e);}
	}

/**
* This method inserts data in table PRESUPUESTO
*
* @param Presupuesto presupuesto
* @param   Connection con
* @return  PresupuestoPK
*/

	public int insert(Presupuesto presupuesto ,Connection con)throws PresupuestoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PRESUPUESTO( FECHAPRESUPUESTO, MONTOTOTAL, FECHAVENCIMIENTO) values (?, ?, ?)");
				ps.setDate(1,presupuesto.getFechapresupuesto());
				ps.setDouble(2,presupuesto.getMontototal());
				ps.setDate(3,presupuesto.getFechavencimiento());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PresupuestoException(sqle);}
		catch(Exception e){throw new PresupuestoException(e);}
	}

/**
* 
* Returns a row from the presupuesto table for the primary key passed as parameter.
* 
*/

	public Presupuesto findByPrimaryKey(long idpresupuesto, Connection con) throws PresupuestoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idpresupuesto, fechapresupuesto, montototal, fechavencimiento from presupuesto where idpresupuesto = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idpresupuesto);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PresupuestoException(sqle);
	  	}
	    catch(Exception e){throw new PresupuestoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the presupuesto table for the primary key object passed as parameter.
* 
* @param  PresupuestoPK presupuestopk
* @param Connection con
* @return  Presupuesto
*/

	public Presupuesto findByPrimaryKey(PresupuestoPK presupuestopk, Connection con) throws PresupuestoException{
		return findByPrimaryKey(presupuestopk.getIdpresupuesto(), con);
	}

/**
*
* Returns all rows from presupuesto table where IDPRESUPUESTO= idpresupuesto
*
* @param   long  idpresupuesto
* @param   Connection con
* @return  Presupuesto[]
*/

	public Presupuesto[] findByIdpresupuesto(long idpresupuesto, Connection con) throws PresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpresupuesto, fechapresupuesto, montototal, fechavencimiento from presupuesto where idpresupuesto = ? order by idpresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpresupuesto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PresupuestoException(sqle);
			}
			catch(Exception e){
					throw new PresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from presupuesto table where FECHAPRESUPUESTO= fechapresupuesto
*
* @param   Date  fechapresupuesto
* @param   Connection con
* @return  Presupuesto[]
*/

	public Presupuesto[] findByFechapresupuesto(Date fechapresupuesto, Connection con) throws PresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpresupuesto, fechapresupuesto, montototal, fechavencimiento from presupuesto where fechapresupuesto = ? order by fechapresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechapresupuesto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PresupuestoException(sqle);
			}
			catch(Exception e){
					throw new PresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from presupuesto table where MONTOTOTAL= montototal
*
* @param   double  montototal
* @param   Connection con
* @return  Presupuesto[]
*/

	public Presupuesto[] findByMontototal(double montototal, Connection con) throws PresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpresupuesto, fechapresupuesto, montototal, fechavencimiento from presupuesto where montototal = ? order by montototal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDouble( 1, montototal );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PresupuestoException(sqle);
			}
			catch(Exception e){
					throw new PresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from presupuesto table where FECHAVENCIMIENTO= fechavencimiento
*
* @param   Date  fechavencimiento
* @param   Connection con
* @return  Presupuesto[]
*/

	public Presupuesto[] findByFechavencimiento(Date fechavencimiento, Connection con) throws PresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpresupuesto, fechapresupuesto, montototal, fechavencimiento from presupuesto where fechavencimiento = ? order by fechavencimiento";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechavencimiento );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PresupuestoException(sqle);
			}
			catch(Exception e){
					throw new PresupuestoException(e);
			}
			finally{}
	}

/**
* Returns all rows from presupuesto table 
*
* @param Connection con
* @return  Presupuesto[]
*
*/

	public Presupuesto[] findAll( Connection con) throws PresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpresupuesto, fechapresupuesto, montototal, fechavencimiento from presupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PresupuestoException(sqle);
			}
			catch(Exception e){
					throw new PresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from presupuesto table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Presupuesto[]
*
*/

	public Presupuesto[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PresupuestoException(sqle);
			}
			catch(Exception e){
					throw new PresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from presupuesto table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Presupuesto[]
*
*/

	public Presupuesto[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idpresupuesto, fechapresupuesto, montototal, fechavencimiento from presupuesto";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PresupuestoException(sqle);
			}
			catch(Exception e){
					throw new PresupuestoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Presupuesto
*
*/

	protected Presupuesto fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Presupuesto dto = new Presupuesto();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Presupuesto dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Presupuesto dto, ResultSet rs) throws SQLException
	{
		 dto.setIdpresupuesto(rs.getLong("idpresupuesto"));
		 dto.setFechapresupuesto(rs.getDate("fechapresupuesto"));
		 dto.setMontototal(rs.getDouble("montototal"));
		 dto.setFechavencimiento(rs.getDate("fechavencimiento"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Presupuesto[]
*/

	protected Presupuesto[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Presupuesto dto = new Presupuesto();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Presupuesto ret[] = new Presupuesto[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
