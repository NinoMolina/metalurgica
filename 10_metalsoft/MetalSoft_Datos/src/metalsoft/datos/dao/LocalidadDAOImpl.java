/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:39:12 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of LocalidadDAO interface 
* 
*/


public class LocalidadDAOImpl implements LocalidadDAO
{


/**
* Method deletes a record from table LOCALIDAD
* @param LocalidadPK localidadpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(LocalidadPK localidadpk , Connection con)throws LocalidadException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  LOCALIDAD where idlocalidad = ?");
			ps.setLong(1, localidadpk.getIdlocalidad());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new LocalidadException(sqle);}
		catch(Exception e) {throw new LocalidadException(e);}
	}



/**
* This method updates a record in table LOCALIDAD
* @param LocalidadPK
* @param Localidad
* @param  Connection con
* @return   int
*/

	public int update(LocalidadPK localidadpk, Localidad localidad, Connection con)throws LocalidadException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update LOCALIDAD set NOMBRE = ? , PROVINCIA = ?  where idlocalidad = ?");
				ps.setString(1,localidad.getNombre());
				ps.setLong(2,localidad.getProvincia());
				ps.setLong(3,localidadpk.getIdlocalidad());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new LocalidadException(sqle);}
		catch(Exception e){throw new LocalidadException(e);}
	}

/**
* This method inserts data in table LOCALIDAD
*
* @param Localidad localidad
* @param   Connection con
* @return  LocalidadPK
*/

	public int insert(Localidad localidad ,Connection con)throws LocalidadException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into LOCALIDAD( IDLOCALIDAD, NOMBRE, PROVINCIA) values (?, ?, ?)");
				ps.setLong(1,localidad.getIdlocalidad());
				ps.setString(2,localidad.getNombre());
				ps.setLong(3,localidad.getProvincia());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new LocalidadException(sqle);}
		catch(Exception e){throw new LocalidadException(e);}
	}

/**
* 
* Returns a row from the localidad table for the primary key passed as parameter.
* 
*/

	public Localidad findByPrimaryKey(long idlocalidad, Connection con) throws LocalidadException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idlocalidad, nombre, provincia from localidad where idlocalidad = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idlocalidad);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new LocalidadException(sqle);
	  	}
	    catch(Exception e){throw new LocalidadException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the localidad table for the primary key object passed as parameter.
* 
* @param  LocalidadPK localidadpk
* @param Connection con
* @return  Localidad
*/

	public Localidad findByPrimaryKey(LocalidadPK localidadpk, Connection con) throws LocalidadException{
		return findByPrimaryKey(localidadpk.getIdlocalidad(), con);
	}

/**
*
* Returns all rows from localidad table where IDLOCALIDAD= idlocalidad
*
* @param   long  idlocalidad
* @param   Connection con
* @return  Localidad[]
*/

	public Localidad[] findByIdlocalidad(long idlocalidad, Connection con) throws LocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idlocalidad, nombre, provincia from localidad where idlocalidad = ? order by idlocalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idlocalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new LocalidadException(sqle);
			}
			catch(Exception e){
					throw new LocalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from localidad table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Localidad[]
*/

	public Localidad[] findByNombre(String nombre, Connection con) throws LocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idlocalidad, nombre, provincia from localidad where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new LocalidadException(sqle);
			}
			catch(Exception e){
					throw new LocalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from localidad table where PROVINCIA= provincia
*
* @param   long  provincia
* @param   Connection con
* @return  Localidad[]
*/

	public Localidad[] findByProvincia(long provincia, Connection con) throws LocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idlocalidad, nombre, provincia from localidad where provincia = ? order by provincia";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, provincia );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new LocalidadException(sqle);
			}
			catch(Exception e){
					throw new LocalidadException(e);
			}
			finally{}
	}

/**
* Returns all rows from localidad table 
*
* @param Connection con
* @return  Localidad[]
*
*/

	public Localidad[] findAll( Connection con) throws LocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idlocalidad, nombre, provincia from localidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new LocalidadException(sqle);
			}
			catch(Exception e){
					throw new LocalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from localidad table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Localidad[]
*
*/

	public Localidad[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws LocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new LocalidadException(sqle);
			}
			catch(Exception e){
					throw new LocalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from localidad table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Localidad[]
*
*/

	public Localidad[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws LocalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idlocalidad, nombre, provincia from localidad";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new LocalidadException(sqle);
			}
			catch(Exception e){
					throw new LocalidadException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Localidad
*
*/

	protected Localidad fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Localidad dto = new Localidad();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Localidad dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Localidad dto, ResultSet rs) throws SQLException
	{
		 dto.setIdlocalidad(rs.getLong("idlocalidad"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setProvincia(rs.getLong("provincia"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Localidad[]
*/

	protected Localidad[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Localidad dto = new Localidad();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Localidad ret[] = new Localidad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
