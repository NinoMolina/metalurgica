/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:02 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallerequerimientosmateriaprimaDAO interface 
* 
*/


public class DetallerequerimientosmateriaprimaDAOImpl implements DetallerequerimientosmateriaprimaDAO
{


/**
* Method deletes a record from table DETALLEREQUERIMIENTOSMATERIAPRIMA
* @param DetallerequerimientosmateriaprimaPK detallerequerimientosmateriaprimapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallerequerimientosmateriaprimaPK detallerequerimientosmateriaprimapk , Connection con)throws DetallerequerimientosmateriaprimaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEREQUERIMIENTOSMATERIAPRIMA where iddetalle = ? AND idplanrequerimientosmateriaprima = ?");
			ps.setLong(1, detallerequerimientosmateriaprimapk.getIddetalle());
			ps.setLong(2, detallerequerimientosmateriaprimapk.getIdplanrequerimientosmateriaprima());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallerequerimientosmateriaprimaException(sqle);}
		catch(Exception e) {throw new DetallerequerimientosmateriaprimaException(e);}
	}



/**
* This method updates a record in table DETALLEREQUERIMIENTOSMATERIAPRIMA
* @param DetallerequerimientosmateriaprimaPK
* @param Detallerequerimientosmateriaprima
* @param  Connection con
* @return   int
*/

	public int update(DetallerequerimientosmateriaprimaPK detallerequerimientosmateriaprimapk, Detallerequerimientosmateriaprima detallerequerimientosmateriaprima, Connection con)throws DetallerequerimientosmateriaprimaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEREQUERIMIENTOSMATERIAPRIMA set CANTIDADMATERIAPRIMA = ? , IDPIEZA = ? , IDMATERIAPRIMA = ?  where iddetalle = ? AND idplanrequerimientosmateriaprima = ?");
				ps.setInt(1,detallerequerimientosmateriaprima.getCantidadmateriaprima());
				ps.setLong(2,detallerequerimientosmateriaprima.getIdpieza());
				ps.setLong(3,detallerequerimientosmateriaprima.getIdmateriaprima());
				ps.setLong(4,detallerequerimientosmateriaprimapk.getIddetalle());
				ps.setLong(5,detallerequerimientosmateriaprimapk.getIdplanrequerimientosmateriaprima());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallerequerimientosmateriaprimaException(sqle);}
		catch(Exception e){throw new DetallerequerimientosmateriaprimaException(e);}
	}

/**
* This method inserts data in table DETALLEREQUERIMIENTOSMATERIAPRIMA
*
* @param Detallerequerimientosmateriaprima detallerequerimientosmateriaprima
* @param   Connection con
* @return  DetallerequerimientosmateriaprimaPK
*/

	public int insert(Detallerequerimientosmateriaprima detallerequerimientosmateriaprima ,Connection con)throws DetallerequerimientosmateriaprimaException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEREQUERIMIENTOSMATERIAPRIMA( IDPLANREQUERIMIENTOSMATERIAPRIMA, CANTIDADMATERIAPRIMA, IDPIEZA, IDMATERIAPRIMA) values (?, ?, ?, ?)");
				ps.setLong(1,detallerequerimientosmateriaprima.getIdplanrequerimientosmateriaprima());
				ps.setInt(2,detallerequerimientosmateriaprima.getCantidadmateriaprima());
				ps.setLong(3,detallerequerimientosmateriaprima.getIdpieza());
				ps.setLong(4,detallerequerimientosmateriaprima.getIdmateriaprima());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallerequerimientosmateriaprimaException(sqle);}
		catch(Exception e){throw new DetallerequerimientosmateriaprimaException(e);}
	}

/**
* 
* Returns a row from the detallerequerimientosmateriaprima table for the primary key passed as parameter.
* 
*/

	public Detallerequerimientosmateriaprima findByPrimaryKey(long iddetalle, long idplanrequerimientosmateriaprima, Connection con) throws DetallerequerimientosmateriaprimaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima where iddetalle = ? AND idplanrequerimientosmateriaprima = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idplanrequerimientosmateriaprima);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallerequerimientosmateriaprimaException(sqle);
	  	}
	    catch(Exception e){throw new DetallerequerimientosmateriaprimaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallerequerimientosmateriaprima table for the primary key object passed as parameter.
* 
* @param  DetallerequerimientosmateriaprimaPK detallerequerimientosmateriaprimapk
* @param Connection con
* @return  Detallerequerimientosmateriaprima
*/

	public Detallerequerimientosmateriaprima findByPrimaryKey(DetallerequerimientosmateriaprimaPK detallerequerimientosmateriaprimapk, Connection con) throws DetallerequerimientosmateriaprimaException{
		return findByPrimaryKey(detallerequerimientosmateriaprimapk.getIddetalle(), detallerequerimientosmateriaprimapk.getIdplanrequerimientosmateriaprima(), con);
	}

/**
*
* Returns all rows from detallerequerimientosmateriaprima table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallerequerimientosmateriaprima[]
*/

	public Detallerequerimientosmateriaprima[] findByIddetalle(long iddetalle, Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallerequerimientosmateriaprima table where IDPLANREQUERIMIENTOSMATERIAPRIMA= idplanrequerimientosmateriaprima
*
* @param   long  idplanrequerimientosmateriaprima
* @param   Connection con
* @return  Detallerequerimientosmateriaprima[]
*/

	public Detallerequerimientosmateriaprima[] findByIdplanrequerimientosmateriaprima(long idplanrequerimientosmateriaprima, Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima where idplanrequerimientosmateriaprima = ? order by idplanrequerimientosmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanrequerimientosmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallerequerimientosmateriaprima table where CANTIDADMATERIAPRIMA= cantidadmateriaprima
*
* @param   int  cantidadmateriaprima
* @param   Connection con
* @return  Detallerequerimientosmateriaprima[]
*/

	public Detallerequerimientosmateriaprima[] findByCantidadmateriaprima(int cantidadmateriaprima, Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima where cantidadmateriaprima = ? order by cantidadmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidadmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallerequerimientosmateriaprima table where IDPIEZA= idpieza
*
* @param   long  idpieza
* @param   Connection con
* @return  Detallerequerimientosmateriaprima[]
*/

	public Detallerequerimientosmateriaprima[] findByIdpieza(long idpieza, Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima where idpieza = ? order by idpieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallerequerimientosmateriaprima table where IDMATERIAPRIMA= idmateriaprima
*
* @param   long  idmateriaprima
* @param   Connection con
* @return  Detallerequerimientosmateriaprima[]
*/

	public Detallerequerimientosmateriaprima[] findByIdmateriaprima(long idmateriaprima, Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima where idmateriaprima = ? order by idmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallerequerimientosmateriaprima table 
*
* @param Connection con
* @return  Detallerequerimientosmateriaprima[]
*
*/

	public Detallerequerimientosmateriaprima[] findAll( Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from detallerequerimientosmateriaprima table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallerequerimientosmateriaprima[]
*
*/

	public Detallerequerimientosmateriaprima[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
* Returns rows from detallerequerimientosmateriaprima table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallerequerimientosmateriaprima[]
*
*/

	public Detallerequerimientosmateriaprima[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallerequerimientosmateriaprimaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idplanrequerimientosmateriaprima, cantidadmateriaprima, idpieza, idmateriaprima from detallerequerimientosmateriaprima";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallerequerimientosmateriaprimaException(sqle);
			}
			catch(Exception e){
					throw new DetallerequerimientosmateriaprimaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallerequerimientosmateriaprima
*
*/

	protected Detallerequerimientosmateriaprima fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallerequerimientosmateriaprima dto = new Detallerequerimientosmateriaprima();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallerequerimientosmateriaprima dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallerequerimientosmateriaprima dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdplanrequerimientosmateriaprima(rs.getLong("idplanrequerimientosmateriaprima"));
		 dto.setCantidadmateriaprima(rs.getInt("cantidadmateriaprima"));
		 dto.setIdpieza(rs.getLong("idpieza"));
		 dto.setIdmateriaprima(rs.getLong("idmateriaprima"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallerequerimientosmateriaprima[]
*/

	protected Detallerequerimientosmateriaprima[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallerequerimientosmateriaprima dto = new Detallerequerimientosmateriaprima();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallerequerimientosmateriaprima ret[] = new Detallerequerimientosmateriaprima[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
