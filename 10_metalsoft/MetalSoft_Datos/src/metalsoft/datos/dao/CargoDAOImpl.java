/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Jun 14 23:38:31 GYT 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of CargoDAO interface 
* 
*/


public class CargoDAOImpl implements CargoDAO
{


/**
* Method deletes a record from table CARGO
* @param CargoPK cargopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(CargoPK cargopk , Connection con)throws CargoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  CARGO where idcargo = ?");
			ps.setLong(1, cargopk.getIdcargo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new CargoException(sqle);}
		catch(Exception e) {throw new CargoException(e);}
	}



/**
* This method updates a record in table CARGO
* @param CargoPK
* @param Cargo
* @param  Connection con
* @return   int
*/

	public int update(CargoPK cargopk, Cargo cargo, Connection con)throws CargoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update CARGO set NOMBRE = ? , DESCRIPCION = ?  where idcargo = ?");
				ps.setString(1,cargo.getNombre());
				ps.setString(2,cargo.getDescripcion());
				ps.setLong(3,cargopk.getIdcargo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new CargoException(sqle);}
		catch(Exception e){throw new CargoException(e);}
	}

/**
* This method inserts data in table CARGO
*
* @param Cargo cargo
* @param   Connection con
* @return  CargoPK
*/

	public int insert(Cargo cargo ,Connection con)throws CargoException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into CARGO( IDCARGO, NOMBRE, DESCRIPCION) values (?, ?, ?)");
				ps.setLong(1,cargo.getIdcargo());
				ps.setString(2,cargo.getNombre());
				ps.setString(3,cargo.getDescripcion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new CargoException(sqle);}
		catch(Exception e){throw new CargoException(e);}
	}

/**
* 
* Returns a row from the cargo table for the primary key passed as parameter.
* 
*/

	public Cargo findByPrimaryKey(long idcargo, Connection con) throws CargoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idcargo, nombre, descripcion from cargo where idcargo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idcargo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new CargoException(sqle);
	  	}
	    catch(Exception e){throw new CargoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the cargo table for the primary key object passed as parameter.
* 
* @param  CargoPK cargopk
* @param Connection con
* @return  Cargo
*/

	public Cargo findByPrimaryKey(CargoPK cargopk, Connection con) throws CargoException{
		return findByPrimaryKey(cargopk.getIdcargo(), con);
	}

/**
*
* Returns all rows from cargo table where IDCARGO= idcargo
*
* @param   long  idcargo
* @param   Connection con
* @return  Cargo[]
*/

	public Cargo[] findByIdcargo(long idcargo, Connection con) throws CargoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcargo, nombre, descripcion from cargo where idcargo = ? order by idcargo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idcargo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CargoException(sqle);
			}
			catch(Exception e){
					throw new CargoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from cargo table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Cargo[]
*/

	public Cargo[] findByNombre(String nombre, Connection con) throws CargoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcargo, nombre, descripcion from cargo where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CargoException(sqle);
			}
			catch(Exception e){
					throw new CargoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from cargo table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Cargo[]
*/

	public Cargo[] findByDescripcion(String descripcion, Connection con) throws CargoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcargo, nombre, descripcion from cargo where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CargoException(sqle);
			}
			catch(Exception e){
					throw new CargoException(e);
			}
			finally{}
	}

/**
* Returns all rows from cargo table 
*
* @param Connection con
* @return  Cargo[]
*
*/

	public Cargo[] findAll( Connection con) throws CargoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idcargo, nombre, descripcion from cargo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CargoException(sqle);
			}
			catch(Exception e){
					throw new CargoException(e);
			}
			finally{}
	}

/**
* Returns rows from cargo table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Cargo[]
*
*/

	public Cargo[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws CargoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CargoException(sqle);
			}
			catch(Exception e){
					throw new CargoException(e);
			}
			finally{}
	}

/**
* Returns rows from cargo table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Cargo[]
*
*/

	public Cargo[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws CargoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idcargo, nombre, descripcion from cargo";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CargoException(sqle);
			}
			catch(Exception e){
					throw new CargoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Cargo
*
*/

	protected Cargo fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Cargo dto = new Cargo();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Cargo dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Cargo dto, ResultSet rs) throws SQLException
	{
		 dto.setIdcargo(rs.getLong("idcargo"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setDescripcion(rs.getString("descripcion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Cargo[]
*/

	protected Cargo[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Cargo dto = new Cargo();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Cargo ret[] = new Cargo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
