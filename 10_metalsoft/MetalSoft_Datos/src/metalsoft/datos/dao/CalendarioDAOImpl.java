/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Oct 05 13:56:09 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of CalendarioDAO interface 
* 
*/


public class CalendarioDAOImpl implements CalendarioDAO
{


/**
* Method deletes a record from table CALENDARIO
* @param CalendarioPK calendariopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(CalendarioPK calendariopk , Connection con)throws CalendarioException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  CALENDARIO where id = ?");
			ps.setLong(1, calendariopk.getId());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new CalendarioException(sqle);}
		catch(Exception e) {throw new CalendarioException(e);}
	}



/**
* This method updates a record in table CALENDARIO
* @param CalendarioPK
* @param Calendario
* @param  Connection con
* @return   int
*/

	public int update(CalendarioPK calendariopk, Calendario calendario, Connection con)throws CalendarioException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update CALENDARIO set DIA = ? , MES = ? , ANIO = ? , FECHA = ?  where id = ?");
				ps.setInt(1,calendario.getDia());
				ps.setInt(2,calendario.getMes());
				ps.setInt(3,calendario.getAnio());
				ps.setDate(4,calendario.getFecha());
				ps.setLong(5,calendariopk.getId());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new CalendarioException(sqle);}
		catch(Exception e){throw new CalendarioException(e);}
	}

/**
* This method inserts data in table CALENDARIO
*
* @param Calendario calendario
* @param   Connection con
* @return  CalendarioPK
*/

	public int insert(Calendario calendario ,Connection con)throws CalendarioException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into CALENDARIO( DIA, MES, ANIO, FECHA) values (?, ?, ?, ?)");
				ps.setInt(1,calendario.getDia());
				ps.setInt(2,calendario.getMes());
				ps.setInt(3,calendario.getAnio());
				ps.setDate(4,calendario.getFecha());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new CalendarioException(sqle);}
		catch(Exception e){throw new CalendarioException(e);}
	}

/**
* 
* Returns a row from the calendario table for the primary key passed as parameter.
* 
*/

	public Calendario findByPrimaryKey(long id, Connection con) throws CalendarioException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select dia, mes, anio, id, fecha from calendario where id = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, id);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new CalendarioException(sqle);
	  	}
	    catch(Exception e){throw new CalendarioException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the calendario table for the primary key object passed as parameter.
* 
* @param  CalendarioPK calendariopk
* @param Connection con
* @return  Calendario
*/

	public Calendario findByPrimaryKey(CalendarioPK calendariopk, Connection con) throws CalendarioException{
		return findByPrimaryKey(calendariopk.getId(), con);
	}

/**
*
* Returns all rows from calendario table where DIA= dia
*
* @param   int  dia
* @param   Connection con
* @return  Calendario[]
*/

	public Calendario[] findByDia(int dia, Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select dia, mes, anio, id, fecha from calendario where dia = ? order by dia";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, dia );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from calendario table where MES= mes
*
* @param   int  mes
* @param   Connection con
* @return  Calendario[]
*/

	public Calendario[] findByMes(int mes, Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select dia, mes, anio, id, fecha from calendario where mes = ? order by mes";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, mes );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from calendario table where ANIO= anio
*
* @param   int  anio
* @param   Connection con
* @return  Calendario[]
*/

	public Calendario[] findByAnio(int anio, Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select dia, mes, anio, id, fecha from calendario where anio = ? order by anio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, anio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from calendario table where ID= id
*
* @param   long  id
* @param   Connection con
* @return  Calendario[]
*/

	public Calendario[] findById(long id, Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select dia, mes, anio, id, fecha from calendario where id = ? order by id";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, id );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from calendario table where FECHA= fecha
*
* @param   Date  fecha
* @param   Connection con
* @return  Calendario[]
*/

	public Calendario[] findByFecha(Date fecha, Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select dia, mes, anio, id, fecha from calendario where fecha = ? order by fecha";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fecha );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
* Returns all rows from calendario table 
*
* @param Connection con
* @return  Calendario[]
*
*/

	public Calendario[] findAll( Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select dia, mes, anio, id, fecha from calendario";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
* Returns rows from calendario table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Calendario[]
*
*/

	public Calendario[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
* Returns rows from calendario table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Calendario[]
*
*/

	public Calendario[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws CalendarioException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select dia, mes, anio, id, fecha from calendario";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new CalendarioException(sqle);
			}
			catch(Exception e){
					throw new CalendarioException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Calendario
*
*/

	protected Calendario fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Calendario dto = new Calendario();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Calendario dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Calendario dto, ResultSet rs) throws SQLException
	{
		 dto.setDia(rs.getInt("dia"));
		 dto.setMes(rs.getInt("mes"));
		 dto.setAnio(rs.getInt("anio"));
		 dto.setId(rs.getLong("id"));
		 dto.setFecha(rs.getDate("fecha"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Calendario[]
*/

	protected Calendario[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Calendario dto = new Calendario();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Calendario ret[] = new Calendario[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
