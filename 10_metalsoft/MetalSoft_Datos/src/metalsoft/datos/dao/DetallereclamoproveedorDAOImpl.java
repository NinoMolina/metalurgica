/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:01 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallereclamoproveedorDAO interface 
* 
*/


public class DetallereclamoproveedorDAOImpl implements DetallereclamoproveedorDAO
{


/**
* Method deletes a record from table DETALLERECLAMOPROVEEDOR
* @param DetallereclamoproveedorPK detallereclamoproveedorpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallereclamoproveedorPK detallereclamoproveedorpk , Connection con)throws DetallereclamoproveedorException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLERECLAMOPROVEEDOR where iddetalle = ? AND idreclamo = ?");
			ps.setLong(1, detallereclamoproveedorpk.getIddetalle());
			ps.setLong(2, detallereclamoproveedorpk.getIdreclamo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallereclamoproveedorException(sqle);}
		catch(Exception e) {throw new DetallereclamoproveedorException(e);}
	}



/**
* This method updates a record in table DETALLERECLAMOPROVEEDOR
* @param DetallereclamoproveedorPK
* @param Detallereclamoproveedor
* @param  Connection con
* @return   int
*/

	public int update(DetallereclamoproveedorPK detallereclamoproveedorpk, Detallereclamoproveedor detallereclamoproveedor, Connection con)throws DetallereclamoproveedorException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLERECLAMOPROVEEDOR set CANTIDAD = ? , DESCRIPCION = ? , MOTIVO = ? , IDDETALLECOMPRA = ? , FECHAEGRESO = ? , IDCOMPRA = ?  where iddetalle = ? AND idreclamo = ?");
				ps.setInt(1,detallereclamoproveedor.getCantidad());
				ps.setString(2,detallereclamoproveedor.getDescripcion());
				ps.setString(3,detallereclamoproveedor.getMotivo());
				ps.setLong(4,detallereclamoproveedor.getIddetallecompra());
				ps.setDate(5,detallereclamoproveedor.getFechaegreso());
				ps.setLong(6,detallereclamoproveedor.getIdcompra());
				ps.setLong(7,detallereclamoproveedorpk.getIddetalle());
				ps.setLong(8,detallereclamoproveedorpk.getIdreclamo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallereclamoproveedorException(sqle);}
		catch(Exception e){throw new DetallereclamoproveedorException(e);}
	}

/**
* This method inserts data in table DETALLERECLAMOPROVEEDOR
*
* @param Detallereclamoproveedor detallereclamoproveedor
* @param   Connection con
* @return  DetallereclamoproveedorPK
*/

	public int insert(Detallereclamoproveedor detallereclamoproveedor ,Connection con)throws DetallereclamoproveedorException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLERECLAMOPROVEEDOR( IDRECLAMO, CANTIDAD, DESCRIPCION, MOTIVO, IDDETALLECOMPRA, FECHAEGRESO, IDCOMPRA) values (?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,detallereclamoproveedor.getIdreclamo());
				ps.setInt(2,detallereclamoproveedor.getCantidad());
				ps.setString(3,detallereclamoproveedor.getDescripcion());
				ps.setString(4,detallereclamoproveedor.getMotivo());
				ps.setLong(5,detallereclamoproveedor.getIddetallecompra());
				ps.setDate(6,detallereclamoproveedor.getFechaegreso());
				ps.setLong(7,detallereclamoproveedor.getIdcompra());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallereclamoproveedorException(sqle);}
		catch(Exception e){throw new DetallereclamoproveedorException(e);}
	}

/**
* 
* Returns a row from the detallereclamoproveedor table for the primary key passed as parameter.
* 
*/

	public Detallereclamoproveedor findByPrimaryKey(long iddetalle, long idreclamo, Connection con) throws DetallereclamoproveedorException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where iddetalle = ? AND idreclamo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idreclamo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallereclamoproveedorException(sqle);
	  	}
	    catch(Exception e){throw new DetallereclamoproveedorException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallereclamoproveedor table for the primary key object passed as parameter.
* 
* @param  DetallereclamoproveedorPK detallereclamoproveedorpk
* @param Connection con
* @return  Detallereclamoproveedor
*/

	public Detallereclamoproveedor findByPrimaryKey(DetallereclamoproveedorPK detallereclamoproveedorpk, Connection con) throws DetallereclamoproveedorException{
		return findByPrimaryKey(detallereclamoproveedorpk.getIddetalle(), detallereclamoproveedorpk.getIdreclamo(), con);
	}

/**
*
* Returns all rows from detallereclamoproveedor table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByIddetalle(long iddetalle, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoproveedor table where IDRECLAMO= idreclamo
*
* @param   long  idreclamo
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByIdreclamo(long idreclamo, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where idreclamo = ? order by idreclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idreclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoproveedor table where CANTIDAD= cantidad
*
* @param   int  cantidad
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByCantidad(int cantidad, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where cantidad = ? order by cantidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoproveedor table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByDescripcion(String descripcion, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoproveedor table where MOTIVO= motivo
*
* @param   String  motivo
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByMotivo(String motivo, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where motivo = ? order by motivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoproveedor table where IDDETALLECOMPRA= iddetallecompra
*
* @param   long  iddetallecompra
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByIddetallecompra(long iddetallecompra, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where iddetallecompra = ? order by iddetallecompra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetallecompra );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoproveedor table where FECHAEGRESO= fechaegreso
*
* @param   Date  fechaegreso
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByFechaegreso(Date fechaegreso, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where fechaegreso = ? order by fechaegreso";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechaegreso );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamoproveedor table where IDCOMPRA= idcompra
*
* @param   long  idcompra
* @param   Connection con
* @return  Detallereclamoproveedor[]
*/

	public Detallereclamoproveedor[] findByIdcompra(long idcompra, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor where idcompra = ? order by idcompra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idcompra );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallereclamoproveedor table 
*
* @param Connection con
* @return  Detallereclamoproveedor[]
*
*/

	public Detallereclamoproveedor[] findAll( Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
* Returns rows from detallereclamoproveedor table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallereclamoproveedor[]
*
*/

	public Detallereclamoproveedor[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
* Returns rows from detallereclamoproveedor table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallereclamoproveedor[]
*
*/

	public Detallereclamoproveedor[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallereclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, iddetallecompra, fechaegreso, idcompra from detallereclamoproveedor";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallereclamoproveedor
*
*/

	protected Detallereclamoproveedor fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallereclamoproveedor dto = new Detallereclamoproveedor();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallereclamoproveedor dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallereclamoproveedor dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdreclamo(rs.getLong("idreclamo"));
		 dto.setCantidad(rs.getInt("cantidad"));
		 dto.setDescripcion(rs.getString("descripcion"));
		 dto.setMotivo(rs.getString("motivo"));
		 dto.setIddetallecompra(rs.getLong("iddetallecompra"));
		 dto.setFechaegreso(rs.getDate("fechaegreso"));
		 dto.setIdcompra(rs.getLong("idcompra"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallereclamoproveedor[]
*/

	protected Detallereclamoproveedor[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallereclamoproveedor dto = new Detallereclamoproveedor();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallereclamoproveedor ret[] = new Detallereclamoproveedor[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
