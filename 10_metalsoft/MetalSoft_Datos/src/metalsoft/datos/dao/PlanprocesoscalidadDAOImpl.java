/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:04 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PlanprocesoscalidadDAO interface 
* 
*/


public class PlanprocesoscalidadDAOImpl implements PlanprocesoscalidadDAO
{


/**
* Method deletes a record from table PLANPROCESOSCALIDAD
* @param PlanprocesoscalidadPK planprocesoscalidadpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PlanprocesoscalidadPK planprocesoscalidadpk , Connection con)throws PlanprocesoscalidadException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PLANPROCESOSCALIDAD where idplanprocesoscalidad = ?");
			ps.setLong(1, planprocesoscalidadpk.getIdplanprocesoscalidad());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PlanprocesoscalidadException(sqle);}
		catch(Exception e) {throw new PlanprocesoscalidadException(e);}
	}



/**
* This method updates a record in table PLANPROCESOSCALIDAD
* @param PlanprocesoscalidadPK
* @param Planprocesoscalidad
* @param  Connection con
* @return   int
*/

	public int update(PlanprocesoscalidadPK planprocesoscalidadpk, Planprocesoscalidad planprocesoscalidad, Connection con)throws PlanprocesoscalidadException{
	}

/**
* This method inserts data in table PLANPROCESOSCALIDAD
*
* @param Planprocesoscalidad planprocesoscalidad
* @param   Connection con
* @return  PlanprocesoscalidadPK
*/

	public int insert(Planprocesoscalidad planprocesoscalidad ,Connection con)throws PlanprocesoscalidadException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PLANPROCESOSCALIDAD( IDPLANPROCESOSCALIDAD) values (?)");
				ps.setLong(1,planprocesoscalidad.getIdplanprocesoscalidad());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PlanprocesoscalidadException(sqle);}
		catch(Exception e){throw new PlanprocesoscalidadException(e);}
	}

/**
* 
* Returns a row from the planprocesoscalidad table for the primary key passed as parameter.
* 
*/

	public Planprocesoscalidad findByPrimaryKey(long idplanprocesoscalidad, Connection con) throws PlanprocesoscalidadException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idplanprocesoscalidad from planprocesoscalidad where idplanprocesoscalidad = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idplanprocesoscalidad);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PlanprocesoscalidadException(sqle);
	  	}
	    catch(Exception e){throw new PlanprocesoscalidadException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the planprocesoscalidad table for the primary key object passed as parameter.
* 
* @param  PlanprocesoscalidadPK planprocesoscalidadpk
* @param Connection con
* @return  Planprocesoscalidad
*/

	public Planprocesoscalidad findByPrimaryKey(PlanprocesoscalidadPK planprocesoscalidadpk, Connection con) throws PlanprocesoscalidadException{
		return findByPrimaryKey(planprocesoscalidadpk.getIdplanprocesoscalidad(), con);
	}

/**
*
* Returns all rows from planprocesoscalidad table where IDPLANPROCESOSCALIDAD= idplanprocesoscalidad
*
* @param   long  idplanprocesoscalidad
* @param   Connection con
* @return  Planprocesoscalidad[]
*/

	public Planprocesoscalidad[] findByIdplanprocesoscalidad(long idplanprocesoscalidad, Connection con) throws PlanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanprocesoscalidad from planprocesoscalidad where idplanprocesoscalidad = ? order by idplanprocesoscalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanprocesoscalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanprocesoscalidadException(e);
			}
			finally{}
	}

/**
* Returns all rows from planprocesoscalidad table 
*
* @param Connection con
* @return  Planprocesoscalidad[]
*
*/

	public Planprocesoscalidad[] findAll( Connection con) throws PlanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idplanprocesoscalidad from planprocesoscalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanprocesoscalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from planprocesoscalidad table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Planprocesoscalidad[]
*
*/

	public Planprocesoscalidad[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PlanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanprocesoscalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from planprocesoscalidad table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Planprocesoscalidad[]
*
*/

	public Planprocesoscalidad[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PlanprocesoscalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idplanprocesoscalidad from planprocesoscalidad";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PlanprocesoscalidadException(sqle);
			}
			catch(Exception e){
					throw new PlanprocesoscalidadException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Planprocesoscalidad
*
*/

	protected Planprocesoscalidad fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Planprocesoscalidad dto = new Planprocesoscalidad();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Planprocesoscalidad dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Planprocesoscalidad dto, ResultSet rs) throws SQLException
	{
		 dto.setIdplanprocesoscalidad(rs.getLong("idplanprocesoscalidad"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Planprocesoscalidad[]
*/

	protected Planprocesoscalidad[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Planprocesoscalidad dto = new Planprocesoscalidad();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Planprocesoscalidad ret[] = new Planprocesoscalidad[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
