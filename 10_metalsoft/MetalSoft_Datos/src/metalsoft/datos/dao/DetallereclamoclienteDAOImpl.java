/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Jun 22 00:02:08 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallereclamoclienteDAO interface 
* 
*/


public class DetallereclamoclienteDAOImpl implements DetallereclamoclienteDAO
{


/**
* Method deletes a record from table DETALLERECLAMOCLIENTE
* @param DetallereclamoclientePK detallereclamoclientepk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallereclamoclientePK detallereclamoclientepk , Connection con)throws DetallereclamoclienteException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLERECLAMOCLIENTE where iddetalle = ? AND idreclamo = ?");
			ps.setLong(1, detallereclamoclientepk.getIddetalle());
			ps.setLong(2, detallereclamoclientepk.getIdreclamo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallereclamoclienteException(sqle);}
		catch(Exception e) {throw new DetallereclamoclienteException(e);}
	}



/**
* This method updates a record in table DETALLERECLAMOCLIENTE
* @param DetallereclamoclientePK
* @param Detallereclamocliente
* @param  Connection con
* @return   int
*/

	public int update(DetallereclamoclientePK detallereclamoclientepk, Detallereclamocliente detallereclamocliente, Connection con)throws DetallereclamoclienteException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLERECLAMOCLIENTE set CANTIDAD = ? , DESCRIPCION = ? , MOTIVO = ? , PRODUCTO = ?  where iddetalle = ? AND idreclamo = ?");
				ps.setInt(1,detallereclamocliente.getCantidad());
				ps.setString(2,detallereclamocliente.getDescripcion());
				ps.setString(3,detallereclamocliente.getMotivo());
				ps.setLong(4,detallereclamocliente.getProducto());
				ps.setLong(5,detallereclamoclientepk.getIddetalle());
				ps.setLong(6,detallereclamoclientepk.getIdreclamo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallereclamoclienteException(sqle);}
		catch(Exception e){throw new DetallereclamoclienteException(e);}
	}

/**
* This method inserts data in table DETALLERECLAMOCLIENTE
*
* @param Detallereclamocliente detallereclamocliente
* @param   Connection con
* @return  DetallereclamoclientePK
*/

	public int insert(Detallereclamocliente detallereclamocliente ,Connection con)throws DetallereclamoclienteException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLERECLAMOCLIENTE( IDDETALLE, IDRECLAMO, CANTIDAD, DESCRIPCION, MOTIVO, PRODUCTO) values (?, ?, ?, ?, ?, ?)");
				ps.setLong(1,detallereclamocliente.getIddetalle());
				ps.setLong(2,detallereclamocliente.getIdreclamo());
				ps.setInt(3,detallereclamocliente.getCantidad());
				ps.setString(4,detallereclamocliente.getDescripcion());
				ps.setString(5,detallereclamocliente.getMotivo());
				ps.setLong(6,detallereclamocliente.getProducto());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallereclamoclienteException(sqle);}
		catch(Exception e){throw new DetallereclamoclienteException(e);}
	}

/**
* 
* Returns a row from the detallereclamocliente table for the primary key passed as parameter.
* 
*/

	public Detallereclamocliente findByPrimaryKey(long iddetalle, long idreclamo, Connection con) throws DetallereclamoclienteException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente where iddetalle = ? AND idreclamo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		stmt.setLong(2, idreclamo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallereclamoclienteException(sqle);
	  	}
	    catch(Exception e){throw new DetallereclamoclienteException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallereclamocliente table for the primary key object passed as parameter.
* 
* @param  DetallereclamoclientePK detallereclamoclientepk
* @param Connection con
* @return  Detallereclamocliente
*/

	public Detallereclamocliente findByPrimaryKey(DetallereclamoclientePK detallereclamoclientepk, Connection con) throws DetallereclamoclienteException{
		return findByPrimaryKey(detallereclamoclientepk.getIddetalle(), detallereclamoclientepk.getIdreclamo(), con);
	}

/**
*
* Returns all rows from detallereclamocliente table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallereclamocliente[]
*/

	public Detallereclamocliente[] findByIddetalle(long iddetalle, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamocliente table where IDRECLAMO= idreclamo
*
* @param   long  idreclamo
* @param   Connection con
* @return  Detallereclamocliente[]
*/

	public Detallereclamocliente[] findByIdreclamo(long idreclamo, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente where idreclamo = ? order by idreclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idreclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamocliente table where CANTIDAD= cantidad
*
* @param   int  cantidad
* @param   Connection con
* @return  Detallereclamocliente[]
*/

	public Detallereclamocliente[] findByCantidad(int cantidad, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente where cantidad = ? order by cantidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamocliente table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Detallereclamocliente[]
*/

	public Detallereclamocliente[] findByDescripcion(String descripcion, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamocliente table where MOTIVO= motivo
*
* @param   String  motivo
* @param   Connection con
* @return  Detallereclamocliente[]
*/

	public Detallereclamocliente[] findByMotivo(String motivo, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente where motivo = ? order by motivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallereclamocliente table where PRODUCTO= producto
*
* @param   long  producto
* @param   Connection con
* @return  Detallereclamocliente[]
*/

	public Detallereclamocliente[] findByProducto(long producto, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente where producto = ? order by producto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, producto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallereclamocliente table 
*
* @param Connection con
* @return  Detallereclamocliente[]
*
*/

	public Detallereclamocliente[] findAll( Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
* Returns rows from detallereclamocliente table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallereclamocliente[]
*
*/

	public Detallereclamocliente[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
* Returns rows from detallereclamocliente table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallereclamocliente[]
*
*/

	public Detallereclamocliente[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallereclamoclienteException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idreclamo, cantidad, descripcion, motivo, producto from detallereclamocliente";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallereclamoclienteException(sqle);
			}
			catch(Exception e){
					throw new DetallereclamoclienteException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallereclamocliente
*
*/

	protected Detallereclamocliente fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Detallereclamocliente dto = new Detallereclamocliente();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallereclamocliente dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Detallereclamocliente dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdreclamo(rs.getLong("idreclamo"));
		 dto.setCantidad(rs.getInt("cantidad"));
		 dto.setDescripcion(rs.getString("descripcion"));
		 dto.setMotivo(rs.getString("motivo"));
		 dto.setProducto(rs.getLong("producto"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallereclamocliente[]
*/

	protected Detallereclamocliente[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Detallereclamocliente dto = new Detallereclamocliente();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Detallereclamocliente ret[] = new Detallereclamocliente[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
