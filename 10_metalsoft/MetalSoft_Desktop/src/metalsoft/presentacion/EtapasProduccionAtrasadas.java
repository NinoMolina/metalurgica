/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EtapasProduccionAtrasadas.java
 *
 * Created on 09/10/2011, 19:24:02
 */
package metalsoft.presentacion;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.AbstractTableModel;
import metalsoft.datos.jpa.JpaUtil;
import metalsoft.datos.jpa.controller.EjecucionplanificacionproduccionJpaController;
import metalsoft.datos.jpa.entity.Detalleejecucionplanificacion;
import metalsoft.datos.jpa.entity.Detalleplanificacionproduccion;
import metalsoft.datos.jpa.entity.Ejecucionplanificacionproduccion;
import metalsoft.negocio.gestores.NumerosAMostrar;
import metalsoft.util.Fecha;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.HighlighterFactory.UIColorHighlighter;

/**
 *
 * @author Nino
 */
public class EtapasProduccionAtrasadas extends javax.swing.JDialog {

    /** Creates new form EtapasProduccionAtrasadas */
    private JButton btnNovedades;
    private static EtapasProduccionAtrasadas instance;
    private static List<Detalleejecucionplanificacion> filasEtapasAtrasadas;
    private JButton btnSalir;

    public EtapasProduccionAtrasadas() {
        super(Principal.getVtnPrincipal());
//        filasEtapasAtrasadas = new ArrayList<Detalleejecucionplanificacion>();
        initComponents();
        addListeners();
        setearTablas();
        instance = this;
    }

    public static EtapasProduccionAtrasadas getInstance() {
        return instance;
    }

    public static void setInstance(EtapasProduccionAtrasadas instance) {
        EtapasProduccionAtrasadas.instance = instance;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEtapasAtrasadas = new org.jdesktop.swingx.JXTable();
        btnSalirr1 = new metalsoft.beans.BtnSalirr();
        btnNovedades1 = new metalsoft.beans.BtnNovedades();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNovedades = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Etapas de Producci贸n Atrasadas");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Etapas de Producci贸n Atrasadas"));

        tblEtapasAtrasadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEtapasAtrasadasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblEtapasAtrasadas);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 957, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Novedades de Producci贸n"));

        txtNovedades.setColumns(20);
        txtNovedades.setRows(5);
        jScrollPane2.setViewportView(txtNovedades);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 957, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNovedades1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 783, Short.MAX_VALUE)
                        .addComponent(btnSalirr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSalirr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNovedades1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void tblEtapasAtrasadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEtapasAtrasadasMouseClicked
    int row = tblEtapasAtrasadas.getSelectedRow();
    int col = tblEtapasAtrasadas.getSelectedColumn();

    if (row >= 0) {
        Detalleejecucionplanificacion detalleejecucionplanificacion = filasEtapasAtrasadas.get(tblEtapasAtrasadas.getSelectedRow());
        EjecucionplanificacionproduccionJpaController controller = new EjecucionplanificacionproduccionJpaController(JpaUtil.getEntityManagerFactory());
        Ejecucionplanificacionproduccion ejecucionplanificacionproduccion = controller.findEjecucionplanificacionproduccion(detalleejecucionplanificacion.getIdejecucionplanificacionproduccion().getIdejecucion());
        txtNovedades.setText(ejecucionplanificacionproduccion.getNovedades());
//                    System.out.println(System.getProperty("line.separator").toString());
    }
}//GEN-LAST:event_tblEtapasAtrasadasMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private metalsoft.beans.BtnNovedades btnNovedades1;
    private metalsoft.beans.BtnSalirr btnSalirr1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTable tblEtapasAtrasadas;
    private javax.swing.JTextArea txtNovedades;
    // End of variables declaration//GEN-END:variables

    private void addListeners() {
        addListenerBtnNovedades();
        addListenerBtnSalir();
    }

    private void addListenerBtnNovedades() {
        btnNovedades = btnNovedades1.getBtn();
        btnNovedades.setText("Agregar Novedades");
        btnNovedades.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnNovedadesActionPerformed(e);
            }
        });
    }

    private void btnNovedadesActionPerformed(ActionEvent e) {
        if (tblEtapasAtrasadas.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Etapa de Producci贸n");
            return;
        }

        Detalleejecucionplanificacion detalleejecucionplanificacion = filasEtapasAtrasadas.get(tblEtapasAtrasadas.getSelectedRow());
        Ejecucionplanificacionproduccion ejecucionplanificacionproduccion = detalleejecucionplanificacion.getIdejecucionplanificacionproduccion();


        JTextArea txtNuevaNovedad = new JTextArea(10, 50);
        Object[] obj = {"Novedades:", txtNuevaNovedad};

        int res = JOptionPane.showConfirmDialog(null, obj, "Agregar Novedades", JOptionPane.OK_CANCEL_OPTION);

        if (res == JOptionPane.OK_OPTION) {
            String nuevaNovedad = txtNuevaNovedad.getText();
            nuevaNovedad = Fecha.fechaHomaMinutoSegundoActualParaNovedades() + ": " + NumerosAMostrar.getNumeroString(NumerosAMostrar.NRO_EJECUCION_ETAPA, detalleejecucionplanificacion.getEjecucionetapa().getNroejecucion()) + ": " + nuevaNovedad;
            nuevaNovedad += System.getProperty("line.separator") + System.getProperty("line.separator");
            ejecucionplanificacionproduccion.setNovedades(ejecucionplanificacionproduccion.getNovedades() + nuevaNovedad);

            EjecucionplanificacionproduccionJpaController controller = new EjecucionplanificacionproduccionJpaController(JpaUtil.getEntityManagerFactory());
            try {
                controller.edit(ejecucionplanificacionproduccion);
                txtNovedades.append(nuevaNovedad);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "No se pudo agregar las novedades.");
            }
        }

    }

    public static void setEtapasAtrasadas(Map<Long, Detalleejecucionplanificacion> mapEtapasAtrasadas) {
        Collection<Detalleejecucionplanificacion> collection = mapEtapasAtrasadas.values();
        Iterator<Detalleejecucionplanificacion> it = collection.iterator();
        Detalleejecucionplanificacion detalleejecucionplanificacion = null;
        filasEtapasAtrasadas = new ArrayList<Detalleejecucionplanificacion>();
        while (it.hasNext()) {
            detalleejecucionplanificacion = it.next();
            filasEtapasAtrasadas.add(detalleejecucionplanificacion);
        }
    }

    private void setearTablas() {
        tblEtapasAtrasadas.setModel(new EtapaAtrasadaTableModel());
        tblEtapasAtrasadas.setColumnControlVisible(true);
        /* On supprime les traits des lignes et des colonnes */
        tblEtapasAtrasadas.setShowHorizontalLines(false);
        tblEtapasAtrasadas.setShowVerticalLines(false);
        /* On dit de surligner une ligne sur deux */
        tblEtapasAtrasadas.setHighlighters(
                new UIColorHighlighter(HighlightPredicate.ODD));
    }

    private void addListenerBtnSalir() {
        btnSalir = btnSalirr1.getBtnSalir();
        btnSalir.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnSalirActionPerformed(e);
            }
        });
    }

    private void btnSalirActionPerformed(ActionEvent e) {
        this.dispose();
    }

    class EtapaAtrasadaTableModel extends AbstractTableModel {

        String[] columnNames = {"Nro",
            "Etapa",
            "Inicio Planif.",
            "Inicio Real",
            "Fin Planif.",
            "Empleado",
            "M谩quina",
            "Pieza",
            "Producto",
            "Pedido",
            "Cliente"};

        public Object getValueAt(int rowIndex, int columnIndex) {

            Detalleejecucionplanificacion d = filasEtapasAtrasadas.get(rowIndex);
            Detalleplanificacionproduccion detalleplanificacionproduccion = JpaUtil.getDetalleplanificacionproduccionPorIdDetalleejecucion(d.getId());
            //      Object[] df=filas.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return NumerosAMostrar.getNumeroString(NumerosAMostrar.NRO_EJECUCION_ETAPA, d.getEjecucionetapa().getNroejecucion());
                case 1:
                    return d.getIdetapaproduccion().getNombre();
                case 2:
                    Date fechaInicioPlanif = detalleplanificacionproduccion.getFechainicio();
                    Date horaInicioPlanif = detalleplanificacionproduccion.getHorainicio();
                    fechaInicioPlanif.setHours(horaInicioPlanif.getHours());
                    fechaInicioPlanif.setMinutes(horaInicioPlanif.getMinutes());
                    fechaInicioPlanif.setSeconds(horaInicioPlanif.getSeconds());

                    return Fecha.parseToStringFechaHora(fechaInicioPlanif);
                case 3:
                    Date fechaInicioReal = d.getFechainicio();
                    fechaInicioReal.setHours(d.getHorainicio().getHours());
                    fechaInicioReal.setMinutes(d.getHorainicio().getMinutes());
                    fechaInicioReal.setSeconds(d.getHorainicio().getSeconds());

                    return Fecha.parseToStringFechaHora(fechaInicioReal);
                case 4:
                    Date fechaFinPlanif = detalleplanificacionproduccion.getFechafin();
                    Date horaFinPlanif = detalleplanificacionproduccion.getHorafin();
                    fechaFinPlanif.setHours(horaFinPlanif.getHours());
                    fechaFinPlanif.setMinutes(horaFinPlanif.getMinutes());
                    fechaFinPlanif.setSeconds(horaFinPlanif.getSeconds());

                    return Fecha.parseToStringFechaHora(fechaFinPlanif);
                case 5:
                    return d.getEjecucionetapa().getEmpleado().getNombre() + " " + d.getEjecucionetapa().getEmpleado().getApellido();
                case 6:
                    if (d.getEjecucionetapa().getMaquina() == null) {
                        return "";
                    } else {
                        return d.getEjecucionetapa().getMaquina().getNombre();
                    }

                case 7:
                    return d.getPieza().getNombre();
                case 8:
                    return detalleplanificacionproduccion.getIdproducto().getNombre();
                case 9:
                    return NumerosAMostrar.getNumeroString(NumerosAMostrar.NRO_PEDIDO, detalleplanificacionproduccion.getIdplanificacionproduccion().getPedido().getNropedido());
                case 10:
                    return detalleplanificacionproduccion.getIdplanificacionproduccion().getPedido().getCliente().getRazonsocial();
                default:
                    return null;
            }
        }

        /**
         * Retorna la cantidad de columnas que tiene la tabla
         * @return Numero de filas que contendra la tabla
         */
        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            if (filasEtapasAtrasadas != null) {
                return filasEtapasAtrasadas.size();
            }
            return 0;
        }

        /**
         * Devuelve el nombre de las columnas para mostrar en el encabezado
         * @param column Numero de la columna cuyo nombre se quiere
         * @return Nombre de la columna
         */
        @Override
        public String getColumnName(int column) {
            return columnNames[column];

        }
    }
}
