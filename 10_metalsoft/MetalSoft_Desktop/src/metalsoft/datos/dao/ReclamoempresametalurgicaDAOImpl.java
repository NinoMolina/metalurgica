/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:04 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of ReclamoempresametalurgicaDAO interface 
* 
*/


public class ReclamoempresametalurgicaDAOImpl implements ReclamoempresametalurgicaDAO
{


/**
* Method deletes a record from table RECLAMOEMPRESAMETALURGICA
* @param ReclamoempresametalurgicaPK reclamoempresametalurgicapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(ReclamoempresametalurgicaPKDB reclamoempresametalurgicapk , Connection con)throws ReclamoempresametalurgicaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  RECLAMOEMPRESAMETALURGICA where idreclamo = ?");
			ps.setLong(1, reclamoempresametalurgicapk.getIdreclamo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new ReclamoempresametalurgicaException(sqle);}
		catch(Exception e) {throw new ReclamoempresametalurgicaException(e);}
	}



/**
* This method updates a record in table RECLAMOEMPRESAMETALURGICA
* @param ReclamoempresametalurgicaPK
* @param Reclamoempresametalurgica
* @param  Connection con
* @return   int
*/

	public int update(ReclamoempresametalurgicaPKDB reclamoempresametalurgicapk, ReclamoempresametalurgicaDB reclamoempresametalurgica, Connection con)throws ReclamoempresametalurgicaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update RECLAMOEMPRESAMETALURGICA set NRORECLAMO = ? , TIPORECLAMO = ? , MOTIVO = ? , FECHARECLAMO = ? , TRABAJOTERCERIZADO = ?  where idreclamo = ?");
				ps.setLong(1,reclamoempresametalurgica.getNroreclamo());
				ps.setLong(2,reclamoempresametalurgica.getTiporeclamo());
				ps.setString(3,reclamoempresametalurgica.getMotivo());
				ps.setDate(4,reclamoempresametalurgica.getFechareclamo());
				ps.setLong(5,reclamoempresametalurgica.getTrabajotercerizado());
				ps.setLong(6,reclamoempresametalurgicapk.getIdreclamo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ReclamoempresametalurgicaException(sqle);}
		catch(Exception e){throw new ReclamoempresametalurgicaException(e);}
	}

/**
* This method inserts data in table RECLAMOEMPRESAMETALURGICA
*
* @param Reclamoempresametalurgica reclamoempresametalurgica
* @param   Connection con
* @return  ReclamoempresametalurgicaPK
*/

	public int insert(ReclamoempresametalurgicaDB reclamoempresametalurgica ,Connection con)throws ReclamoempresametalurgicaException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into RECLAMOEMPRESAMETALURGICA( NRORECLAMO, TIPORECLAMO, MOTIVO, FECHARECLAMO, TRABAJOTERCERIZADO) values (?, ?, ?, ?, ?)");
				ps.setLong(1,reclamoempresametalurgica.getNroreclamo());
				ps.setLong(2,reclamoempresametalurgica.getTiporeclamo());
				ps.setString(3,reclamoempresametalurgica.getMotivo());
				ps.setDate(4,reclamoempresametalurgica.getFechareclamo());
				ps.setLong(5,reclamoempresametalurgica.getTrabajotercerizado());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ReclamoempresametalurgicaException(sqle);}
		catch(Exception e){throw new ReclamoempresametalurgicaException(e);}
	}

/**
* 
* Returns a row from the reclamoempresametalurgica table for the primary key passed as parameter.
* 
*/

	public ReclamoempresametalurgicaDB findByPrimaryKey(long idreclamo, Connection con) throws ReclamoempresametalurgicaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica where idreclamo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idreclamo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new ReclamoempresametalurgicaException(sqle);
	  	}
	    catch(Exception e){throw new ReclamoempresametalurgicaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the reclamoempresametalurgica table for the primary key object passed as parameter.
* 
* @param  ReclamoempresametalurgicaPK reclamoempresametalurgicapk
* @param Connection con
* @return  Reclamoempresametalurgica
*/

	public ReclamoempresametalurgicaDB findByPrimaryKey(ReclamoempresametalurgicaPKDB reclamoempresametalurgicapk, Connection con) throws ReclamoempresametalurgicaException{
		return findByPrimaryKey(reclamoempresametalurgicapk.getIdreclamo(), con);
	}

/**
*
* Returns all rows from reclamoempresametalurgica table where IDRECLAMO= idreclamo
*
* @param   long  idreclamo
* @param   Connection con
* @return  Reclamoempresametalurgica[]
*/

	public ReclamoempresametalurgicaDB[] findByIdreclamo(long idreclamo, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica where idreclamo = ? order by idreclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idreclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoempresametalurgica table where NRORECLAMO= nroreclamo
*
* @param   long  nroreclamo
* @param   Connection con
* @return  Reclamoempresametalurgica[]
*/

	public ReclamoempresametalurgicaDB[] findByNroreclamo(long nroreclamo, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica where nroreclamo = ? order by nroreclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroreclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoempresametalurgica table where TIPORECLAMO= tiporeclamo
*
* @param   long  tiporeclamo
* @param   Connection con
* @return  Reclamoempresametalurgica[]
*/

	public ReclamoempresametalurgicaDB[] findByTiporeclamo(long tiporeclamo, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica where tiporeclamo = ? order by tiporeclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, tiporeclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoempresametalurgica table where MOTIVO= motivo
*
* @param   String  motivo
* @param   Connection con
* @return  Reclamoempresametalurgica[]
*/

	public ReclamoempresametalurgicaDB[] findByMotivo(String motivo, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica where motivo = ? order by motivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoempresametalurgica table where FECHARECLAMO= fechareclamo
*
* @param   Date  fechareclamo
* @param   Connection con
* @return  Reclamoempresametalurgica[]
*/

	public ReclamoempresametalurgicaDB[] findByFechareclamo(Date fechareclamo, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica where fechareclamo = ? order by fechareclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechareclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoempresametalurgica table where TRABAJOTERCERIZADO= trabajotercerizado
*
* @param   long  trabajotercerizado
* @param   Connection con
* @return  Reclamoempresametalurgica[]
*/

	public ReclamoempresametalurgicaDB[] findByTrabajotercerizado(long trabajotercerizado, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica where trabajotercerizado = ? order by trabajotercerizado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, trabajotercerizado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns all rows from reclamoempresametalurgica table 
*
* @param Connection con
* @return  Reclamoempresametalurgica[]
*
*/

	public ReclamoempresametalurgicaDB[] findAll( Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns rows from reclamoempresametalurgica table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Reclamoempresametalurgica[]
*
*/

	public ReclamoempresametalurgicaDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
* Returns rows from reclamoempresametalurgica table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Reclamoempresametalurgica[]
*
*/

	public ReclamoempresametalurgicaDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws ReclamoempresametalurgicaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, trabajotercerizado from reclamoempresametalurgica";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoempresametalurgicaException(sqle);
			}
			catch(Exception e){
					throw new ReclamoempresametalurgicaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Reclamoempresametalurgica
*
*/

	protected ReclamoempresametalurgicaDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					ReclamoempresametalurgicaDB dto = new ReclamoempresametalurgicaDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Reclamoempresametalurgica dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(ReclamoempresametalurgicaDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdreclamo(rs.getLong("idreclamo"));
		 dto.setNroreclamo(rs.getLong("nroreclamo"));
		 dto.setTiporeclamo(rs.getLong("tiporeclamo"));
		 dto.setMotivo(rs.getString("motivo"));
		 dto.setFechareclamo(rs.getDate("fechareclamo"));
		 dto.setTrabajotercerizado(rs.getLong("trabajotercerizado"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Reclamoempresametalurgica[]
*/

	protected ReclamoempresametalurgicaDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ReclamoempresametalurgicaDB dto = new ReclamoempresametalurgicaDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		ReclamoempresametalurgicaDB ret[] = new ReclamoempresametalurgicaDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

    public String getUltimoIDReclamo(Connection con) throws Exception {
         PreparedStatement stmt = null;
            ResultSet rs = null;
            String SQL_STATEMENT ="Select max (idreclamo) from reclamoempresametalurgica";
            try {
                    stmt = con.prepareStatement(SQL_STATEMENT);
                    rs = stmt.executeQuery();
                    rs.next();
                    Object id = rs.getInt("max");
                    return id.toString();
            }
            catch(Exception e){
                throw new Exception();
            }
    }
}
