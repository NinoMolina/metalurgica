/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of MaquinaxejecucionetapaproduccionDAO interface 
* 
*/


public class MaquinaxejecucionetapaproduccionDAOImpl implements MaquinaxejecucionetapaproduccionDAO
{


/**
* Method deletes a record from table MAQUINAXEJECUCIONETAPAPRODUCCION
* @param MaquinaxejecucionetapaproduccionPK maquinaxejecucionetapaproduccionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(MaquinaxejecucionetapaproduccionPKDB maquinaxejecucionetapaproduccionpk , Connection con)throws MaquinaxejecucionetapaproduccionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  MAQUINAXEJECUCIONETAPAPRODUCCION where idejecucionetapaproduccion = ? AND idetapaproduccion = ? AND idmaquina = ?");
			ps.setLong(1, maquinaxejecucionetapaproduccionpk.getIdejecucionetapaproduccion());
			ps.setLong(2, maquinaxejecucionetapaproduccionpk.getIdetapaproduccion());
			ps.setLong(3, maquinaxejecucionetapaproduccionpk.getIdmaquina());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new MaquinaxejecucionetapaproduccionException(sqle);}
		catch(Exception e) {throw new MaquinaxejecucionetapaproduccionException(e);}
	}



/**
* This method updates a record in table MAQUINAXEJECUCIONETAPAPRODUCCION
* @param MaquinaxejecucionetapaproduccionPK
* @param Maquinaxejecucionetapaproduccion
* @param  Connection con
* @return   int
*/

	public int update(MaquinaxejecucionetapaproduccionPKDB maquinaxejecucionetapaproduccionpk, MaquinaxejecucionetapaproduccionDB maquinaxejecucionetapaproduccion, Connection con)throws MaquinaxejecucionetapaproduccionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update MAQUINAXEJECUCIONETAPAPRODUCCION set HORASMAQUINA = ? , HORASHOMBRE = ?  where idejecucionetapaproduccion = ? AND idetapaproduccion = ? AND idmaquina = ?");
				ps.setTime(1,maquinaxejecucionetapaproduccion.getHorasmaquina());
				ps.setTime(2,maquinaxejecucionetapaproduccion.getHorashombre());
				ps.setLong(3,maquinaxejecucionetapaproduccionpk.getIdejecucionetapaproduccion());
				ps.setLong(4,maquinaxejecucionetapaproduccionpk.getIdetapaproduccion());
				ps.setLong(5,maquinaxejecucionetapaproduccionpk.getIdmaquina());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MaquinaxejecucionetapaproduccionException(sqle);}
		catch(Exception e){throw new MaquinaxejecucionetapaproduccionException(e);}
	}

/**
* This method inserts data in table MAQUINAXEJECUCIONETAPAPRODUCCION
*
* @param Maquinaxejecucionetapaproduccion maquinaxejecucionetapaproduccion
* @param   Connection con
* @return  MaquinaxejecucionetapaproduccionPK
*/

	public int insert(MaquinaxejecucionetapaproduccionDB maquinaxejecucionetapaproduccion ,Connection con)throws MaquinaxejecucionetapaproduccionException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into MAQUINAXEJECUCIONETAPAPRODUCCION( IDEJECUCIONETAPAPRODUCCION, IDETAPAPRODUCCION, IDMAQUINA, HORASMAQUINA, HORASHOMBRE) values (?, ?, ?, ?, ?)");
				ps.setLong(1,maquinaxejecucionetapaproduccion.getIdejecucionetapaproduccion());
				ps.setLong(2,maquinaxejecucionetapaproduccion.getIdetapaproduccion());
				ps.setLong(3,maquinaxejecucionetapaproduccion.getIdmaquina());
				ps.setTime(4,maquinaxejecucionetapaproduccion.getHorasmaquina());
				ps.setTime(5,maquinaxejecucionetapaproduccion.getHorashombre());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new MaquinaxejecucionetapaproduccionException(sqle);}
		catch(Exception e){throw new MaquinaxejecucionetapaproduccionException(e);}
	}

/**
* 
* Returns a row from the maquinaxejecucionetapaproduccion table for the primary key passed as parameter.
* 
*/

	public MaquinaxejecucionetapaproduccionDB findByPrimaryKey(long idejecucionetapaproduccion, long idetapaproduccion, long idmaquina, Connection con) throws MaquinaxejecucionetapaproduccionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion where idejecucionetapaproduccion = ? AND idetapaproduccion = ? AND idmaquina = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idejecucionetapaproduccion);
	  		stmt.setLong(2, idetapaproduccion);
	  		stmt.setLong(3, idmaquina);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new MaquinaxejecucionetapaproduccionException(sqle);
	  	}
	    catch(Exception e){throw new MaquinaxejecucionetapaproduccionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the maquinaxejecucionetapaproduccion table for the primary key object passed as parameter.
* 
* @param  MaquinaxejecucionetapaproduccionPK maquinaxejecucionetapaproduccionpk
* @param Connection con
* @return  Maquinaxejecucionetapaproduccion
*/

	public MaquinaxejecucionetapaproduccionDB findByPrimaryKey(MaquinaxejecucionetapaproduccionPKDB maquinaxejecucionetapaproduccionpk, Connection con) throws MaquinaxejecucionetapaproduccionException{
		return findByPrimaryKey(maquinaxejecucionetapaproduccionpk.getIdejecucionetapaproduccion(), maquinaxejecucionetapaproduccionpk.getIdetapaproduccion(), maquinaxejecucionetapaproduccionpk.getIdmaquina(), con);
	}

/**
*
* Returns all rows from maquinaxejecucionetapaproduccion table where IDEJECUCIONETAPAPRODUCCION= idejecucionetapaproduccion
*
* @param   long  idejecucionetapaproduccion
* @param   Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*/

	public MaquinaxejecucionetapaproduccionDB[] findByIdejecucionetapaproduccion(long idejecucionetapaproduccion, Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion where idejecucionetapaproduccion = ? order by idejecucionetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idejecucionetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquinaxejecucionetapaproduccion table where IDETAPAPRODUCCION= idetapaproduccion
*
* @param   long  idetapaproduccion
* @param   Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*/

	public MaquinaxejecucionetapaproduccionDB[] findByIdetapaproduccion(long idetapaproduccion, Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion where idetapaproduccion = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquinaxejecucionetapaproduccion table where IDMAQUINA= idmaquina
*
* @param   long  idmaquina
* @param   Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*/

	public MaquinaxejecucionetapaproduccionDB[] findByIdmaquina(long idmaquina, Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion where idmaquina = ? order by idmaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquinaxejecucionetapaproduccion table where HORASMAQUINA= horasmaquina
*
* @param   Time  horasmaquina
* @param   Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*/

	public MaquinaxejecucionetapaproduccionDB[] findByHorasmaquina(Time horasmaquina, Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion where horasmaquina = ? order by horasmaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horasmaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from maquinaxejecucionetapaproduccion table where HORASHOMBRE= horashombre
*
* @param   Time  horashombre
* @param   Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*/

	public MaquinaxejecucionetapaproduccionDB[] findByHorashombre(Time horashombre, Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion where horashombre = ? order by horashombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horashombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
* Returns all rows from maquinaxejecucionetapaproduccion table 
*
* @param Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*
*/

	public MaquinaxejecucionetapaproduccionDB[] findAll( Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from maquinaxejecucionetapaproduccion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*
*/

	public MaquinaxejecucionetapaproduccionDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from maquinaxejecucionetapaproduccion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Maquinaxejecucionetapaproduccion[]
*
*/

	public MaquinaxejecucionetapaproduccionDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws MaquinaxejecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idejecucionetapaproduccion, idetapaproduccion, idmaquina, horasmaquina, horashombre from maquinaxejecucionetapaproduccion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new MaquinaxejecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new MaquinaxejecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Maquinaxejecucionetapaproduccion
*
*/

	protected MaquinaxejecucionetapaproduccionDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					MaquinaxejecucionetapaproduccionDB dto = new MaquinaxejecucionetapaproduccionDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Maquinaxejecucionetapaproduccion dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(MaquinaxejecucionetapaproduccionDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdejecucionetapaproduccion(rs.getLong("idejecucionetapaproduccion"));
		 dto.setIdetapaproduccion(rs.getLong("idetapaproduccion"));
		 dto.setIdmaquina(rs.getLong("idmaquina"));
		 dto.setHorasmaquina(rs.getTime("horasmaquina"));
		 dto.setHorashombre(rs.getTime("horashombre"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Maquinaxejecucionetapaproduccion[]
*/

	protected MaquinaxejecucionetapaproduccionDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			MaquinaxejecucionetapaproduccionDB dto = new MaquinaxejecucionetapaproduccionDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		MaquinaxejecucionetapaproduccionDB ret[] = new MaquinaxejecucionetapaproduccionDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
