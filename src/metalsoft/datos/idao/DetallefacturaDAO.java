/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Oct 31 02:26:41 ART 2010
*
* DAO-Generator Version 1.2
*
*/
package metalsoft.datos.idao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
public interface DetallefacturaDAO
{
	public int insert(DetallefacturaDB detallefactura, Connection con ) throws DetallefacturaException;
	public int update(DetallefacturaPKDB detallefacturapk, DetallefacturaDB detallefactura, Connection con) throws DetallefacturaException;
	public int delete(DetallefacturaPKDB detallefacturapk, Connection con) throws DetallefacturaException;
	public DetallefacturaDB findByPrimaryKey(DetallefacturaPKDB detallefacturapk , Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findAll(Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findByIddetalle(long iddetalle,Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findByIdfactura(long idfactura,Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findByIdpedido(long idpedido,Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findByMontoparcial(double montoparcial,Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findByCantidad(int cantidad,Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findByIddetallepedido(long iddetallepedido,Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallefacturaException;
	public DetallefacturaDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallefacturaException;
}
