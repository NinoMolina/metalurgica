/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Mon Aug 30 13:24:00 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallepresupuestoDAO interface 
* 
*/


public class DetallepresupuestoDAOImpl implements DetallepresupuestoDAO
{


/**
* Method deletes a record from table DETALLEPRESUPUESTO
* @param DetallepresupuestoPK detallepresupuestopk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallepresupuestoPKDB detallepresupuestopk , Connection con)throws DetallepresupuestoException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEPRESUPUESTO where iddetalle = ?");
			ps.setLong(1, detallepresupuestopk.getIddetalle());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallepresupuestoException(sqle);}
		catch(Exception e) {throw new DetallepresupuestoException(e);}
	}



/**
* This method updates a record in table DETALLEPRESUPUESTO
* @param DetallepresupuestoPK
* @param Detallepresupuesto
* @param  Connection con
* @return   int
*/

	public int update(DetallepresupuestoPKDB detallepresupuestopk, DetallepresupuestoDB detallepresupuesto, Connection con)throws DetallepresupuestoException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEPRESUPUESTO set IDPRESUPUESTO = ? , IDDETALLEPEDIDO = ? , IDPRODUCTO = ? , CANTIDAD = ? , PRECIO = ?  where iddetalle = ?");
				ps.setLong(1,detallepresupuesto.getIdpresupuesto());
				ps.setLong(2,detallepresupuesto.getIddetallepedido());
				ps.setLong(3,detallepresupuesto.getIdproducto());
				ps.setInt(4,detallepresupuesto.getCantidad());
				ps.setDouble(5,detallepresupuesto.getPrecio());
				ps.setLong(6,detallepresupuestopk.getIddetalle());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallepresupuestoException(sqle);}
		catch(Exception e){throw new DetallepresupuestoException(e);}
	}

/**
* This method inserts data in table DETALLEPRESUPUESTO
*
* @param Detallepresupuesto detallepresupuesto
* @param   Connection con
* @return  DetallepresupuestoPK
*/

	public int insert(DetallepresupuestoDB detallepresupuesto ,Connection con)throws DetallepresupuestoException {

		PreparedStatement ps = null;
                ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEPRESUPUESTO( IDPRESUPUESTO, IDDETALLEPEDIDO, IDPRODUCTO, CANTIDAD, PRECIO) values (?, ?, ?, ?, ?) RETURNING iddetalle");
				ps.setLong(1,detallepresupuesto.getIdpresupuesto());
				ps.setLong(2,detallepresupuesto.getIddetallepedido());
				ps.setLong(3,detallepresupuesto.getIdproducto());
				ps.setInt(4,detallepresupuesto.getCantidad());
				ps.setDouble(5,detallepresupuesto.getPrecio());
                                rs=ps.executeQuery();
                                rs.next();
				return (int)rs.getLong(1);
		}catch(SQLException sqle){throw new DetallepresupuestoException(sqle);}
		catch(Exception e){throw new DetallepresupuestoException(e);}
	}

/**
* 
* Returns a row from the detallepresupuesto table for the primary key passed as parameter.
* 
*/

	public DetallepresupuestoDB findByPrimaryKey(long iddetalle, Connection con) throws DetallepresupuestoException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto where iddetalle = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, iddetalle);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallepresupuestoException(sqle);
	  	}
	    catch(Exception e){throw new DetallepresupuestoException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallepresupuesto table for the primary key object passed as parameter.
* 
* @param  DetallepresupuestoPK detallepresupuestopk
* @param Connection con
* @return  Detallepresupuesto
*/

	public DetallepresupuestoDB findByPrimaryKey(DetallepresupuestoPKDB detallepresupuestopk, Connection con) throws DetallepresupuestoException{
		return findByPrimaryKey(detallepresupuestopk.getIddetalle(), con);
	}

/**
*
* Returns all rows from detallepresupuesto table where IDDETALLE= iddetalle
*
* @param   long  iddetalle
* @param   Connection con
* @return  Detallepresupuesto[]
*/

	public DetallepresupuestoDB[] findByIddetalle(long iddetalle, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto where iddetalle = ? order by iddetalle";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetalle );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepresupuesto table where IDPRESUPUESTO= idpresupuesto
*
* @param   long  idpresupuesto
* @param   Connection con
* @return  Detallepresupuesto[]
*/

	public DetallepresupuestoDB[] findByIdpresupuesto(long idpresupuesto, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto where idpresupuesto = ? order by idpresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpresupuesto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepresupuesto table where IDDETALLEPEDIDO= iddetallepedido
*
* @param   long  iddetallepedido
* @param   Connection con
* @return  Detallepresupuesto[]
*/

	public DetallepresupuestoDB[] findByIddetallepedido(long iddetallepedido, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto where iddetallepedido = ? order by iddetallepedido";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, iddetallepedido );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepresupuesto table where IDPRODUCTO= idproducto
*
* @param   long  idproducto
* @param   Connection con
* @return  Detallepresupuesto[]
*/

	public DetallepresupuestoDB[] findByIdproducto(long idproducto, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto where idproducto = ? order by idproducto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idproducto );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepresupuesto table where CANTIDAD= cantidad
*
* @param   int  cantidad
* @param   Connection con
* @return  Detallepresupuesto[]
*/

	public DetallepresupuestoDB[] findByCantidad(int cantidad, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto where cantidad = ? order by cantidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallepresupuesto table where PRECIO= precio
*
* @param   double  precio
* @param   Connection con
* @return  Detallepresupuesto[]
*/

	public DetallepresupuestoDB[] findByPrecio(double precio, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto where precio = ? order by precio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDouble( 1, precio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallepresupuesto table 
*
* @param Connection con
* @return  Detallepresupuesto[]
*
*/

	public DetallepresupuestoDB[] findAll( Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallepresupuesto table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallepresupuesto[]
*
*/

	public DetallepresupuestoDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
* Returns rows from detallepresupuesto table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallepresupuesto[]
*
*/

	public DetallepresupuestoDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallepresupuestoException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select iddetalle, idpresupuesto, iddetallepedido, idproducto, cantidad, precio from detallepresupuesto";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallepresupuestoException(sqle);
			}
			catch(Exception e){
					throw new DetallepresupuestoException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallepresupuesto
*
*/

	protected DetallepresupuestoDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					DetallepresupuestoDB dto = new DetallepresupuestoDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallepresupuesto dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(DetallepresupuestoDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIddetalle(rs.getLong("iddetalle"));
		 dto.setIdpresupuesto(rs.getLong("idpresupuesto"));
		 dto.setIddetallepedido(rs.getLong("iddetallepedido"));
		 dto.setIdproducto(rs.getLong("idproducto"));
		 dto.setCantidad(rs.getInt("cantidad"));
		 dto.setPrecio(rs.getDouble("precio"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallepresupuesto[]
*/

	protected DetallepresupuestoDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DetallepresupuestoDB dto = new DetallepresupuestoDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		DetallepresupuestoDB ret[] = new DetallepresupuestoDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
