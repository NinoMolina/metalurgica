/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:02 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of EjecucionplanificacioncalidadDAO interface 
* 
*/


public class EjecucionplanificacioncalidadDAOImpl implements EjecucionplanificacioncalidadDAO
{


/**
* Method deletes a record from table EJECUCIONPLANIFICACIONCALIDAD
* @param EjecucionplanificacioncalidadPK ejecucionplanificacioncalidadpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(EjecucionplanificacioncalidadPKDB ejecucionplanificacioncalidadpk , Connection con)throws EjecucionplanificacioncalidadException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  EJECUCIONPLANIFICACIONCALIDAD where idejecucion = ? AND idplanificacioncalidad = ?");
			ps.setLong(1, ejecucionplanificacioncalidadpk.getIdejecucion());
			ps.setLong(2, ejecucionplanificacioncalidadpk.getIdplanificacioncalidad());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new EjecucionplanificacioncalidadException(sqle);}
		catch(Exception e) {throw new EjecucionplanificacioncalidadException(e);}
	}



/**
* This method updates a record in table EJECUCIONPLANIFICACIONCALIDAD
* @param EjecucionplanificacioncalidadPK
* @param Ejecucionplanificacioncalidad
* @param  Connection con
* @return   int
*/

	public int update(EjecucionplanificacioncalidadPKDB ejecucionplanificacioncalidadpk, EjecucionplanificacioncalidadDB ejecucionplanificacioncalidad, Connection con)throws EjecucionplanificacioncalidadException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update EJECUCIONPLANIFICACIONCALIDAD set FECHAINICIO = ? , FECHAFIN = ? , HORAINICIO = ? , HORAFIN = ? , ESTADO = ?  where idejecucion = ? AND idplanificacioncalidad = ?");
				ps.setDate(1,ejecucionplanificacioncalidad.getFechainicio());
				ps.setDate(2,ejecucionplanificacioncalidad.getFechafin());
				ps.setTime(3,ejecucionplanificacioncalidad.getHorainicio());
				ps.setTime(4,ejecucionplanificacioncalidad.getHorafin());
				ps.setLong(5,ejecucionplanificacioncalidad.getEstado());
				ps.setLong(6,ejecucionplanificacioncalidadpk.getIdejecucion());
				ps.setLong(7,ejecucionplanificacioncalidadpk.getIdplanificacioncalidad());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EjecucionplanificacioncalidadException(sqle);}
		catch(Exception e){throw new EjecucionplanificacioncalidadException(e);}
	}

/**
* This method inserts data in table EJECUCIONPLANIFICACIONCALIDAD
*
* @param Ejecucionplanificacioncalidad ejecucionplanificacioncalidad
* @param   Connection con
* @return  EjecucionplanificacioncalidadPK
*/

	public int insert(EjecucionplanificacioncalidadDB ejecucionplanificacioncalidad ,Connection con)throws EjecucionplanificacioncalidadException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into EJECUCIONPLANIFICACIONCALIDAD( IDPLANIFICACIONCALIDAD, FECHAINICIO, FECHAFIN, HORAINICIO, HORAFIN, ESTADO) values (?, ?, ?, ?, ?, ?)");
				ps.setLong(1,ejecucionplanificacioncalidad.getIdplanificacioncalidad());
				ps.setDate(2,ejecucionplanificacioncalidad.getFechainicio());
				ps.setDate(3,ejecucionplanificacioncalidad.getFechafin());
				ps.setTime(4,ejecucionplanificacioncalidad.getHorainicio());
				ps.setTime(5,ejecucionplanificacioncalidad.getHorafin());
				ps.setLong(6,ejecucionplanificacioncalidad.getEstado());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EjecucionplanificacioncalidadException(sqle);}
		catch(Exception e){throw new EjecucionplanificacioncalidadException(e);}
	}

/**
* 
* Returns a row from the ejecucionplanificacioncalidad table for the primary key passed as parameter.
* 
*/

	public EjecucionplanificacioncalidadDB findByPrimaryKey(long idejecucion, long idplanificacioncalidad, Connection con) throws EjecucionplanificacioncalidadException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where idejecucion = ? AND idplanificacioncalidad = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idejecucion);
	  		stmt.setLong(2, idplanificacioncalidad);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new EjecucionplanificacioncalidadException(sqle);
	  	}
	    catch(Exception e){throw new EjecucionplanificacioncalidadException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the ejecucionplanificacioncalidad table for the primary key object passed as parameter.
* 
* @param  EjecucionplanificacioncalidadPK ejecucionplanificacioncalidadpk
* @param Connection con
* @return  Ejecucionplanificacioncalidad
*/

	public EjecucionplanificacioncalidadDB findByPrimaryKey(EjecucionplanificacioncalidadPKDB ejecucionplanificacioncalidadpk, Connection con) throws EjecucionplanificacioncalidadException{
		return findByPrimaryKey(ejecucionplanificacioncalidadpk.getIdejecucion(), ejecucionplanificacioncalidadpk.getIdplanificacioncalidad(), con);
	}

/**
*
* Returns all rows from ejecucionplanificacioncalidad table where IDEJECUCION= idejecucion
*
* @param   long  idejecucion
* @param   Connection con
* @return  Ejecucionplanificacioncalidad[]
*/

	public EjecucionplanificacioncalidadDB[] findByIdejecucion(long idejecucion, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where idejecucion = ? order by idejecucion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idejecucion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionplanificacioncalidad table where IDPLANIFICACIONCALIDAD= idplanificacioncalidad
*
* @param   long  idplanificacioncalidad
* @param   Connection con
* @return  Ejecucionplanificacioncalidad[]
*/

	public EjecucionplanificacioncalidadDB[] findByIdplanificacioncalidad(long idplanificacioncalidad, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where idplanificacioncalidad = ? order by idplanificacioncalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanificacioncalidad );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionplanificacioncalidad table where FECHAINICIO= fechainicio
*
* @param   Date  fechainicio
* @param   Connection con
* @return  Ejecucionplanificacioncalidad[]
*/

	public EjecucionplanificacioncalidadDB[] findByFechainicio(Date fechainicio, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where fechainicio = ? order by fechainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionplanificacioncalidad table where FECHAFIN= fechafin
*
* @param   Date  fechafin
* @param   Connection con
* @return  Ejecucionplanificacioncalidad[]
*/

	public EjecucionplanificacioncalidadDB[] findByFechafin(Date fechafin, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where fechafin = ? order by fechafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionplanificacioncalidad table where HORAINICIO= horainicio
*
* @param   Time  horainicio
* @param   Connection con
* @return  Ejecucionplanificacioncalidad[]
*/

	public EjecucionplanificacioncalidadDB[] findByHorainicio(Time horainicio, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where horainicio = ? order by horainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionplanificacioncalidad table where HORAFIN= horafin
*
* @param   Time  horafin
* @param   Connection con
* @return  Ejecucionplanificacioncalidad[]
*/

	public EjecucionplanificacioncalidadDB[] findByHorafin(Time horafin, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where horafin = ? order by horafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionplanificacioncalidad table where ESTADO= estado
*
* @param   long  estado
* @param   Connection con
* @return  Ejecucionplanificacioncalidad[]
*/

	public EjecucionplanificacioncalidadDB[] findByEstado(long estado, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad where estado = ? order by estado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, estado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
* Returns all rows from ejecucionplanificacioncalidad table 
*
* @param Connection con
* @return  Ejecucionplanificacioncalidad[]
*
*/

	public EjecucionplanificacioncalidadDB[] findAll( Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from ejecucionplanificacioncalidad table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Ejecucionplanificacioncalidad[]
*
*/

	public EjecucionplanificacioncalidadDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
* Returns rows from ejecucionplanificacioncalidad table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Ejecucionplanificacioncalidad[]
*
*/

	public EjecucionplanificacioncalidadDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws EjecucionplanificacioncalidadException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idejecucion, idplanificacioncalidad, fechainicio, fechafin, horainicio, horafin, estado from ejecucionplanificacioncalidad";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionplanificacioncalidadException(sqle);
			}
			catch(Exception e){
					throw new EjecucionplanificacioncalidadException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Ejecucionplanificacioncalidad
*
*/

	protected EjecucionplanificacioncalidadDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					EjecucionplanificacioncalidadDB dto = new EjecucionplanificacioncalidadDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Ejecucionplanificacioncalidad dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(EjecucionplanificacioncalidadDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdejecucion(rs.getLong("idejecucion"));
		 dto.setIdplanificacioncalidad(rs.getLong("idplanificacioncalidad"));
		 dto.setFechainicio(rs.getDate("fechainicio"));
		 dto.setFechafin(rs.getDate("fechafin"));
		 dto.setHorainicio(rs.getTime("horainicio"));
		 dto.setHorafin(rs.getTime("horafin"));
		 dto.setEstado(rs.getLong("estado"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Ejecucionplanificacioncalidad[]
*/

	protected EjecucionplanificacioncalidadDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			EjecucionplanificacioncalidadDB dto = new EjecucionplanificacioncalidadDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		EjecucionplanificacioncalidadDB ret[] = new EjecucionplanificacioncalidadDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
