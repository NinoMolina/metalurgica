/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PiezaDAO interface 
* 
*/


public class PiezaDAOImpl implements PiezaDAO
{


/**
* Method deletes a record from table PIEZA
* @param PiezaPK piezapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PiezaPKDB piezapk , Connection con)throws PiezaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PIEZA where idpieza = ?");
			ps.setLong(1, piezapk.getIdpieza());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PiezaException(sqle);}
		catch(Exception e) {throw new PiezaException(e);}
	}



/**
* This method updates a record in table PIEZA
* @param PiezaPK
* @param Pieza
* @param  Connection con
* @return   int
*/

	public int update(PiezaPKDB piezapk, PiezaDB pieza, Connection con)throws PiezaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PIEZA set NOMBRE = ? , TIPOMATERIAL = ? , ALTO = ? , MATERIAPRIMA = ? , MATRIZ = ? , ANCHO = ? , LARGO = ?  where idpieza = ?");
				ps.setString(1,pieza.getNombre());

                long idtm=pieza.getTipomaterial();
				if(idtm>0)ps.setLong(2,idtm);
                else ps.setNull(2, java.sql.Types.NULL);

				ps.setDouble(3,pieza.getAlto());

                long idMp=pieza.getMateriaprima();
				if(idMp>=0)ps.setLong(4,idMp);
                else ps.setNull(4, java.sql.Types.NULL);

                long idM=pieza.getMatriz();
				if(idM>0)ps.setLong(5,idM);
                else ps.setNull(5, java.sql.Types.NULL);

                ps.setDouble(6,pieza.getAncho());
                ps.setDouble(7,pieza.getLargo());

                ps.setLong(8,piezapk.getIdpieza());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PiezaException(sqle);}
		catch(Exception e){throw new PiezaException(e);}
	}

/**
* This method inserts data in table PIEZA
*
* @param Pieza pieza
* @param   Connection con
* @return  PiezaPK
*/

	public int insert(PiezaDB pieza ,Connection con)throws PiezaException {

		PreparedStatement ps = null;
        ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into PIEZA( NOMBRE, TIPOMATERIAL, ALTO, MATERIAPRIMA, MATRIZ, ANCHO, LARGO) values (?, ?, ?, ?, ?, ?, ?)RETURNING idpieza");
				ps.setString(1,pieza.getNombre());

                long idtm=pieza.getTipomaterial();
				if(idtm>0)ps.setLong(2,idtm);
                else ps.setNull(2, java.sql.Types.NULL);
                
				ps.setDouble(3,pieza.getAlto());

                long idMp=pieza.getMateriaprima();
				if(idMp>0)ps.setLong(4,idMp);
                else ps.setNull(4, java.sql.Types.NULL);

                long idM=pieza.getMatriz();
				if(idM>0)ps.setLong(5,idM);
                else ps.setNull(5, java.sql.Types.NULL);

                ps.setDouble(6,pieza.getAncho());
                ps.setDouble(7,pieza.getLargo());

				rs=ps.executeQuery();
                rs.next();
                return (int)rs.getLong(1);
		}catch(SQLException sqle){throw new PiezaException(sqle);}
		catch(Exception e){throw new PiezaException(e);}
	}

/**
* 
* Returns a row from the pieza table for the primary key passed as parameter.
* 
*/

	public PiezaDB findByPrimaryKey(long idpieza, Connection con) throws PiezaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza where idpieza = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idpieza);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PiezaException(sqle);
	  	}
	    catch(Exception e){throw new PiezaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the pieza table for the primary key object passed as parameter.
* 
* @param  PiezaPK piezapk
* @param Connection con
* @return  Pieza
*/

	public PiezaDB findByPrimaryKey(PiezaPKDB piezapk, Connection con) throws PiezaException{
		return findByPrimaryKey(piezapk.getIdpieza(), con);
	}

/**
*
* Returns all rows from pieza table where IDPIEZA= idpieza
*
* @param   long  idpieza
* @param   Connection con
* @return  Pieza[]
*/

	public PiezaDB[] findByIdpieza(long idpieza, Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza where idpieza = ? order by idpieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pieza table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Pieza[]
*/

	public PiezaDB[] findByNombre(String nombre, Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pieza table where TIPOMATERIAL= tipomaterial
*
* @param   long  tipomaterial
* @param   Connection con
* @return  Pieza[]
*/

	public PiezaDB[] findByTipomaterial(long tipomaterial, Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza where tipomaterial = ? order by tipomaterial";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, tipomaterial );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pieza table where DIMENSIONES= dimensiones
*
* @param   String  dimensiones
* @param   Connection con
* @return  Pieza[]
*/

	
/**
*
* Returns all rows from pieza table where MATERIAPRIMA= materiaprima
*
* @param   long  materiaprima
* @param   Connection con
* @return  Pieza[]
*/

	public PiezaDB[] findByMateriaprima(long materiaprima, Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza where materiaprima = ? order by materiaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, materiaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from pieza table where MATRIZ= matriz
*
* @param   long  matriz
* @param   Connection con
* @return  Pieza[]
*/

	public PiezaDB[] findByMatriz(long matriz, Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza where matriz = ? order by matriz";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, matriz );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
* Returns all rows from pieza table 
*
* @param Connection con
* @return  Pieza[]
*
*/

	public PiezaDB[] findAll( Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
* Returns rows from pieza table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Pieza[]
*
*/

	public PiezaDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
* Returns rows from pieza table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Pieza[]
*
*/

	public PiezaDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PiezaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idpieza, nombre, tipomaterial, alto, ancho, largo, materiaprima, matriz from pieza";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaException(sqle);
			}
			catch(Exception e){
					throw new PiezaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Pieza
*
*/

	protected PiezaDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					PiezaDB dto = new PiezaDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Pieza dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(PiezaDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdpieza(rs.getLong("idpieza"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setTipomaterial(rs.getLong("tipomaterial"));
		 dto.setAlto(rs.getDouble("alto"));
         dto.setAncho(rs.getDouble("ancho"));
         dto.setLargo(rs.getDouble("largo"));
		 dto.setMateriaprima(rs.getLong("materiaprima"));
		 dto.setMatriz(rs.getLong("matriz"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Pieza[]
*/

	protected PiezaDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PiezaDB dto = new PiezaDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		PiezaDB ret[] = new PiezaDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
