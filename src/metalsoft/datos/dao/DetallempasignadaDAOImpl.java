/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Oct 17 21:47:14 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetallempasignadaDAO interface 
* 
*/


public class DetallempasignadaDAOImpl implements DetallempasignadaDAO
{


/**
* Method deletes a record from table DETALLEMPASIGNADA
* @param DetallempasignadaPK detallempasignadapk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetallempasignadaPKDB detallempasignadapk , Connection con)throws DetallempasignadaException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEMPASIGNADA where id = ?");
			ps.setLong(1, detallempasignadapk.getId());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetallempasignadaException(sqle);}
		catch(Exception e) {throw new DetallempasignadaException(e);}
	}



/**
* This method updates a record in table DETALLEMPASIGNADA
* @param DetallempasignadaPK
* @param Detallempasignada
* @param  Connection con
* @return   int
*/

	public int update(DetallempasignadaPKDB detallempasignadapk, DetallempasignadaDB detallempasignada, Connection con)throws DetallempasignadaException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEMPASIGNADA set IDMATERIAPRIMA = ? , CANTIDADMP = ? , IDPLANIFICACIONPRODUCCION = ?  where id = ?");
				ps.setLong(1,detallempasignada.getIdmateriaprima());
				ps.setInt(2,detallempasignada.getCantidadmp());
				ps.setLong(3,detallempasignada.getIdplanificacionproduccion());
				ps.setLong(4,detallempasignadapk.getId());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetallempasignadaException(sqle);}
		catch(Exception e){throw new DetallempasignadaException(e);}
	}

/**
* This method inserts data in table DETALLEMPASIGNADA
*
* @param Detallempasignada detallempasignada
* @param   Connection con
* @return  DetallempasignadaPK
*/

	public int insert(DetallempasignadaDB detallempasignada ,Connection con)throws DetallempasignadaException {

		PreparedStatement ps = null;
        ResultSet rs=null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEMPASIGNADA( IDMATERIAPRIMA, CANTIDADMP, IDPLANIFICACIONPRODUCCION) values (?, ?, ?) RETURNING ID");
				ps.setLong(1,detallempasignada.getIdmateriaprima());
				ps.setInt(2,detallempasignada.getCantidadmp());
				ps.setLong(3,detallempasignada.getIdplanificacionproduccion());

				rs=ps.executeQuery();
                rs.next();
				return (int) rs.getLong(1);
		}catch(SQLException sqle){throw new DetallempasignadaException(sqle);}
		catch(Exception e){throw new DetallempasignadaException(e);}
	}

/**
* 
* Returns a row from the detallempasignada table for the primary key passed as parameter.
* 
*/

	public DetallempasignadaDB findByPrimaryKey(long id, Connection con) throws DetallempasignadaException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada where id = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, id);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetallempasignadaException(sqle);
	  	}
	    catch(Exception e){throw new DetallempasignadaException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detallempasignada table for the primary key object passed as parameter.
* 
* @param  DetallempasignadaPK detallempasignadapk
* @param Connection con
* @return  Detallempasignada
*/

	public DetallempasignadaDB findByPrimaryKey(DetallempasignadaPKDB detallempasignadapk, Connection con) throws DetallempasignadaException{
		return findByPrimaryKey(detallempasignadapk.getId(), con);
	}

/**
*
* Returns all rows from detallempasignada table where ID= id
*
* @param   long  id
* @param   Connection con
* @return  Detallempasignada[]
*/

	public DetallempasignadaDB[] findById(long id, Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada where id = ? order by id";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, id );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallempasignada table where IDMATERIAPRIMA= idmateriaprima
*
* @param   long  idmateriaprima
* @param   Connection con
* @return  Detallempasignada[]
*/

	public DetallempasignadaDB[] findByIdmateriaprima(long idmateriaprima, Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada where idmateriaprima = ? order by idmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmateriaprima );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallempasignada table where CANTIDADMP= cantidadmp
*
* @param   int  cantidadmp
* @param   Connection con
* @return  Detallempasignada[]
*/

	public DetallempasignadaDB[] findByCantidadmp(int cantidadmp, Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada where cantidadmp = ? order by cantidadmp";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setInt( 1, cantidadmp );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detallempasignada table where IDPLANIFICACIONPRODUCCION= idplanificacionproduccion
*
* @param   long  idplanificacionproduccion
* @param   Connection con
* @return  Detallempasignada[]
*/
public DetallempasignadaDB[] findByIdmateriaprimaAndIdPlan(long idmateriaprima, long idplanificacionproduccion, Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada where idmateriaprima = ? and idplanificacionproduccion = ? order by idmateriaprima";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idmateriaprima );
                    stmt.setLong( 2, idplanificacionproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}
	public DetallempasignadaDB[] findByIdplanificacionproduccion(long idplanificacionproduccion, Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada where idplanificacionproduccion = ? order by idplanificacionproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idplanificacionproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}

/**
* Returns all rows from detallempasignada table 
*
* @param Connection con
* @return  Detallempasignada[]
*
*/

	public DetallempasignadaDB[] findAll( Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}

/**
* Returns rows from detallempasignada table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detallempasignada[]
*
*/

	public DetallempasignadaDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}

/**
* Returns rows from detallempasignada table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detallempasignada[]
*
*/

	public DetallempasignadaDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetallempasignadaException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select id, idmateriaprima, cantidadmp, idplanificacionproduccion from detallempasignada";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetallempasignadaException(sqle);
			}
			catch(Exception e){
					throw new DetallempasignadaException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detallempasignada
*
*/

	protected DetallempasignadaDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					DetallempasignadaDB dto = new DetallempasignadaDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detallempasignada dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(DetallempasignadaDB dto, ResultSet rs) throws SQLException
	{
		 dto.setId(rs.getLong("id"));
		 dto.setIdmateriaprima(rs.getLong("idmateriaprima"));
		 dto.setCantidadmp(rs.getInt("cantidadmp"));
		 dto.setIdplanificacionproduccion(rs.getLong("idplanificacionproduccion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detallempasignada[]
*/

	protected DetallempasignadaDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DetallempasignadaDB dto = new DetallempasignadaDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		DetallempasignadaDB ret[] = new DetallempasignadaDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
