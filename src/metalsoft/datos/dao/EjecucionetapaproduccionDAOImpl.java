/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Oct 19 00:24:14 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of EjecucionetapaproduccionDAO interface 
* 
*/


public class EjecucionetapaproduccionDAOImpl implements EjecucionetapaproduccionDAO
{


/**
* Method deletes a record from table EJECUCIONETAPAPRODUCCION
* @param EjecucionetapaproduccionPK ejecucionetapaproduccionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(EjecucionetapaproduccionPKDB ejecucionetapaproduccionpk , Connection con)throws EjecucionetapaproduccionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  EJECUCIONETAPAPRODUCCION where idejecucion = ? AND idetapaproduccion = ?");
			ps.setLong(1, ejecucionetapaproduccionpk.getIdejecucion());
			ps.setLong(2, ejecucionetapaproduccionpk.getIdetapaproduccion());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new EjecucionetapaproduccionException(sqle);}
		catch(Exception e) {throw new EjecucionetapaproduccionException(e);}
	}



/**
* This method updates a record in table EJECUCIONETAPAPRODUCCION
* @param EjecucionetapaproduccionPK
* @param Ejecucionetapaproduccion
* @param  Connection con
* @return   int
*/

	public int update(EjecucionetapaproduccionPKDB ejecucionetapaproduccionpk, Ejecucionetapaproduccion ejecucionetapaproduccion, Connection con)throws EjecucionetapaproduccionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update EJECUCIONETAPAPRODUCCION set NOMBRE = ? , TOTALHORASMAQUINA = ? , TOTALHORASHOMBRE = ? , EMPLEADO = ? , FECHAINICIO = ? , HORAINICIO = ? , FECHAFIN = ? , HORAFIN = ? , OBSERVACIONES = ? , ESTADO = ? , NROEJECUCION = ?  where idejecucion = ? AND idetapaproduccion = ?");
				ps.setString(1,ejecucionetapaproduccion.getNombre());
				ps.setTime(2,ejecucionetapaproduccion.getTotalhorasmaquina());
				ps.setTime(3,ejecucionetapaproduccion.getTotalhorashombre());
				ps.setLong(4,ejecucionetapaproduccion.getEmpleado());
				ps.setDate(5,ejecucionetapaproduccion.getFechainicio());
				ps.setTime(6,ejecucionetapaproduccion.getHorainicio());
				ps.setDate(7,ejecucionetapaproduccion.getFechafin());
				ps.setTime(8,ejecucionetapaproduccion.getHorafin());
				ps.setString(9,ejecucionetapaproduccion.getObservaciones());
				ps.setLong(10,ejecucionetapaproduccion.getEstado());
				ps.setLong(11,ejecucionetapaproduccion.getNroejecucion());
				ps.setLong(12,ejecucionetapaproduccionpk.getIdejecucion());
				ps.setLong(13,ejecucionetapaproduccionpk.getIdetapaproduccion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EjecucionetapaproduccionException(sqle);}
		catch(Exception e){throw new EjecucionetapaproduccionException(e);}
	}

/**
* This method inserts data in table EJECUCIONETAPAPRODUCCION
*
* @param Ejecucionetapaproduccion ejecucionetapaproduccion
* @param   Connection con
* @return  EjecucionetapaproduccionPK
*/

	public int insert(Ejecucionetapaproduccion ejecucionetapaproduccion ,Connection con)throws EjecucionetapaproduccionException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into EJECUCIONETAPAPRODUCCION( IDETAPAPRODUCCION, NOMBRE, TOTALHORASMAQUINA, TOTALHORASHOMBRE, EMPLEADO, FECHAINICIO, HORAINICIO, FECHAFIN, HORAFIN, OBSERVACIONES, ESTADO, NROEJECUCION) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,ejecucionetapaproduccion.getIdetapaproduccion());
				ps.setString(2,ejecucionetapaproduccion.getNombre());
				ps.setTime(3,ejecucionetapaproduccion.getTotalhorasmaquina());
				ps.setTime(4,ejecucionetapaproduccion.getTotalhorashombre());
				ps.setLong(5,ejecucionetapaproduccion.getEmpleado());
				ps.setDate(6,ejecucionetapaproduccion.getFechainicio());
				ps.setTime(7,ejecucionetapaproduccion.getHorainicio());
				ps.setDate(8,ejecucionetapaproduccion.getFechafin());
				ps.setTime(9,ejecucionetapaproduccion.getHorafin());
				ps.setString(10,ejecucionetapaproduccion.getObservaciones());
				ps.setLong(11,ejecucionetapaproduccion.getEstado());
				ps.setLong(12,ejecucionetapaproduccion.getNroejecucion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new EjecucionetapaproduccionException(sqle);}
		catch(Exception e){throw new EjecucionetapaproduccionException(e);}
	}

/**
* 
* Returns a row from the ejecucionetapaproduccion table for the primary key passed as parameter.
* 
*/

	public Ejecucionetapaproduccion findByPrimaryKey(long idejecucion, long idetapaproduccion, Connection con) throws EjecucionetapaproduccionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where idejecucion = ? AND idetapaproduccion = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idejecucion);
	  		stmt.setLong(2, idetapaproduccion);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new EjecucionetapaproduccionException(sqle);
	  	}
	    catch(Exception e){throw new EjecucionetapaproduccionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the ejecucionetapaproduccion table for the primary key object passed as parameter.
* 
* @param  EjecucionetapaproduccionPK ejecucionetapaproduccionpk
* @param Connection con
* @return  Ejecucionetapaproduccion
*/

	public Ejecucionetapaproduccion findByPrimaryKey(EjecucionetapaproduccionPKDB ejecucionetapaproduccionpk, Connection con) throws EjecucionetapaproduccionException{
		return findByPrimaryKey(ejecucionetapaproduccionpk.getIdejecucion(), ejecucionetapaproduccionpk.getIdetapaproduccion(), con);
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where IDEJECUCION= idejecucion
*
* @param   long  idejecucion
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByIdejecucion(long idejecucion, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where idejecucion = ? order by idejecucion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idejecucion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where IDETAPAPRODUCCION= idetapaproduccion
*
* @param   long  idetapaproduccion
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByIdetapaproduccion(long idetapaproduccion, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where idetapaproduccion = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where NOMBRE= nombre
*
* @param   String  nombre
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByNombre(String nombre, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where nombre = ? order by nombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, nombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where TOTALHORASMAQUINA= totalhorasmaquina
*
* @param   Time  totalhorasmaquina
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByTotalhorasmaquina(Time totalhorasmaquina, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where totalhorasmaquina = ? order by totalhorasmaquina";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, totalhorasmaquina );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where TOTALHORASHOMBRE= totalhorashombre
*
* @param   Time  totalhorashombre
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByTotalhorashombre(Time totalhorashombre, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where totalhorashombre = ? order by totalhorashombre";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, totalhorashombre );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where EMPLEADO= empleado
*
* @param   long  empleado
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByEmpleado(long empleado, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where empleado = ? order by empleado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, empleado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where FECHAINICIO= fechainicio
*
* @param   Date  fechainicio
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByFechainicio(Date fechainicio, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where fechainicio = ? order by fechainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where HORAINICIO= horainicio
*
* @param   Time  horainicio
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByHorainicio(Time horainicio, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where horainicio = ? order by horainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where FECHAFIN= fechafin
*
* @param   Date  fechafin
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByFechafin(Date fechafin, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where fechafin = ? order by fechafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where HORAFIN= horafin
*
* @param   Time  horafin
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByHorafin(Time horafin, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where horafin = ? order by horafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where OBSERVACIONES= observaciones
*
* @param   String  observaciones
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByObservaciones(String observaciones, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where observaciones = ? order by observaciones";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, observaciones );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where ESTADO= estado
*
* @param   long  estado
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByEstado(long estado, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where estado = ? order by estado";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, estado );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from ejecucionetapaproduccion table where NROEJECUCION= nroejecucion
*
* @param   long  nroejecucion
* @param   Connection con
* @return  Ejecucionetapaproduccion[]
*/

	public Ejecucionetapaproduccion[] findByNroejecucion(long nroejecucion, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion where nroejecucion = ? order by nroejecucion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroejecucion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
* Returns all rows from ejecucionetapaproduccion table 
*
* @param Connection con
* @return  Ejecucionetapaproduccion[]
*
*/

	public Ejecucionetapaproduccion[] findAll( Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from ejecucionetapaproduccion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Ejecucionetapaproduccion[]
*
*/

	public Ejecucionetapaproduccion[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from ejecucionetapaproduccion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Ejecucionetapaproduccion[]
*
*/

	public Ejecucionetapaproduccion[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws EjecucionetapaproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idejecucion, idetapaproduccion, nombre, totalhorasmaquina, totalhorashombre, empleado, fechainicio, horainicio, fechafin, horafin, observaciones, estado, nroejecucion from ejecucionetapaproduccion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new EjecucionetapaproduccionException(sqle);
			}
			catch(Exception e){
					throw new EjecucionetapaproduccionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Ejecucionetapaproduccion
*
*/

	protected Ejecucionetapaproduccion fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					Ejecucionetapaproduccion dto = new Ejecucionetapaproduccion();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Ejecucionetapaproduccion dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(Ejecucionetapaproduccion dto, ResultSet rs) throws SQLException
	{
		 dto.setIdejecucion(rs.getLong("idejecucion"));
		 dto.setIdetapaproduccion(rs.getLong("idetapaproduccion"));
		 dto.setNombre(rs.getString("nombre"));
		 dto.setTotalhorasmaquina(rs.getTime("totalhorasmaquina"));
		 dto.setTotalhorashombre(rs.getTime("totalhorashombre"));
		 dto.setEmpleado(rs.getLong("empleado"));
		 dto.setFechainicio(rs.getDate("fechainicio"));
		 dto.setHorainicio(rs.getTime("horainicio"));
		 dto.setFechafin(rs.getDate("fechafin"));
		 dto.setHorafin(rs.getTime("horafin"));
		 dto.setObservaciones(rs.getString("observaciones"));
		 dto.setEstado(rs.getLong("estado"));
		 dto.setNroejecucion(rs.getLong("nroejecucion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Ejecucionetapaproduccion[]
*/

	protected Ejecucionetapaproduccion[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Ejecucionetapaproduccion dto = new Ejecucionetapaproduccion();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		Ejecucionetapaproduccion ret[] = new Ejecucionetapaproduccion[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
