/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Tue Oct 19 00:24:14 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of DetalleejecucionplanificacionDAO interface 
* 
*/


public class DetalleejecucionplanificacionDAOImpl implements DetalleejecucionplanificacionDAO
{


/**
* Method deletes a record from table DETALLEEJECUCIONPLANIFICACION
* @param DetalleejecucionplanificacionPK detalleejecucionplanificacionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(DetalleejecucionplanificacionPKDB detalleejecucionplanificacionpk , Connection con)throws DetalleejecucionplanificacionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  DETALLEEJECUCIONPLANIFICACION where id = ?");
			ps.setLong(1, detalleejecucionplanificacionpk.getId());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new DetalleejecucionplanificacionException(sqle);}
		catch(Exception e) {throw new DetalleejecucionplanificacionException(e);}
	}



/**
* This method updates a record in table DETALLEEJECUCIONPLANIFICACION
* @param DetalleejecucionplanificacionPK
* @param Detalleejecucionplanificacion
* @param  Connection con
* @return   int
*/

	public int update(DetalleejecucionplanificacionPKDB detalleejecucionplanificacionpk, DetalleejecucionplanificacionDB detalleejecucionplanificacion, Connection con)throws DetalleejecucionplanificacionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update DETALLEEJECUCIONPLANIFICACION set IDEJECUCIONPLANIFICACIONPRODUCCION = ? , PIEZA = ? , EJECUCIONETAPA = ? , IDETAPAPRODUCCION = ? , PIEZAREAL = ? , FECHAINICIO = ? , FECHAFIN = ? , HORAINICIO = ? , HORAFIN = ?  where id = ?");
				ps.setLong(1,detalleejecucionplanificacion.getIdejecucionplanificacionproduccion());
				ps.setLong(2,detalleejecucionplanificacion.getPieza());
				ps.setLong(3,detalleejecucionplanificacion.getEjecucionetapa());
				ps.setLong(4,detalleejecucionplanificacion.getIdetapaproduccion());
				ps.setLong(5,detalleejecucionplanificacion.getPiezareal());
				ps.setDate(6,detalleejecucionplanificacion.getFechainicio());
				ps.setDate(7,detalleejecucionplanificacion.getFechafin());
				ps.setTime(8,detalleejecucionplanificacion.getHorainicio());
				ps.setTime(9,detalleejecucionplanificacion.getHorafin());
				ps.setLong(10,detalleejecucionplanificacionpk.getId());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleejecucionplanificacionException(sqle);}
		catch(Exception e){throw new DetalleejecucionplanificacionException(e);}
	}

/**
* This method inserts data in table DETALLEEJECUCIONPLANIFICACION
*
* @param Detalleejecucionplanificacion detalleejecucionplanificacion
* @param   Connection con
* @return  DetalleejecucionplanificacionPK
*/

	public int insert(DetalleejecucionplanificacionDB detalleejecucionplanificacion ,Connection con)throws DetalleejecucionplanificacionException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into DETALLEEJECUCIONPLANIFICACION( IDEJECUCIONPLANIFICACIONPRODUCCION, PIEZA, EJECUCIONETAPA, IDETAPAPRODUCCION, PIEZAREAL, FECHAINICIO, FECHAFIN, HORAINICIO, HORAFIN) values (?, ?, ?, ?, ?, ?, ?, ?, ?)");
				ps.setLong(1,detalleejecucionplanificacion.getIdejecucionplanificacionproduccion());
				ps.setLong(2,detalleejecucionplanificacion.getPieza());
				ps.setLong(3,detalleejecucionplanificacion.getEjecucionetapa());
				ps.setLong(4,detalleejecucionplanificacion.getIdetapaproduccion());
				ps.setLong(5,detalleejecucionplanificacion.getPiezareal());
				ps.setDate(6,detalleejecucionplanificacion.getFechainicio());
				ps.setDate(7,detalleejecucionplanificacion.getFechafin());
				ps.setTime(8,detalleejecucionplanificacion.getHorainicio());
				ps.setTime(9,detalleejecucionplanificacion.getHorafin());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new DetalleejecucionplanificacionException(sqle);}
		catch(Exception e){throw new DetalleejecucionplanificacionException(e);}
	}

/**
* 
* Returns a row from the detalleejecucionplanificacion table for the primary key passed as parameter.
* 
*/

	public DetalleejecucionplanificacionDB findByPrimaryKey(long id, Connection con) throws DetalleejecucionplanificacionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where id = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, id);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new DetalleejecucionplanificacionException(sqle);
	  	}
	    catch(Exception e){throw new DetalleejecucionplanificacionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the detalleejecucionplanificacion table for the primary key object passed as parameter.
* 
* @param  DetalleejecucionplanificacionPK detalleejecucionplanificacionpk
* @param Connection con
* @return  Detalleejecucionplanificacion
*/

	public DetalleejecucionplanificacionDB findByPrimaryKey(DetalleejecucionplanificacionPKDB detalleejecucionplanificacionpk, Connection con) throws DetalleejecucionplanificacionException{
		return findByPrimaryKey(detalleejecucionplanificacionpk.getId(), con);
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where ID= id
*
* @param   long  id
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findById(long id, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where id = ? order by id";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, id );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where IDEJECUCIONPLANIFICACIONPRODUCCION= idejecucionplanificacionproduccion
*
* @param   long  idejecucionplanificacionproduccion
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByIdejecucionplanificacionproduccion(long idejecucionplanificacionproduccion, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where idejecucionplanificacionproduccion = ? order by idejecucionplanificacionproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idejecucionplanificacionproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where PIEZA= pieza
*
* @param   long  pieza
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByPieza(long pieza, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where pieza = ? order by pieza";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, pieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where EJECUCIONETAPA= ejecucionetapa
*
* @param   long  ejecucionetapa
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByEjecucionetapa(long ejecucionetapa, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where ejecucionetapa = ? order by ejecucionetapa";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, ejecucionetapa );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where IDETAPAPRODUCCION= idetapaproduccion
*
* @param   long  idetapaproduccion
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByIdetapaproduccion(long idetapaproduccion, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where idetapaproduccion = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where PIEZAREAL= piezareal
*
* @param   long  piezareal
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByPiezareal(long piezareal, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where piezareal = ? order by piezareal";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, piezareal );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where FECHAINICIO= fechainicio
*
* @param   Date  fechainicio
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByFechainicio(Date fechainicio, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where fechainicio = ? order by fechainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where FECHAFIN= fechafin
*
* @param   Date  fechafin
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByFechafin(Date fechafin, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where fechafin = ? order by fechafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where HORAINICIO= horainicio
*
* @param   Time  horainicio
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByHorainicio(Time horainicio, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where horainicio = ? order by horainicio";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horainicio );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from detalleejecucionplanificacion table where HORAFIN= horafin
*
* @param   Time  horafin
* @param   Connection con
* @return  Detalleejecucionplanificacion[]
*/

	public DetalleejecucionplanificacionDB[] findByHorafin(Time horafin, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion where horafin = ? order by horafin";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, horafin );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
* Returns all rows from detalleejecucionplanificacion table 
*
* @param Connection con
* @return  Detalleejecucionplanificacion[]
*
*/

	public DetalleejecucionplanificacionDB[] findAll( Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleejecucionplanificacion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleejecucionplanificacion[]
*
*/

	public DetalleejecucionplanificacionDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
* Returns rows from detalleejecucionplanificacion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Detalleejecucionplanificacion[]
*
*/

	public DetalleejecucionplanificacionDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws DetalleejecucionplanificacionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select id, idejecucionplanificacionproduccion, pieza, ejecucionetapa, idetapaproduccion, piezareal, fechainicio, fechafin, horainicio, horafin from detalleejecucionplanificacion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new DetalleejecucionplanificacionException(sqle);
			}
			catch(Exception e){
					throw new DetalleejecucionplanificacionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Detalleejecucionplanificacion
*
*/

	protected DetalleejecucionplanificacionDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					DetalleejecucionplanificacionDB dto = new DetalleejecucionplanificacionDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Detalleejecucionplanificacion dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(DetalleejecucionplanificacionDB dto, ResultSet rs) throws SQLException
	{
		 dto.setId(rs.getLong("id"));
		 dto.setIdejecucionplanificacionproduccion(rs.getLong("idejecucionplanificacionproduccion"));
		 dto.setPieza(rs.getLong("pieza"));
		 dto.setEjecucionetapa(rs.getLong("ejecucionetapa"));
		 dto.setIdetapaproduccion(rs.getLong("idetapaproduccion"));
		 dto.setPiezareal(rs.getLong("piezareal"));
		 dto.setFechainicio(rs.getDate("fechainicio"));
		 dto.setFechafin(rs.getDate("fechafin"));
		 dto.setHorainicio(rs.getTime("horainicio"));
		 dto.setHorafin(rs.getTime("horafin"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Detalleejecucionplanificacion[]
*/

	protected DetalleejecucionplanificacionDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			DetalleejecucionplanificacionDB dto = new DetalleejecucionplanificacionDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		DetalleejecucionplanificacionDB ret[] = new DetalleejecucionplanificacionDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
