/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:03 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.*;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of PiezaxetapadeproduccionDAO interface 
* 
*/


public class PiezaxetapadeproduccionDAOImpl implements PiezaxetapadeproduccionDAO
{


/**
* Method deletes a record from table PIEZAXETAPADEPRODUCCION
* @param PiezaxetapadeproduccionPK piezaxetapadeproduccionpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(PiezaxetapadeproduccionPKDB piezaxetapadeproduccionpk , Connection con)throws PiezaxetapadeproduccionException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  PIEZAXETAPADEPRODUCCION where idpieza = ? AND idetapaproduccion = ?");
			ps.setLong(1, piezaxetapadeproduccionpk.getIdpieza());
			ps.setLong(2, piezaxetapadeproduccionpk.getIdetapaproduccion());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new PiezaxetapadeproduccionException(sqle);}
		catch(Exception e) {throw new PiezaxetapadeproduccionException(e);}
	}



/**
* This method updates a record in table PIEZAXETAPADEPRODUCCION
* @param PiezaxetapadeproduccionPK
* @param Piezaxetapadeproduccion
* @param  Connection con
* @return   int
*/

	public int update(PiezaxetapadeproduccionPKDB piezaxetapadeproduccionpk, PiezaxetapadeproduccionDB piezaxetapadeproduccion, Connection con)throws PiezaxetapadeproduccionException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update PIEZAXETAPADEPRODUCCION set DURACION = ? , DESCRIPCION = ?  where idpieza = ? AND idetapaproduccion = ?");
				ps.setTime(1,piezaxetapadeproduccion.getDuracion());
				ps.setString(2,piezaxetapadeproduccion.getDescripcion());
				ps.setLong(3,piezaxetapadeproduccionpk.getIdpieza());
				ps.setLong(4,piezaxetapadeproduccionpk.getIdetapaproduccion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PiezaxetapadeproduccionException(sqle);}
		catch(Exception e){throw new PiezaxetapadeproduccionException(e);}
	}

/**
* This method inserts data in table PIEZAXETAPADEPRODUCCION
*
* @param Piezaxetapadeproduccion piezaxetapadeproduccion
* @param   Connection con
* @return  PiezaxetapadeproduccionPK
*/

	public int insert(PiezaxetapadeproduccionDB piezaxetapadeproduccion ,Connection con)throws PiezaxetapadeproduccionException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into PIEZAXETAPADEPRODUCCION( IDPIEZA, IDETAPAPRODUCCION, DURACION, DESCRIPCION) values (?, ?, ?, ?)");
				ps.setLong(1,piezaxetapadeproduccion.getIdpieza());
				ps.setLong(2,piezaxetapadeproduccion.getIdetapaproduccion());
				ps.setTime(3,piezaxetapadeproduccion.getDuracion());
				ps.setString(4,piezaxetapadeproduccion.getDescripcion());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new PiezaxetapadeproduccionException(sqle);}
		catch(Exception e){throw new PiezaxetapadeproduccionException(e);}
	}

/**
* 
* Returns a row from the piezaxetapadeproduccion table for the primary key passed as parameter.
* 
*/

	public PiezaxetapadeproduccionDB findByPrimaryKey(long idpieza, long idetapaproduccion, Connection con) throws PiezaxetapadeproduccionException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idpieza, idetapaproduccion, duracion, descripcion from piezaxetapadeproduccion where idpieza = ? AND idetapaproduccion = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idpieza);
	  		stmt.setLong(2, idetapaproduccion);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new PiezaxetapadeproduccionException(sqle);
	  	}
	    catch(Exception e){throw new PiezaxetapadeproduccionException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the piezaxetapadeproduccion table for the primary key object passed as parameter.
* 
* @param  PiezaxetapadeproduccionPK piezaxetapadeproduccionpk
* @param Connection con
* @return  Piezaxetapadeproduccion
*/

	public PiezaxetapadeproduccionDB findByPrimaryKey(PiezaxetapadeproduccionPKDB piezaxetapadeproduccionpk, Connection con) throws PiezaxetapadeproduccionException{
		return findByPrimaryKey(piezaxetapadeproduccionpk.getIdpieza(), piezaxetapadeproduccionpk.getIdetapaproduccion(), con);
	}

/**
*
* Returns all rows from piezaxetapadeproduccion table where IDPIEZA= idpieza
*
* @param   long  idpieza
* @param   Connection con
* @return  Piezaxetapadeproduccion[]
*/

	public PiezaxetapadeproduccionDB[] findByIdpieza(long idpieza, Connection con) throws PiezaxetapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, idetapaproduccion, duracion, descripcion from piezaxetapadeproduccion where idpieza = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idpieza );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaxetapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new PiezaxetapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from piezaxetapadeproduccion table where IDETAPAPRODUCCION= idetapaproduccion
*
* @param   long  idetapaproduccion
* @param   Connection con
* @return  Piezaxetapadeproduccion[]
*/

	public PiezaxetapadeproduccionDB[] findByIdetapaproduccion(long idetapaproduccion, Connection con) throws PiezaxetapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, idetapaproduccion, duracion, descripcion from piezaxetapadeproduccion where idetapaproduccion = ? order by idetapaproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idetapaproduccion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaxetapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new PiezaxetapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from piezaxetapadeproduccion table where DURACION= duracion
*
* @param   Time  duracion
* @param   Connection con
* @return  Piezaxetapadeproduccion[]
*/

	public PiezaxetapadeproduccionDB[] findByDuracion(Time duracion, Connection con) throws PiezaxetapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, idetapaproduccion, duracion, descripcion from piezaxetapadeproduccion where duracion = ? order by duracion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setTime( 1, duracion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaxetapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new PiezaxetapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from piezaxetapadeproduccion table where DESCRIPCION= descripcion
*
* @param   String  descripcion
* @param   Connection con
* @return  Piezaxetapadeproduccion[]
*/

	public PiezaxetapadeproduccionDB[] findByDescripcion(String descripcion, Connection con) throws PiezaxetapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, idetapaproduccion, duracion, descripcion from piezaxetapadeproduccion where descripcion = ? order by descripcion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, descripcion );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaxetapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new PiezaxetapadeproduccionException(e);
			}
			finally{}
	}

/**
* Returns all rows from piezaxetapadeproduccion table 
*
* @param Connection con
* @return  Piezaxetapadeproduccion[]
*
*/

	public PiezaxetapadeproduccionDB[] findAll( Connection con) throws PiezaxetapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idpieza, idetapaproduccion, duracion, descripcion from piezaxetapadeproduccion";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaxetapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new PiezaxetapadeproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from piezaxetapadeproduccion table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Piezaxetapadeproduccion[]
*
*/

	public PiezaxetapadeproduccionDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws PiezaxetapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaxetapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new PiezaxetapadeproduccionException(e);
			}
			finally{}
	}

/**
* Returns rows from piezaxetapadeproduccion table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Piezaxetapadeproduccion[]
*
*/

	public PiezaxetapadeproduccionDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws PiezaxetapadeproduccionException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idpieza, idetapaproduccion, duracion, descripcion from piezaxetapadeproduccion";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new PiezaxetapadeproduccionException(sqle);
			}
			catch(Exception e){
					throw new PiezaxetapadeproduccionException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Piezaxetapadeproduccion
*
*/

	protected PiezaxetapadeproduccionDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					PiezaxetapadeproduccionDB dto = new PiezaxetapadeproduccionDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Piezaxetapadeproduccion dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(PiezaxetapadeproduccionDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdpieza(rs.getLong("idpieza"));
		 dto.setIdetapaproduccion(rs.getLong("idetapaproduccion"));
		 dto.setDuracion(rs.getTime("duracion"));
		 dto.setDescripcion(rs.getString("descripcion"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Piezaxetapadeproduccion[]
*/

	protected PiezaxetapadeproduccionDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			PiezaxetapadeproduccionDB dto = new PiezaxetapadeproduccionDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		PiezaxetapadeproduccionDB ret[] = new PiezaxetapadeproduccionDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}
}
