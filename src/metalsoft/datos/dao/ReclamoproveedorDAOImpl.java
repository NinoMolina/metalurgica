/**
*					--DAO-Generator--
*
* Java code generated by the DAO-Generator developed by akcess(www.akcess.in)
* Date of code generation: Sun Jun 27 03:16:05 ART 2010
*
* DAO-Generator Version 1.2
*
*/

package metalsoft.datos.dao;
import java.math.*;
import java.sql.*;
import java.net.URL;
import java.util.Collection;
import java.util.ArrayList;
import metalsoft.datos.exception.*;
import metalsoft.datos.dbobject.*;
import metalsoft.datos.idao.*;


/**
* 
* Implementation of ReclamoproveedorDAO interface 
* 
*/


public class ReclamoproveedorDAOImpl implements ReclamoproveedorDAO
{


/**
* Method deletes a record from table RECLAMOPROVEEDOR
* @param ReclamoproveedorPK reclamoproveedorpk
* @param  Connection  con
* @return  int
*
*/


	public int delete(ReclamoproveedorPKDB reclamoproveedorpk , Connection con)throws ReclamoproveedorException{
		PreparedStatement ps = null;
		try {
			ps = con.prepareStatement("delete from  RECLAMOPROVEEDOR where idreclamo = ?");
			ps.setLong(1, reclamoproveedorpk.getIdreclamo());
			return(ps.executeUpdate());
		}catch(SQLException sqle) {throw new ReclamoproveedorException(sqle);}
		catch(Exception e) {throw new ReclamoproveedorException(e);}
	}



/**
* This method updates a record in table RECLAMOPROVEEDOR
* @param ReclamoproveedorPK
* @param Reclamoproveedor
* @param  Connection con
* @return   int
*/

	public int update(ReclamoproveedorPKDB reclamoproveedorpk, ReclamoproveedorDB reclamoproveedor, Connection con)throws ReclamoproveedorException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update RECLAMOPROVEEDOR set NRORECLAMO = ? , TIPORECLAMO = ? , MOTIVO = ? , FECHARECLAMO = ? , COMPRA = ?  where idreclamo = ?");
				ps.setLong(1,reclamoproveedor.getNroreclamo());
				ps.setLong(2,reclamoproveedor.getTiporeclamo());
				ps.setString(3,reclamoproveedor.getMotivo());
				ps.setDate(4,reclamoproveedor.getFechareclamo());
				ps.setLong(5,reclamoproveedor.getCompra());
				ps.setLong(6,reclamoproveedorpk.getIdreclamo());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ReclamoproveedorException(sqle);}
		catch(Exception e){throw new ReclamoproveedorException(e);}
	}

        public int updateEstado(ReclamoproveedorDB reclamoproveedor, Connection con)throws ReclamoproveedorException{
		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("update RECLAMOPROVEEDOR set IDESTADORECLAMO = ? , MOTIVO = ?  where idreclamo = ?");
				ps.setLong(1,reclamoproveedor.getEstado());
				ps.setString(2,reclamoproveedor.getMotivo());
				ps.setLong(3,reclamoproveedor.getIdreclamo());
				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ReclamoproveedorException(sqle);}
		catch(Exception e){throw new ReclamoproveedorException(e);}
	}

/**
* This method inserts data in table RECLAMOPROVEEDOR
*
* @param Reclamoproveedor reclamoproveedor
* @param   Connection con
* @return  ReclamoproveedorPK
*/

	public int insert(ReclamoproveedorDB reclamoproveedor ,Connection con)throws ReclamoproveedorException {

		PreparedStatement ps = null;
		try
		{
			ps = con.prepareStatement("insert into RECLAMOPROVEEDOR( NRORECLAMO, TIPORECLAMO, MOTIVO, FECHARECLAMO, COMPRA, IDESTADORECLAMO) values (?, ?, ?, ?, ?, ?)");
				ps.setLong(1,reclamoproveedor.getNroreclamo());
				ps.setLong(2,reclamoproveedor.getTiporeclamo());
				ps.setString(3,reclamoproveedor.getMotivo());
				ps.setDate(4,reclamoproveedor.getFechareclamo());
				ps.setLong(5,reclamoproveedor.getCompra());
                                ps.setLong(6,reclamoproveedor.getEstado());

				return(ps.executeUpdate());
		}catch(SQLException sqle){throw new ReclamoproveedorException(sqle);}
		catch(Exception e){throw new ReclamoproveedorException(e);}
	}

/**
* 
* Returns a row from the reclamoproveedor table for the primary key passed as parameter.
* 
*/

	public ReclamoproveedorDB findByPrimaryKey(long idreclamo, Connection con) throws ReclamoproveedorException{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try {
	  		final String SQLSTATEMENT = "Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor where idreclamo = ?";
	  		stmt=con.prepareStatement(SQLSTATEMENT);
	  		stmt.setLong(1, idreclamo);
	  		rs = stmt.executeQuery();
	  		return fetchSingleResult(rs);
	  	}
	  	catch (SQLException sqle) {
	  		throw new ReclamoproveedorException(sqle);
	  	}
	    catch(Exception e){throw new ReclamoproveedorException(e);}
	  	 finally {}
	}

/**
* 
* Returns a row from the reclamoproveedor table for the primary key object passed as parameter.
* 
* @param  ReclamoproveedorPK reclamoproveedorpk
* @param Connection con
* @return  Reclamoproveedor
*/

	public ReclamoproveedorDB findByPrimaryKey(ReclamoproveedorPKDB reclamoproveedorpk, Connection con) throws ReclamoproveedorException{
		return findByPrimaryKey(reclamoproveedorpk.getIdreclamo(), con);
	}

/**
*
* Returns all rows from reclamoproveedor table where IDRECLAMO= idreclamo
*
* @param   long  idreclamo
* @param   Connection con
* @return  Reclamoproveedor[]
*/

	public ReclamoproveedorDB[] findByIdreclamo(long idreclamo, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor where idreclamo = ? order by idreclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, idreclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoproveedor table where NRORECLAMO= nroreclamo
*
* @param   long  nroreclamo
* @param   Connection con
* @return  Reclamoproveedor[]
*/

	public ReclamoproveedorDB[] findByNroreclamo(long nroreclamo, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor where nroreclamo = ? order by nroreclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, nroreclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoproveedor table where TIPORECLAMO= tiporeclamo
*
* @param   long  tiporeclamo
* @param   Connection con
* @return  Reclamoproveedor[]
*/

	public ReclamoproveedorDB[] findByTiporeclamo(long tiporeclamo, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor where tiporeclamo = ? order by tiporeclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, tiporeclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoproveedor table where MOTIVO= motivo
*
* @param   String  motivo
* @param   Connection con
* @return  Reclamoproveedor[]
*/

	public ReclamoproveedorDB[] findByMotivo(String motivo, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor where motivo = ? order by motivo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setString( 1, motivo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoproveedor table where FECHARECLAMO= fechareclamo
*
* @param   Date  fechareclamo
* @param   Connection con
* @return  Reclamoproveedor[]
*/

	public ReclamoproveedorDB[] findByFechareclamo(Date fechareclamo, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor where fechareclamo = ? order by fechareclamo";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setDate( 1, fechareclamo );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Returns all rows from reclamoproveedor table where COMPRA= compra
*
* @param   long  compra
* @param   Connection con
* @return  Reclamoproveedor[]
*/

	public ReclamoproveedorDB[] findByCompra(long compra, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor where compra = ? order by compra";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					stmt.setLong( 1, compra );
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
* Returns all rows from reclamoproveedor table 
*
* @param Connection con
* @return  Reclamoproveedor[]
*
*/

	public ReclamoproveedorDB[] findAll( Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_STATEMENT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor";
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
* Returns rows from reclamoproveedor table by executing the passed sql statement
* after setting the passed values in Object[]
*
* @param String selectStatement
* @param Object[] sqlParams
* @param Connection con
* @return  Reclamoproveedor[]
*
*/

	public ReclamoproveedorDB[] findExecutingUserSelect(String selectStatement, Object[] sqlParams, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			final String SQL_STATEMENT = selectStatement;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
* Returns rows from reclamoproveedor table by executing the select all fields statement
* after setting the passed where clause and values in Object[]
*
* @param String whereClause
* @param Object[] sqlParams
* @param Connection con
* @return  Reclamoproveedor[]
*
*/

	public ReclamoproveedorDB[] findExecutingUserWhere(String whereClause, Object[] sqlParams, Connection con) throws ReclamoproveedorException{
			PreparedStatement stmt = null;
			ResultSet rs = null;
			String SQL_SELECT ="Select idreclamo, nroreclamo, tiporeclamo, motivo, fechareclamo, compra from reclamoproveedor";
			final String SQL_STATEMENT =SQL_SELECT + " where " + whereClause;
			try {
					stmt = con.prepareStatement(SQL_STATEMENT);
					for (int i=0; i<sqlParams.length; i++ ) {
							stmt.setObject( i+1, sqlParams[i] );
					}
					rs = stmt.executeQuery();
					return fetchMultiResults(rs);
			}catch(SQLException sqle){
					throw new ReclamoproveedorException(sqle);
			}
			catch(Exception e){
					throw new ReclamoproveedorException(e);
			}
			finally{}
	}

/**
*
* Populates a Data Transfer Object by fetching single record from resultSet 
*
* @param ResultSet rs
* @return  Reclamoproveedor
*
*/

	protected ReclamoproveedorDB fetchSingleResult(ResultSet rs) throws SQLException
	{
			if (rs.next()) {
					ReclamoproveedorDB dto = new ReclamoproveedorDB();
					populateVO( dto, rs);
				return dto;
			} else {
				return null;
			}
	}

/**
* 
* Populates a Data Transfer Object by fetching data from  ResultSet
* 
* @param Reclamoproveedor dto
* @param   ResultSet rs
* @return  void
*/

	protected void populateVO(ReclamoproveedorDB dto, ResultSet rs) throws SQLException
	{
		 dto.setIdreclamo(rs.getLong("idreclamo"));
		 dto.setNroreclamo(rs.getLong("nroreclamo"));
		 dto.setTiporeclamo(rs.getLong("tiporeclamo"));
		 dto.setMotivo(rs.getString("motivo"));
		 dto.setFechareclamo(rs.getDate("fechareclamo"));
		 dto.setCompra(rs.getLong("compra"));
	}

/**
* 
* Returns an array of Value Objects by fetching data from resultSet
* 
* @param   ResultSet rs
* @return  Reclamoproveedor[]
*/

	protected ReclamoproveedorDB[]  fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ReclamoproveedorDB dto = new ReclamoproveedorDB();
			populateVO( dto, rs);
			resultList.add(dto);
		}
		ReclamoproveedorDB ret[] = new ReclamoproveedorDB[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

    public String getUltimoIDReclamo(Connection con) throws Exception {
        PreparedStatement stmt = null;
            ResultSet rs = null;
            String SQL_STATEMENT ="Select max (idreclamo) from reclamoproveedor";
            try {
                    stmt = con.prepareStatement(SQL_STATEMENT);
                    rs = stmt.executeQuery();
                    rs.next();
                    Object id = rs.getInt("max");
                    return id.toString();
            }
            catch(Exception e){
                throw new Exception();
            }
    }
            public String getUltimoNumeroReclamoproveedor(Connection con) throws Exception
        {
            PreparedStatement stmt = null;
            ResultSet rs = null;
            String SQL_STATEMENT ="SELECT (MAX(nroreclamo) + 1) AS maximo FROM reclamoproveedor";
            try {
                    stmt = con.prepareStatement(SQL_STATEMENT);
                    rs = stmt.executeQuery();
                    rs.next();
                    Object id = rs.getInt("maximo");
                    return id.toString();
            }
            catch(Exception e){
                throw new Exception();
            }
        }

    public ReclamoproveedorDB[] findByComprasProveedor(long idProveedor, Connection con) throws ReclamoproveedorException {
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String SQL_STATEMENT = "Select rp.idreclamo, rp.nroreclamo, rp.tiporeclamo, rp.motivo, rp.fechareclamo, rp.compra from reclamoproveedor rp, compra c, proveedor p where rp.compra = c.idcompra and c.proveedor = p.idproveedor and p.idproveedor = ? and rp.idestadoreclamo =1 order by rp.nroreclamo";
        try {
	stmt = con.prepareStatement(SQL_STATEMENT);
	stmt.setLong( 1, idProveedor );
	rs = stmt.executeQuery();
	return fetchMultiResults(rs);
        } catch (SQLException sqle) {
            throw new ReclamoproveedorException(sqle);
        } catch (Exception e) {
            throw new ReclamoproveedorException(e);
        } finally {
        }
    }
}
